// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hanjunlee/gitploy/ent/chatcallback"
	"github.com/hanjunlee/gitploy/ent/chatuser"
	"github.com/hanjunlee/gitploy/ent/repo"
)

// ChatCallbackCreate is the builder for creating a ChatCallback entity.
type ChatCallbackCreate struct {
	config
	mutation *ChatCallbackMutation
	hooks    []Hook
}

// SetState sets the "state" field.
func (ccc *ChatCallbackCreate) SetState(s string) *ChatCallbackCreate {
	ccc.mutation.SetState(s)
	return ccc
}

// SetType sets the "type" field.
func (ccc *ChatCallbackCreate) SetType(c chatcallback.Type) *ChatCallbackCreate {
	ccc.mutation.SetType(c)
	return ccc
}

// SetIsOpened sets the "is_opened" field.
func (ccc *ChatCallbackCreate) SetIsOpened(b bool) *ChatCallbackCreate {
	ccc.mutation.SetIsOpened(b)
	return ccc
}

// SetNillableIsOpened sets the "is_opened" field if the given value is not nil.
func (ccc *ChatCallbackCreate) SetNillableIsOpened(b *bool) *ChatCallbackCreate {
	if b != nil {
		ccc.SetIsOpened(*b)
	}
	return ccc
}

// SetCreatedAt sets the "created_at" field.
func (ccc *ChatCallbackCreate) SetCreatedAt(t time.Time) *ChatCallbackCreate {
	ccc.mutation.SetCreatedAt(t)
	return ccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccc *ChatCallbackCreate) SetNillableCreatedAt(t *time.Time) *ChatCallbackCreate {
	if t != nil {
		ccc.SetCreatedAt(*t)
	}
	return ccc
}

// SetUpdatedAt sets the "updated_at" field.
func (ccc *ChatCallbackCreate) SetUpdatedAt(t time.Time) *ChatCallbackCreate {
	ccc.mutation.SetUpdatedAt(t)
	return ccc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccc *ChatCallbackCreate) SetNillableUpdatedAt(t *time.Time) *ChatCallbackCreate {
	if t != nil {
		ccc.SetUpdatedAt(*t)
	}
	return ccc
}

// SetChatUserID sets the "chat_user_id" field.
func (ccc *ChatCallbackCreate) SetChatUserID(s string) *ChatCallbackCreate {
	ccc.mutation.SetChatUserID(s)
	return ccc
}

// SetRepoID sets the "repo_id" field.
func (ccc *ChatCallbackCreate) SetRepoID(s string) *ChatCallbackCreate {
	ccc.mutation.SetRepoID(s)
	return ccc
}

// SetChatUser sets the "chat_user" edge to the ChatUser entity.
func (ccc *ChatCallbackCreate) SetChatUser(c *ChatUser) *ChatCallbackCreate {
	return ccc.SetChatUserID(c.ID)
}

// SetRepo sets the "repo" edge to the Repo entity.
func (ccc *ChatCallbackCreate) SetRepo(r *Repo) *ChatCallbackCreate {
	return ccc.SetRepoID(r.ID)
}

// Mutation returns the ChatCallbackMutation object of the builder.
func (ccc *ChatCallbackCreate) Mutation() *ChatCallbackMutation {
	return ccc.mutation
}

// Save creates the ChatCallback in the database.
func (ccc *ChatCallbackCreate) Save(ctx context.Context) (*ChatCallback, error) {
	var (
		err  error
		node *ChatCallback
	)
	ccc.defaults()
	if len(ccc.hooks) == 0 {
		if err = ccc.check(); err != nil {
			return nil, err
		}
		node, err = ccc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChatCallbackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccc.check(); err != nil {
				return nil, err
			}
			ccc.mutation = mutation
			node, err = ccc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ccc.hooks) - 1; i >= 0; i-- {
			mut = ccc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ccc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *ChatCallbackCreate) SaveX(ctx context.Context) *ChatCallback {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ccc *ChatCallbackCreate) defaults() {
	if _, ok := ccc.mutation.IsOpened(); !ok {
		v := chatcallback.DefaultIsOpened
		ccc.mutation.SetIsOpened(v)
	}
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		v := chatcallback.DefaultCreatedAt()
		ccc.mutation.SetCreatedAt(v)
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		v := chatcallback.DefaultUpdatedAt()
		ccc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *ChatCallbackCreate) check() error {
	if _, ok := ccc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New("ent: missing required field \"state\"")}
	}
	if _, ok := ccc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if v, ok := ccc.mutation.GetType(); ok {
		if err := chatcallback.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := ccc.mutation.IsOpened(); !ok {
		return &ValidationError{Name: "is_opened", err: errors.New("ent: missing required field \"is_opened\"")}
	}
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := ccc.mutation.ChatUserID(); !ok {
		return &ValidationError{Name: "chat_user_id", err: errors.New("ent: missing required field \"chat_user_id\"")}
	}
	if _, ok := ccc.mutation.RepoID(); !ok {
		return &ValidationError{Name: "repo_id", err: errors.New("ent: missing required field \"repo_id\"")}
	}
	if _, ok := ccc.mutation.ChatUserID(); !ok {
		return &ValidationError{Name: "chat_user", err: errors.New("ent: missing required edge \"chat_user\"")}
	}
	if _, ok := ccc.mutation.RepoID(); !ok {
		return &ValidationError{Name: "repo", err: errors.New("ent: missing required edge \"repo\"")}
	}
	return nil
}

func (ccc *ChatCallbackCreate) sqlSave(ctx context.Context) (*ChatCallback, error) {
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ccc *ChatCallbackCreate) createSpec() (*ChatCallback, *sqlgraph.CreateSpec) {
	var (
		_node = &ChatCallback{config: ccc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: chatcallback.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chatcallback.FieldID,
			},
		}
	)
	if value, ok := ccc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chatcallback.FieldState,
		})
		_node.State = value
	}
	if value, ok := ccc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: chatcallback.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ccc.mutation.IsOpened(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: chatcallback.FieldIsOpened,
		})
		_node.IsOpened = value
	}
	if value, ok := ccc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chatcallback.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ccc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chatcallback.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := ccc.mutation.ChatUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatcallback.ChatUserTable,
			Columns: []string{chatcallback.ChatUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: chatuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ChatUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ccc.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatcallback.RepoTable,
			Columns: []string{chatcallback.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RepoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChatCallbackCreateBulk is the builder for creating many ChatCallback entities in bulk.
type ChatCallbackCreateBulk struct {
	config
	builders []*ChatCallbackCreate
}

// Save creates the ChatCallback entities in the database.
func (cccb *ChatCallbackCreateBulk) Save(ctx context.Context) ([]*ChatCallback, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*ChatCallback, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChatCallbackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *ChatCallbackCreateBulk) SaveX(ctx context.Context) []*ChatCallback {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
