// Code generated by entc, DO NOT EDIT.

package chatcallback

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the chatcallback type in the database.
	Label = "chat_callback"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldIsOpened holds the string denoting the is_opened field in the database.
	FieldIsOpened = "is_opened"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldChatUserID holds the string denoting the chat_user_id field in the database.
	FieldChatUserID = "chat_user_id"
	// FieldRepoID holds the string denoting the repo_id field in the database.
	FieldRepoID = "repo_id"
	// EdgeChatUser holds the string denoting the chat_user edge name in mutations.
	EdgeChatUser = "chat_user"
	// EdgeRepo holds the string denoting the repo edge name in mutations.
	EdgeRepo = "repo"
	// Table holds the table name of the chatcallback in the database.
	Table = "chat_callbacks"
	// ChatUserTable is the table the holds the chat_user relation/edge.
	ChatUserTable = "chat_callbacks"
	// ChatUserInverseTable is the table name for the ChatUser entity.
	// It exists in this package in order to avoid circular dependency with the "chatuser" package.
	ChatUserInverseTable = "chat_users"
	// ChatUserColumn is the table column denoting the chat_user relation/edge.
	ChatUserColumn = "chat_user_id"
	// RepoTable is the table the holds the repo relation/edge.
	RepoTable = "chat_callbacks"
	// RepoInverseTable is the table name for the Repo entity.
	// It exists in this package in order to avoid circular dependency with the "repo" package.
	RepoInverseTable = "repos"
	// RepoColumn is the table column denoting the repo relation/edge.
	RepoColumn = "repo_id"
)

// Columns holds all SQL columns for chatcallback fields.
var Columns = []string{
	FieldID,
	FieldState,
	FieldType,
	FieldIsOpened,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldChatUserID,
	FieldRepoID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsOpened holds the default value on creation for the "is_opened" field.
	DefaultIsOpened bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeDeploy   Type = "deploy"
	TypeRollback Type = "rollback"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeDeploy, TypeRollback:
		return nil
	default:
		return fmt.Errorf("chatcallback: invalid enum value for type field: %q", _type)
	}
}
