// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/hanjunlee/gitploy/ent/approval"
	"github.com/hanjunlee/gitploy/ent/callback"
	"github.com/hanjunlee/gitploy/ent/chatuser"
	"github.com/hanjunlee/gitploy/ent/deployment"
	"github.com/hanjunlee/gitploy/ent/deploymentstatus"
	"github.com/hanjunlee/gitploy/ent/event"
	"github.com/hanjunlee/gitploy/ent/notificationrecord"
	"github.com/hanjunlee/gitploy/ent/perm"
	"github.com/hanjunlee/gitploy/ent/predicate"
	"github.com/hanjunlee/gitploy/ent/repo"
	"github.com/hanjunlee/gitploy/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeApproval           = "Approval"
	TypeCallback           = "Callback"
	TypeChatUser           = "ChatUser"
	TypeDeployment         = "Deployment"
	TypeDeploymentStatus   = "DeploymentStatus"
	TypeEvent              = "Event"
	TypeNotificationRecord = "NotificationRecord"
	TypePerm               = "Perm"
	TypeRepo               = "Repo"
	TypeUser               = "User"
)

// ApprovalMutation represents an operation that mutates the Approval nodes in the graph.
type ApprovalMutation struct {
	config
	op                Op
	typ               string
	id                *int
	status            *approval.Status
	created_at        *time.Time
	updated_at        *time.Time
	clearedFields     map[string]struct{}
	user              *string
	cleareduser       bool
	deployment        *int
	cleareddeployment bool
	event             map[int]struct{}
	removedevent      map[int]struct{}
	clearedevent      bool
	done              bool
	oldValue          func(context.Context) (*Approval, error)
	predicates        []predicate.Approval
}

var _ ent.Mutation = (*ApprovalMutation)(nil)

// approvalOption allows management of the mutation configuration using functional options.
type approvalOption func(*ApprovalMutation)

// newApprovalMutation creates new mutation for the Approval entity.
func newApprovalMutation(c config, op Op, opts ...approvalOption) *ApprovalMutation {
	m := &ApprovalMutation{
		config:        c,
		op:            op,
		typ:           TypeApproval,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApprovalID sets the ID field of the mutation.
func withApprovalID(id int) approvalOption {
	return func(m *ApprovalMutation) {
		var (
			err   error
			once  sync.Once
			value *Approval
		)
		m.oldValue = func(ctx context.Context) (*Approval, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Approval.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApproval sets the old Approval of the mutation.
func withApproval(node *Approval) approvalOption {
	return func(m *ApprovalMutation) {
		m.oldValue = func(context.Context) (*Approval, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApprovalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApprovalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApprovalMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetStatus sets the "status" field.
func (m *ApprovalMutation) SetStatus(a approval.Status) {
	m.status = &a
}

// Status returns the value of the "status" field in the mutation.
func (m *ApprovalMutation) Status() (r approval.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Approval entity.
// If the Approval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalMutation) OldStatus(ctx context.Context) (v approval.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ApprovalMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ApprovalMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ApprovalMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Approval entity.
// If the Approval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ApprovalMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ApprovalMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ApprovalMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Approval entity.
// If the Approval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ApprovalMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user_id" field.
func (m *ApprovalMutation) SetUserID(s string) {
	m.user = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ApprovalMutation) UserID() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Approval entity.
// If the Approval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ApprovalMutation) ResetUserID() {
	m.user = nil
}

// SetDeploymentID sets the "deployment_id" field.
func (m *ApprovalMutation) SetDeploymentID(i int) {
	m.deployment = &i
}

// DeploymentID returns the value of the "deployment_id" field in the mutation.
func (m *ApprovalMutation) DeploymentID() (r int, exists bool) {
	v := m.deployment
	if v == nil {
		return
	}
	return *v, true
}

// OldDeploymentID returns the old "deployment_id" field's value of the Approval entity.
// If the Approval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalMutation) OldDeploymentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeploymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeploymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeploymentID: %w", err)
	}
	return oldValue.DeploymentID, nil
}

// ResetDeploymentID resets all changes to the "deployment_id" field.
func (m *ApprovalMutation) ResetDeploymentID() {
	m.deployment = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *ApprovalMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ApprovalMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ApprovalMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ApprovalMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearDeployment clears the "deployment" edge to the Deployment entity.
func (m *ApprovalMutation) ClearDeployment() {
	m.cleareddeployment = true
}

// DeploymentCleared reports if the "deployment" edge to the Deployment entity was cleared.
func (m *ApprovalMutation) DeploymentCleared() bool {
	return m.cleareddeployment
}

// DeploymentIDs returns the "deployment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DeploymentID instead. It exists only for internal usage by the builders.
func (m *ApprovalMutation) DeploymentIDs() (ids []int) {
	if id := m.deployment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDeployment resets all changes to the "deployment" edge.
func (m *ApprovalMutation) ResetDeployment() {
	m.deployment = nil
	m.cleareddeployment = false
}

// AddEventIDs adds the "event" edge to the Event entity by ids.
func (m *ApprovalMutation) AddEventIDs(ids ...int) {
	if m.event == nil {
		m.event = make(map[int]struct{})
	}
	for i := range ids {
		m.event[ids[i]] = struct{}{}
	}
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *ApprovalMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *ApprovalMutation) EventCleared() bool {
	return m.clearedevent
}

// RemoveEventIDs removes the "event" edge to the Event entity by IDs.
func (m *ApprovalMutation) RemoveEventIDs(ids ...int) {
	if m.removedevent == nil {
		m.removedevent = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.event, ids[i])
		m.removedevent[ids[i]] = struct{}{}
	}
}

// RemovedEvent returns the removed IDs of the "event" edge to the Event entity.
func (m *ApprovalMutation) RemovedEventIDs() (ids []int) {
	for id := range m.removedevent {
		ids = append(ids, id)
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
func (m *ApprovalMutation) EventIDs() (ids []int) {
	for id := range m.event {
		ids = append(ids, id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *ApprovalMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
	m.removedevent = nil
}

// Where appends a list predicates to the ApprovalMutation builder.
func (m *ApprovalMutation) Where(ps ...predicate.Approval) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ApprovalMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Approval).
func (m *ApprovalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApprovalMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.status != nil {
		fields = append(fields, approval.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, approval.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, approval.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, approval.FieldUserID)
	}
	if m.deployment != nil {
		fields = append(fields, approval.FieldDeploymentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApprovalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case approval.FieldStatus:
		return m.Status()
	case approval.FieldCreatedAt:
		return m.CreatedAt()
	case approval.FieldUpdatedAt:
		return m.UpdatedAt()
	case approval.FieldUserID:
		return m.UserID()
	case approval.FieldDeploymentID:
		return m.DeploymentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApprovalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case approval.FieldStatus:
		return m.OldStatus(ctx)
	case approval.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case approval.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case approval.FieldUserID:
		return m.OldUserID(ctx)
	case approval.FieldDeploymentID:
		return m.OldDeploymentID(ctx)
	}
	return nil, fmt.Errorf("unknown Approval field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApprovalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case approval.FieldStatus:
		v, ok := value.(approval.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case approval.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case approval.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case approval.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case approval.FieldDeploymentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeploymentID(v)
		return nil
	}
	return fmt.Errorf("unknown Approval field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApprovalMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApprovalMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApprovalMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Approval numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApprovalMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApprovalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApprovalMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Approval nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApprovalMutation) ResetField(name string) error {
	switch name {
	case approval.FieldStatus:
		m.ResetStatus()
		return nil
	case approval.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case approval.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case approval.FieldUserID:
		m.ResetUserID()
		return nil
	case approval.FieldDeploymentID:
		m.ResetDeploymentID()
		return nil
	}
	return fmt.Errorf("unknown Approval field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApprovalMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, approval.EdgeUser)
	}
	if m.deployment != nil {
		edges = append(edges, approval.EdgeDeployment)
	}
	if m.event != nil {
		edges = append(edges, approval.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApprovalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case approval.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case approval.EdgeDeployment:
		if id := m.deployment; id != nil {
			return []ent.Value{*id}
		}
	case approval.EdgeEvent:
		ids := make([]ent.Value, 0, len(m.event))
		for id := range m.event {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApprovalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedevent != nil {
		edges = append(edges, approval.EdgeEvent)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApprovalMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case approval.EdgeEvent:
		ids := make([]ent.Value, 0, len(m.removedevent))
		for id := range m.removedevent {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApprovalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, approval.EdgeUser)
	}
	if m.cleareddeployment {
		edges = append(edges, approval.EdgeDeployment)
	}
	if m.clearedevent {
		edges = append(edges, approval.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApprovalMutation) EdgeCleared(name string) bool {
	switch name {
	case approval.EdgeUser:
		return m.cleareduser
	case approval.EdgeDeployment:
		return m.cleareddeployment
	case approval.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApprovalMutation) ClearEdge(name string) error {
	switch name {
	case approval.EdgeUser:
		m.ClearUser()
		return nil
	case approval.EdgeDeployment:
		m.ClearDeployment()
		return nil
	}
	return fmt.Errorf("unknown Approval unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApprovalMutation) ResetEdge(name string) error {
	switch name {
	case approval.EdgeUser:
		m.ResetUser()
		return nil
	case approval.EdgeDeployment:
		m.ResetDeployment()
		return nil
	case approval.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown Approval edge %s", name)
}

// CallbackMutation represents an operation that mutates the Callback nodes in the graph.
type CallbackMutation struct {
	config
	op            Op
	typ           string
	id            *int
	hash          *string
	_type         *callback.Type
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	repo          *string
	clearedrepo   bool
	done          bool
	oldValue      func(context.Context) (*Callback, error)
	predicates    []predicate.Callback
}

var _ ent.Mutation = (*CallbackMutation)(nil)

// callbackOption allows management of the mutation configuration using functional options.
type callbackOption func(*CallbackMutation)

// newCallbackMutation creates new mutation for the Callback entity.
func newCallbackMutation(c config, op Op, opts ...callbackOption) *CallbackMutation {
	m := &CallbackMutation{
		config:        c,
		op:            op,
		typ:           TypeCallback,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCallbackID sets the ID field of the mutation.
func withCallbackID(id int) callbackOption {
	return func(m *CallbackMutation) {
		var (
			err   error
			once  sync.Once
			value *Callback
		)
		m.oldValue = func(ctx context.Context) (*Callback, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Callback.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCallback sets the old Callback of the mutation.
func withCallback(node *Callback) callbackOption {
	return func(m *CallbackMutation) {
		m.oldValue = func(context.Context) (*Callback, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CallbackMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CallbackMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CallbackMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetHash sets the "hash" field.
func (m *CallbackMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *CallbackMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the Callback entity.
// If the Callback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CallbackMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *CallbackMutation) ResetHash() {
	m.hash = nil
}

// SetType sets the "type" field.
func (m *CallbackMutation) SetType(c callback.Type) {
	m._type = &c
}

// GetType returns the value of the "type" field in the mutation.
func (m *CallbackMutation) GetType() (r callback.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Callback entity.
// If the Callback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CallbackMutation) OldType(ctx context.Context) (v callback.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *CallbackMutation) ResetType() {
	m._type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CallbackMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CallbackMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Callback entity.
// If the Callback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CallbackMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CallbackMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CallbackMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CallbackMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Callback entity.
// If the Callback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CallbackMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CallbackMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetRepoID sets the "repo_id" field.
func (m *CallbackMutation) SetRepoID(s string) {
	m.repo = &s
}

// RepoID returns the value of the "repo_id" field in the mutation.
func (m *CallbackMutation) RepoID() (r string, exists bool) {
	v := m.repo
	if v == nil {
		return
	}
	return *v, true
}

// OldRepoID returns the old "repo_id" field's value of the Callback entity.
// If the Callback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CallbackMutation) OldRepoID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRepoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRepoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepoID: %w", err)
	}
	return oldValue.RepoID, nil
}

// ResetRepoID resets all changes to the "repo_id" field.
func (m *CallbackMutation) ResetRepoID() {
	m.repo = nil
}

// ClearRepo clears the "repo" edge to the Repo entity.
func (m *CallbackMutation) ClearRepo() {
	m.clearedrepo = true
}

// RepoCleared reports if the "repo" edge to the Repo entity was cleared.
func (m *CallbackMutation) RepoCleared() bool {
	return m.clearedrepo
}

// RepoIDs returns the "repo" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RepoID instead. It exists only for internal usage by the builders.
func (m *CallbackMutation) RepoIDs() (ids []string) {
	if id := m.repo; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRepo resets all changes to the "repo" edge.
func (m *CallbackMutation) ResetRepo() {
	m.repo = nil
	m.clearedrepo = false
}

// Where appends a list predicates to the CallbackMutation builder.
func (m *CallbackMutation) Where(ps ...predicate.Callback) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CallbackMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Callback).
func (m *CallbackMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CallbackMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.hash != nil {
		fields = append(fields, callback.FieldHash)
	}
	if m._type != nil {
		fields = append(fields, callback.FieldType)
	}
	if m.created_at != nil {
		fields = append(fields, callback.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, callback.FieldUpdatedAt)
	}
	if m.repo != nil {
		fields = append(fields, callback.FieldRepoID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CallbackMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case callback.FieldHash:
		return m.Hash()
	case callback.FieldType:
		return m.GetType()
	case callback.FieldCreatedAt:
		return m.CreatedAt()
	case callback.FieldUpdatedAt:
		return m.UpdatedAt()
	case callback.FieldRepoID:
		return m.RepoID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CallbackMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case callback.FieldHash:
		return m.OldHash(ctx)
	case callback.FieldType:
		return m.OldType(ctx)
	case callback.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case callback.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case callback.FieldRepoID:
		return m.OldRepoID(ctx)
	}
	return nil, fmt.Errorf("unknown Callback field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CallbackMutation) SetField(name string, value ent.Value) error {
	switch name {
	case callback.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case callback.FieldType:
		v, ok := value.(callback.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case callback.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case callback.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case callback.FieldRepoID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepoID(v)
		return nil
	}
	return fmt.Errorf("unknown Callback field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CallbackMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CallbackMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CallbackMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Callback numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CallbackMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CallbackMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CallbackMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Callback nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CallbackMutation) ResetField(name string) error {
	switch name {
	case callback.FieldHash:
		m.ResetHash()
		return nil
	case callback.FieldType:
		m.ResetType()
		return nil
	case callback.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case callback.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case callback.FieldRepoID:
		m.ResetRepoID()
		return nil
	}
	return fmt.Errorf("unknown Callback field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CallbackMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.repo != nil {
		edges = append(edges, callback.EdgeRepo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CallbackMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case callback.EdgeRepo:
		if id := m.repo; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CallbackMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CallbackMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CallbackMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrepo {
		edges = append(edges, callback.EdgeRepo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CallbackMutation) EdgeCleared(name string) bool {
	switch name {
	case callback.EdgeRepo:
		return m.clearedrepo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CallbackMutation) ClearEdge(name string) error {
	switch name {
	case callback.EdgeRepo:
		m.ClearRepo()
		return nil
	}
	return fmt.Errorf("unknown Callback unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CallbackMutation) ResetEdge(name string) error {
	switch name {
	case callback.EdgeRepo:
		m.ResetRepo()
		return nil
	}
	return fmt.Errorf("unknown Callback edge %s", name)
}

// ChatUserMutation represents an operation that mutates the ChatUser nodes in the graph.
type ChatUserMutation struct {
	config
	op            Op
	typ           string
	id            *string
	token         *string
	refresh       *string
	expiry        *time.Time
	bot_token     *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*ChatUser, error)
	predicates    []predicate.ChatUser
}

var _ ent.Mutation = (*ChatUserMutation)(nil)

// chatuserOption allows management of the mutation configuration using functional options.
type chatuserOption func(*ChatUserMutation)

// newChatUserMutation creates new mutation for the ChatUser entity.
func newChatUserMutation(c config, op Op, opts ...chatuserOption) *ChatUserMutation {
	m := &ChatUserMutation{
		config:        c,
		op:            op,
		typ:           TypeChatUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatUserID sets the ID field of the mutation.
func withChatUserID(id string) chatuserOption {
	return func(m *ChatUserMutation) {
		var (
			err   error
			once  sync.Once
			value *ChatUser
		)
		m.oldValue = func(ctx context.Context) (*ChatUser, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChatUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChatUser sets the old ChatUser of the mutation.
func withChatUser(node *ChatUser) chatuserOption {
	return func(m *ChatUserMutation) {
		m.oldValue = func(context.Context) (*ChatUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ChatUser entities.
func (m *ChatUserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatUserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetToken sets the "token" field.
func (m *ChatUserMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *ChatUserMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the ChatUser entity.
// If the ChatUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatUserMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *ChatUserMutation) ResetToken() {
	m.token = nil
}

// SetRefresh sets the "refresh" field.
func (m *ChatUserMutation) SetRefresh(s string) {
	m.refresh = &s
}

// Refresh returns the value of the "refresh" field in the mutation.
func (m *ChatUserMutation) Refresh() (r string, exists bool) {
	v := m.refresh
	if v == nil {
		return
	}
	return *v, true
}

// OldRefresh returns the old "refresh" field's value of the ChatUser entity.
// If the ChatUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatUserMutation) OldRefresh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRefresh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRefresh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefresh: %w", err)
	}
	return oldValue.Refresh, nil
}

// ResetRefresh resets all changes to the "refresh" field.
func (m *ChatUserMutation) ResetRefresh() {
	m.refresh = nil
}

// SetExpiry sets the "expiry" field.
func (m *ChatUserMutation) SetExpiry(t time.Time) {
	m.expiry = &t
}

// Expiry returns the value of the "expiry" field in the mutation.
func (m *ChatUserMutation) Expiry() (r time.Time, exists bool) {
	v := m.expiry
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiry returns the old "expiry" field's value of the ChatUser entity.
// If the ChatUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatUserMutation) OldExpiry(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExpiry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExpiry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiry: %w", err)
	}
	return oldValue.Expiry, nil
}

// ResetExpiry resets all changes to the "expiry" field.
func (m *ChatUserMutation) ResetExpiry() {
	m.expiry = nil
}

// SetBotToken sets the "bot_token" field.
func (m *ChatUserMutation) SetBotToken(s string) {
	m.bot_token = &s
}

// BotToken returns the value of the "bot_token" field in the mutation.
func (m *ChatUserMutation) BotToken() (r string, exists bool) {
	v := m.bot_token
	if v == nil {
		return
	}
	return *v, true
}

// OldBotToken returns the old "bot_token" field's value of the ChatUser entity.
// If the ChatUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatUserMutation) OldBotToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBotToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBotToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBotToken: %w", err)
	}
	return oldValue.BotToken, nil
}

// ResetBotToken resets all changes to the "bot_token" field.
func (m *ChatUserMutation) ResetBotToken() {
	m.bot_token = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ChatUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ChatUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ChatUser entity.
// If the ChatUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ChatUserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ChatUserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ChatUserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ChatUser entity.
// If the ChatUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatUserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ChatUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user_id" field.
func (m *ChatUserMutation) SetUserID(s string) {
	m.user = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ChatUserMutation) UserID() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ChatUser entity.
// If the ChatUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatUserMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ChatUserMutation) ResetUserID() {
	m.user = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *ChatUserMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ChatUserMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ChatUserMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ChatUserMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the ChatUserMutation builder.
func (m *ChatUserMutation) Where(ps ...predicate.ChatUser) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ChatUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ChatUser).
func (m *ChatUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatUserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.token != nil {
		fields = append(fields, chatuser.FieldToken)
	}
	if m.refresh != nil {
		fields = append(fields, chatuser.FieldRefresh)
	}
	if m.expiry != nil {
		fields = append(fields, chatuser.FieldExpiry)
	}
	if m.bot_token != nil {
		fields = append(fields, chatuser.FieldBotToken)
	}
	if m.created_at != nil {
		fields = append(fields, chatuser.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, chatuser.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, chatuser.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chatuser.FieldToken:
		return m.Token()
	case chatuser.FieldRefresh:
		return m.Refresh()
	case chatuser.FieldExpiry:
		return m.Expiry()
	case chatuser.FieldBotToken:
		return m.BotToken()
	case chatuser.FieldCreatedAt:
		return m.CreatedAt()
	case chatuser.FieldUpdatedAt:
		return m.UpdatedAt()
	case chatuser.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chatuser.FieldToken:
		return m.OldToken(ctx)
	case chatuser.FieldRefresh:
		return m.OldRefresh(ctx)
	case chatuser.FieldExpiry:
		return m.OldExpiry(ctx)
	case chatuser.FieldBotToken:
		return m.OldBotToken(ctx)
	case chatuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case chatuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case chatuser.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown ChatUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chatuser.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case chatuser.FieldRefresh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefresh(v)
		return nil
	case chatuser.FieldExpiry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiry(v)
		return nil
	case chatuser.FieldBotToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBotToken(v)
		return nil
	case chatuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case chatuser.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case chatuser.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown ChatUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ChatUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ChatUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatUserMutation) ResetField(name string) error {
	switch name {
	case chatuser.FieldToken:
		m.ResetToken()
		return nil
	case chatuser.FieldRefresh:
		m.ResetRefresh()
		return nil
	case chatuser.FieldExpiry:
		m.ResetExpiry()
		return nil
	case chatuser.FieldBotToken:
		m.ResetBotToken()
		return nil
	case chatuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case chatuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case chatuser.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown ChatUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, chatuser.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chatuser.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, chatuser.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatUserMutation) EdgeCleared(name string) bool {
	switch name {
	case chatuser.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatUserMutation) ClearEdge(name string) error {
	switch name {
	case chatuser.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown ChatUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatUserMutation) ResetEdge(name string) error {
	switch name {
	case chatuser.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown ChatUser edge %s", name)
}

// DeploymentMutation represents an operation that mutates the Deployment nodes in the graph.
type DeploymentMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	number                     *int
	addnumber                  *int
	_type                      *deployment.Type
	env                        *string
	ref                        *string
	status                     *deployment.Status
	uid                        *int64
	adduid                     *int64
	sha                        *string
	html_url                   *string
	is_rollback                *bool
	is_approval_enabled        *bool
	required_approval_count    *int
	addrequired_approval_count *int
	created_at                 *time.Time
	updated_at                 *time.Time
	clearedFields              map[string]struct{}
	user                       *string
	cleareduser                bool
	repo                       *string
	clearedrepo                bool
	approvals                  map[int]struct{}
	removedapprovals           map[int]struct{}
	clearedapprovals           bool
	deployment_statuses        map[int]struct{}
	removeddeployment_statuses map[int]struct{}
	cleareddeployment_statuses bool
	event                      map[int]struct{}
	removedevent               map[int]struct{}
	clearedevent               bool
	done                       bool
	oldValue                   func(context.Context) (*Deployment, error)
	predicates                 []predicate.Deployment
}

var _ ent.Mutation = (*DeploymentMutation)(nil)

// deploymentOption allows management of the mutation configuration using functional options.
type deploymentOption func(*DeploymentMutation)

// newDeploymentMutation creates new mutation for the Deployment entity.
func newDeploymentMutation(c config, op Op, opts ...deploymentOption) *DeploymentMutation {
	m := &DeploymentMutation{
		config:        c,
		op:            op,
		typ:           TypeDeployment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeploymentID sets the ID field of the mutation.
func withDeploymentID(id int) deploymentOption {
	return func(m *DeploymentMutation) {
		var (
			err   error
			once  sync.Once
			value *Deployment
		)
		m.oldValue = func(ctx context.Context) (*Deployment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Deployment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDeployment sets the old Deployment of the mutation.
func withDeployment(node *Deployment) deploymentOption {
	return func(m *DeploymentMutation) {
		m.oldValue = func(context.Context) (*Deployment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeploymentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeploymentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeploymentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNumber sets the "number" field.
func (m *DeploymentMutation) SetNumber(i int) {
	m.number = &i
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *DeploymentMutation) Number() (r int, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds i to the "number" field.
func (m *DeploymentMutation) AddNumber(i int) {
	if m.addnumber != nil {
		*m.addnumber += i
	} else {
		m.addnumber = &i
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *DeploymentMutation) AddedNumber() (r int, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *DeploymentMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// SetType sets the "type" field.
func (m *DeploymentMutation) SetType(d deployment.Type) {
	m._type = &d
}

// GetType returns the value of the "type" field in the mutation.
func (m *DeploymentMutation) GetType() (r deployment.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldType(ctx context.Context) (v deployment.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *DeploymentMutation) ResetType() {
	m._type = nil
}

// SetEnv sets the "env" field.
func (m *DeploymentMutation) SetEnv(s string) {
	m.env = &s
}

// Env returns the value of the "env" field in the mutation.
func (m *DeploymentMutation) Env() (r string, exists bool) {
	v := m.env
	if v == nil {
		return
	}
	return *v, true
}

// OldEnv returns the old "env" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldEnv(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEnv is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEnv requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnv: %w", err)
	}
	return oldValue.Env, nil
}

// ResetEnv resets all changes to the "env" field.
func (m *DeploymentMutation) ResetEnv() {
	m.env = nil
}

// SetRef sets the "ref" field.
func (m *DeploymentMutation) SetRef(s string) {
	m.ref = &s
}

// Ref returns the value of the "ref" field in the mutation.
func (m *DeploymentMutation) Ref() (r string, exists bool) {
	v := m.ref
	if v == nil {
		return
	}
	return *v, true
}

// OldRef returns the old "ref" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldRef(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRef is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRef requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRef: %w", err)
	}
	return oldValue.Ref, nil
}

// ResetRef resets all changes to the "ref" field.
func (m *DeploymentMutation) ResetRef() {
	m.ref = nil
}

// SetStatus sets the "status" field.
func (m *DeploymentMutation) SetStatus(d deployment.Status) {
	m.status = &d
}

// Status returns the value of the "status" field in the mutation.
func (m *DeploymentMutation) Status() (r deployment.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldStatus(ctx context.Context) (v deployment.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *DeploymentMutation) ResetStatus() {
	m.status = nil
}

// SetUID sets the "uid" field.
func (m *DeploymentMutation) SetUID(i int64) {
	m.uid = &i
	m.adduid = nil
}

// UID returns the value of the "uid" field in the mutation.
func (m *DeploymentMutation) UID() (r int64, exists bool) {
	v := m.uid
	if v == nil {
		return
	}
	return *v, true
}

// OldUID returns the old "uid" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldUID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUID: %w", err)
	}
	return oldValue.UID, nil
}

// AddUID adds i to the "uid" field.
func (m *DeploymentMutation) AddUID(i int64) {
	if m.adduid != nil {
		*m.adduid += i
	} else {
		m.adduid = &i
	}
}

// AddedUID returns the value that was added to the "uid" field in this mutation.
func (m *DeploymentMutation) AddedUID() (r int64, exists bool) {
	v := m.adduid
	if v == nil {
		return
	}
	return *v, true
}

// ClearUID clears the value of the "uid" field.
func (m *DeploymentMutation) ClearUID() {
	m.uid = nil
	m.adduid = nil
	m.clearedFields[deployment.FieldUID] = struct{}{}
}

// UIDCleared returns if the "uid" field was cleared in this mutation.
func (m *DeploymentMutation) UIDCleared() bool {
	_, ok := m.clearedFields[deployment.FieldUID]
	return ok
}

// ResetUID resets all changes to the "uid" field.
func (m *DeploymentMutation) ResetUID() {
	m.uid = nil
	m.adduid = nil
	delete(m.clearedFields, deployment.FieldUID)
}

// SetSha sets the "sha" field.
func (m *DeploymentMutation) SetSha(s string) {
	m.sha = &s
}

// Sha returns the value of the "sha" field in the mutation.
func (m *DeploymentMutation) Sha() (r string, exists bool) {
	v := m.sha
	if v == nil {
		return
	}
	return *v, true
}

// OldSha returns the old "sha" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldSha(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSha is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSha requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSha: %w", err)
	}
	return oldValue.Sha, nil
}

// ClearSha clears the value of the "sha" field.
func (m *DeploymentMutation) ClearSha() {
	m.sha = nil
	m.clearedFields[deployment.FieldSha] = struct{}{}
}

// ShaCleared returns if the "sha" field was cleared in this mutation.
func (m *DeploymentMutation) ShaCleared() bool {
	_, ok := m.clearedFields[deployment.FieldSha]
	return ok
}

// ResetSha resets all changes to the "sha" field.
func (m *DeploymentMutation) ResetSha() {
	m.sha = nil
	delete(m.clearedFields, deployment.FieldSha)
}

// SetHTMLURL sets the "html_url" field.
func (m *DeploymentMutation) SetHTMLURL(s string) {
	m.html_url = &s
}

// HTMLURL returns the value of the "html_url" field in the mutation.
func (m *DeploymentMutation) HTMLURL() (r string, exists bool) {
	v := m.html_url
	if v == nil {
		return
	}
	return *v, true
}

// OldHTMLURL returns the old "html_url" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldHTMLURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHTMLURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHTMLURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHTMLURL: %w", err)
	}
	return oldValue.HTMLURL, nil
}

// ClearHTMLURL clears the value of the "html_url" field.
func (m *DeploymentMutation) ClearHTMLURL() {
	m.html_url = nil
	m.clearedFields[deployment.FieldHTMLURL] = struct{}{}
}

// HTMLURLCleared returns if the "html_url" field was cleared in this mutation.
func (m *DeploymentMutation) HTMLURLCleared() bool {
	_, ok := m.clearedFields[deployment.FieldHTMLURL]
	return ok
}

// ResetHTMLURL resets all changes to the "html_url" field.
func (m *DeploymentMutation) ResetHTMLURL() {
	m.html_url = nil
	delete(m.clearedFields, deployment.FieldHTMLURL)
}

// SetIsRollback sets the "is_rollback" field.
func (m *DeploymentMutation) SetIsRollback(b bool) {
	m.is_rollback = &b
}

// IsRollback returns the value of the "is_rollback" field in the mutation.
func (m *DeploymentMutation) IsRollback() (r bool, exists bool) {
	v := m.is_rollback
	if v == nil {
		return
	}
	return *v, true
}

// OldIsRollback returns the old "is_rollback" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldIsRollback(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsRollback is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsRollback requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsRollback: %w", err)
	}
	return oldValue.IsRollback, nil
}

// ResetIsRollback resets all changes to the "is_rollback" field.
func (m *DeploymentMutation) ResetIsRollback() {
	m.is_rollback = nil
}

// SetIsApprovalEnabled sets the "is_approval_enabled" field.
func (m *DeploymentMutation) SetIsApprovalEnabled(b bool) {
	m.is_approval_enabled = &b
}

// IsApprovalEnabled returns the value of the "is_approval_enabled" field in the mutation.
func (m *DeploymentMutation) IsApprovalEnabled() (r bool, exists bool) {
	v := m.is_approval_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsApprovalEnabled returns the old "is_approval_enabled" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldIsApprovalEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsApprovalEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsApprovalEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsApprovalEnabled: %w", err)
	}
	return oldValue.IsApprovalEnabled, nil
}

// ResetIsApprovalEnabled resets all changes to the "is_approval_enabled" field.
func (m *DeploymentMutation) ResetIsApprovalEnabled() {
	m.is_approval_enabled = nil
}

// SetRequiredApprovalCount sets the "required_approval_count" field.
func (m *DeploymentMutation) SetRequiredApprovalCount(i int) {
	m.required_approval_count = &i
	m.addrequired_approval_count = nil
}

// RequiredApprovalCount returns the value of the "required_approval_count" field in the mutation.
func (m *DeploymentMutation) RequiredApprovalCount() (r int, exists bool) {
	v := m.required_approval_count
	if v == nil {
		return
	}
	return *v, true
}

// OldRequiredApprovalCount returns the old "required_approval_count" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldRequiredApprovalCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRequiredApprovalCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRequiredApprovalCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequiredApprovalCount: %w", err)
	}
	return oldValue.RequiredApprovalCount, nil
}

// AddRequiredApprovalCount adds i to the "required_approval_count" field.
func (m *DeploymentMutation) AddRequiredApprovalCount(i int) {
	if m.addrequired_approval_count != nil {
		*m.addrequired_approval_count += i
	} else {
		m.addrequired_approval_count = &i
	}
}

// AddedRequiredApprovalCount returns the value that was added to the "required_approval_count" field in this mutation.
func (m *DeploymentMutation) AddedRequiredApprovalCount() (r int, exists bool) {
	v := m.addrequired_approval_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetRequiredApprovalCount resets all changes to the "required_approval_count" field.
func (m *DeploymentMutation) ResetRequiredApprovalCount() {
	m.required_approval_count = nil
	m.addrequired_approval_count = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *DeploymentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DeploymentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DeploymentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DeploymentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DeploymentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DeploymentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user_id" field.
func (m *DeploymentMutation) SetUserID(s string) {
	m.user = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *DeploymentMutation) UserID() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *DeploymentMutation) ResetUserID() {
	m.user = nil
}

// SetRepoID sets the "repo_id" field.
func (m *DeploymentMutation) SetRepoID(s string) {
	m.repo = &s
}

// RepoID returns the value of the "repo_id" field in the mutation.
func (m *DeploymentMutation) RepoID() (r string, exists bool) {
	v := m.repo
	if v == nil {
		return
	}
	return *v, true
}

// OldRepoID returns the old "repo_id" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldRepoID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRepoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRepoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepoID: %w", err)
	}
	return oldValue.RepoID, nil
}

// ResetRepoID resets all changes to the "repo_id" field.
func (m *DeploymentMutation) ResetRepoID() {
	m.repo = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *DeploymentMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *DeploymentMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *DeploymentMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *DeploymentMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearRepo clears the "repo" edge to the Repo entity.
func (m *DeploymentMutation) ClearRepo() {
	m.clearedrepo = true
}

// RepoCleared reports if the "repo" edge to the Repo entity was cleared.
func (m *DeploymentMutation) RepoCleared() bool {
	return m.clearedrepo
}

// RepoIDs returns the "repo" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RepoID instead. It exists only for internal usage by the builders.
func (m *DeploymentMutation) RepoIDs() (ids []string) {
	if id := m.repo; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRepo resets all changes to the "repo" edge.
func (m *DeploymentMutation) ResetRepo() {
	m.repo = nil
	m.clearedrepo = false
}

// AddApprovalIDs adds the "approvals" edge to the Approval entity by ids.
func (m *DeploymentMutation) AddApprovalIDs(ids ...int) {
	if m.approvals == nil {
		m.approvals = make(map[int]struct{})
	}
	for i := range ids {
		m.approvals[ids[i]] = struct{}{}
	}
}

// ClearApprovals clears the "approvals" edge to the Approval entity.
func (m *DeploymentMutation) ClearApprovals() {
	m.clearedapprovals = true
}

// ApprovalsCleared reports if the "approvals" edge to the Approval entity was cleared.
func (m *DeploymentMutation) ApprovalsCleared() bool {
	return m.clearedapprovals
}

// RemoveApprovalIDs removes the "approvals" edge to the Approval entity by IDs.
func (m *DeploymentMutation) RemoveApprovalIDs(ids ...int) {
	if m.removedapprovals == nil {
		m.removedapprovals = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.approvals, ids[i])
		m.removedapprovals[ids[i]] = struct{}{}
	}
}

// RemovedApprovals returns the removed IDs of the "approvals" edge to the Approval entity.
func (m *DeploymentMutation) RemovedApprovalsIDs() (ids []int) {
	for id := range m.removedapprovals {
		ids = append(ids, id)
	}
	return
}

// ApprovalsIDs returns the "approvals" edge IDs in the mutation.
func (m *DeploymentMutation) ApprovalsIDs() (ids []int) {
	for id := range m.approvals {
		ids = append(ids, id)
	}
	return
}

// ResetApprovals resets all changes to the "approvals" edge.
func (m *DeploymentMutation) ResetApprovals() {
	m.approvals = nil
	m.clearedapprovals = false
	m.removedapprovals = nil
}

// AddDeploymentStatusIDs adds the "deployment_statuses" edge to the DeploymentStatus entity by ids.
func (m *DeploymentMutation) AddDeploymentStatusIDs(ids ...int) {
	if m.deployment_statuses == nil {
		m.deployment_statuses = make(map[int]struct{})
	}
	for i := range ids {
		m.deployment_statuses[ids[i]] = struct{}{}
	}
}

// ClearDeploymentStatuses clears the "deployment_statuses" edge to the DeploymentStatus entity.
func (m *DeploymentMutation) ClearDeploymentStatuses() {
	m.cleareddeployment_statuses = true
}

// DeploymentStatusesCleared reports if the "deployment_statuses" edge to the DeploymentStatus entity was cleared.
func (m *DeploymentMutation) DeploymentStatusesCleared() bool {
	return m.cleareddeployment_statuses
}

// RemoveDeploymentStatusIDs removes the "deployment_statuses" edge to the DeploymentStatus entity by IDs.
func (m *DeploymentMutation) RemoveDeploymentStatusIDs(ids ...int) {
	if m.removeddeployment_statuses == nil {
		m.removeddeployment_statuses = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.deployment_statuses, ids[i])
		m.removeddeployment_statuses[ids[i]] = struct{}{}
	}
}

// RemovedDeploymentStatuses returns the removed IDs of the "deployment_statuses" edge to the DeploymentStatus entity.
func (m *DeploymentMutation) RemovedDeploymentStatusesIDs() (ids []int) {
	for id := range m.removeddeployment_statuses {
		ids = append(ids, id)
	}
	return
}

// DeploymentStatusesIDs returns the "deployment_statuses" edge IDs in the mutation.
func (m *DeploymentMutation) DeploymentStatusesIDs() (ids []int) {
	for id := range m.deployment_statuses {
		ids = append(ids, id)
	}
	return
}

// ResetDeploymentStatuses resets all changes to the "deployment_statuses" edge.
func (m *DeploymentMutation) ResetDeploymentStatuses() {
	m.deployment_statuses = nil
	m.cleareddeployment_statuses = false
	m.removeddeployment_statuses = nil
}

// AddEventIDs adds the "event" edge to the Event entity by ids.
func (m *DeploymentMutation) AddEventIDs(ids ...int) {
	if m.event == nil {
		m.event = make(map[int]struct{})
	}
	for i := range ids {
		m.event[ids[i]] = struct{}{}
	}
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *DeploymentMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *DeploymentMutation) EventCleared() bool {
	return m.clearedevent
}

// RemoveEventIDs removes the "event" edge to the Event entity by IDs.
func (m *DeploymentMutation) RemoveEventIDs(ids ...int) {
	if m.removedevent == nil {
		m.removedevent = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.event, ids[i])
		m.removedevent[ids[i]] = struct{}{}
	}
}

// RemovedEvent returns the removed IDs of the "event" edge to the Event entity.
func (m *DeploymentMutation) RemovedEventIDs() (ids []int) {
	for id := range m.removedevent {
		ids = append(ids, id)
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
func (m *DeploymentMutation) EventIDs() (ids []int) {
	for id := range m.event {
		ids = append(ids, id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *DeploymentMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
	m.removedevent = nil
}

// Where appends a list predicates to the DeploymentMutation builder.
func (m *DeploymentMutation) Where(ps ...predicate.Deployment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DeploymentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Deployment).
func (m *DeploymentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeploymentMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.number != nil {
		fields = append(fields, deployment.FieldNumber)
	}
	if m._type != nil {
		fields = append(fields, deployment.FieldType)
	}
	if m.env != nil {
		fields = append(fields, deployment.FieldEnv)
	}
	if m.ref != nil {
		fields = append(fields, deployment.FieldRef)
	}
	if m.status != nil {
		fields = append(fields, deployment.FieldStatus)
	}
	if m.uid != nil {
		fields = append(fields, deployment.FieldUID)
	}
	if m.sha != nil {
		fields = append(fields, deployment.FieldSha)
	}
	if m.html_url != nil {
		fields = append(fields, deployment.FieldHTMLURL)
	}
	if m.is_rollback != nil {
		fields = append(fields, deployment.FieldIsRollback)
	}
	if m.is_approval_enabled != nil {
		fields = append(fields, deployment.FieldIsApprovalEnabled)
	}
	if m.required_approval_count != nil {
		fields = append(fields, deployment.FieldRequiredApprovalCount)
	}
	if m.created_at != nil {
		fields = append(fields, deployment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, deployment.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, deployment.FieldUserID)
	}
	if m.repo != nil {
		fields = append(fields, deployment.FieldRepoID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeploymentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case deployment.FieldNumber:
		return m.Number()
	case deployment.FieldType:
		return m.GetType()
	case deployment.FieldEnv:
		return m.Env()
	case deployment.FieldRef:
		return m.Ref()
	case deployment.FieldStatus:
		return m.Status()
	case deployment.FieldUID:
		return m.UID()
	case deployment.FieldSha:
		return m.Sha()
	case deployment.FieldHTMLURL:
		return m.HTMLURL()
	case deployment.FieldIsRollback:
		return m.IsRollback()
	case deployment.FieldIsApprovalEnabled:
		return m.IsApprovalEnabled()
	case deployment.FieldRequiredApprovalCount:
		return m.RequiredApprovalCount()
	case deployment.FieldCreatedAt:
		return m.CreatedAt()
	case deployment.FieldUpdatedAt:
		return m.UpdatedAt()
	case deployment.FieldUserID:
		return m.UserID()
	case deployment.FieldRepoID:
		return m.RepoID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeploymentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case deployment.FieldNumber:
		return m.OldNumber(ctx)
	case deployment.FieldType:
		return m.OldType(ctx)
	case deployment.FieldEnv:
		return m.OldEnv(ctx)
	case deployment.FieldRef:
		return m.OldRef(ctx)
	case deployment.FieldStatus:
		return m.OldStatus(ctx)
	case deployment.FieldUID:
		return m.OldUID(ctx)
	case deployment.FieldSha:
		return m.OldSha(ctx)
	case deployment.FieldHTMLURL:
		return m.OldHTMLURL(ctx)
	case deployment.FieldIsRollback:
		return m.OldIsRollback(ctx)
	case deployment.FieldIsApprovalEnabled:
		return m.OldIsApprovalEnabled(ctx)
	case deployment.FieldRequiredApprovalCount:
		return m.OldRequiredApprovalCount(ctx)
	case deployment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case deployment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case deployment.FieldUserID:
		return m.OldUserID(ctx)
	case deployment.FieldRepoID:
		return m.OldRepoID(ctx)
	}
	return nil, fmt.Errorf("unknown Deployment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeploymentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case deployment.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	case deployment.FieldType:
		v, ok := value.(deployment.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case deployment.FieldEnv:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnv(v)
		return nil
	case deployment.FieldRef:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRef(v)
		return nil
	case deployment.FieldStatus:
		v, ok := value.(deployment.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case deployment.FieldUID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUID(v)
		return nil
	case deployment.FieldSha:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSha(v)
		return nil
	case deployment.FieldHTMLURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHTMLURL(v)
		return nil
	case deployment.FieldIsRollback:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsRollback(v)
		return nil
	case deployment.FieldIsApprovalEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsApprovalEnabled(v)
		return nil
	case deployment.FieldRequiredApprovalCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequiredApprovalCount(v)
		return nil
	case deployment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case deployment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case deployment.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case deployment.FieldRepoID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepoID(v)
		return nil
	}
	return fmt.Errorf("unknown Deployment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeploymentMutation) AddedFields() []string {
	var fields []string
	if m.addnumber != nil {
		fields = append(fields, deployment.FieldNumber)
	}
	if m.adduid != nil {
		fields = append(fields, deployment.FieldUID)
	}
	if m.addrequired_approval_count != nil {
		fields = append(fields, deployment.FieldRequiredApprovalCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeploymentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case deployment.FieldNumber:
		return m.AddedNumber()
	case deployment.FieldUID:
		return m.AddedUID()
	case deployment.FieldRequiredApprovalCount:
		return m.AddedRequiredApprovalCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeploymentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case deployment.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	case deployment.FieldUID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUID(v)
		return nil
	case deployment.FieldRequiredApprovalCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRequiredApprovalCount(v)
		return nil
	}
	return fmt.Errorf("unknown Deployment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeploymentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(deployment.FieldUID) {
		fields = append(fields, deployment.FieldUID)
	}
	if m.FieldCleared(deployment.FieldSha) {
		fields = append(fields, deployment.FieldSha)
	}
	if m.FieldCleared(deployment.FieldHTMLURL) {
		fields = append(fields, deployment.FieldHTMLURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeploymentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeploymentMutation) ClearField(name string) error {
	switch name {
	case deployment.FieldUID:
		m.ClearUID()
		return nil
	case deployment.FieldSha:
		m.ClearSha()
		return nil
	case deployment.FieldHTMLURL:
		m.ClearHTMLURL()
		return nil
	}
	return fmt.Errorf("unknown Deployment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeploymentMutation) ResetField(name string) error {
	switch name {
	case deployment.FieldNumber:
		m.ResetNumber()
		return nil
	case deployment.FieldType:
		m.ResetType()
		return nil
	case deployment.FieldEnv:
		m.ResetEnv()
		return nil
	case deployment.FieldRef:
		m.ResetRef()
		return nil
	case deployment.FieldStatus:
		m.ResetStatus()
		return nil
	case deployment.FieldUID:
		m.ResetUID()
		return nil
	case deployment.FieldSha:
		m.ResetSha()
		return nil
	case deployment.FieldHTMLURL:
		m.ResetHTMLURL()
		return nil
	case deployment.FieldIsRollback:
		m.ResetIsRollback()
		return nil
	case deployment.FieldIsApprovalEnabled:
		m.ResetIsApprovalEnabled()
		return nil
	case deployment.FieldRequiredApprovalCount:
		m.ResetRequiredApprovalCount()
		return nil
	case deployment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case deployment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case deployment.FieldUserID:
		m.ResetUserID()
		return nil
	case deployment.FieldRepoID:
		m.ResetRepoID()
		return nil
	}
	return fmt.Errorf("unknown Deployment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeploymentMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.user != nil {
		edges = append(edges, deployment.EdgeUser)
	}
	if m.repo != nil {
		edges = append(edges, deployment.EdgeRepo)
	}
	if m.approvals != nil {
		edges = append(edges, deployment.EdgeApprovals)
	}
	if m.deployment_statuses != nil {
		edges = append(edges, deployment.EdgeDeploymentStatuses)
	}
	if m.event != nil {
		edges = append(edges, deployment.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeploymentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case deployment.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case deployment.EdgeRepo:
		if id := m.repo; id != nil {
			return []ent.Value{*id}
		}
	case deployment.EdgeApprovals:
		ids := make([]ent.Value, 0, len(m.approvals))
		for id := range m.approvals {
			ids = append(ids, id)
		}
		return ids
	case deployment.EdgeDeploymentStatuses:
		ids := make([]ent.Value, 0, len(m.deployment_statuses))
		for id := range m.deployment_statuses {
			ids = append(ids, id)
		}
		return ids
	case deployment.EdgeEvent:
		ids := make([]ent.Value, 0, len(m.event))
		for id := range m.event {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeploymentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedapprovals != nil {
		edges = append(edges, deployment.EdgeApprovals)
	}
	if m.removeddeployment_statuses != nil {
		edges = append(edges, deployment.EdgeDeploymentStatuses)
	}
	if m.removedevent != nil {
		edges = append(edges, deployment.EdgeEvent)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeploymentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case deployment.EdgeApprovals:
		ids := make([]ent.Value, 0, len(m.removedapprovals))
		for id := range m.removedapprovals {
			ids = append(ids, id)
		}
		return ids
	case deployment.EdgeDeploymentStatuses:
		ids := make([]ent.Value, 0, len(m.removeddeployment_statuses))
		for id := range m.removeddeployment_statuses {
			ids = append(ids, id)
		}
		return ids
	case deployment.EdgeEvent:
		ids := make([]ent.Value, 0, len(m.removedevent))
		for id := range m.removedevent {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeploymentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.cleareduser {
		edges = append(edges, deployment.EdgeUser)
	}
	if m.clearedrepo {
		edges = append(edges, deployment.EdgeRepo)
	}
	if m.clearedapprovals {
		edges = append(edges, deployment.EdgeApprovals)
	}
	if m.cleareddeployment_statuses {
		edges = append(edges, deployment.EdgeDeploymentStatuses)
	}
	if m.clearedevent {
		edges = append(edges, deployment.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeploymentMutation) EdgeCleared(name string) bool {
	switch name {
	case deployment.EdgeUser:
		return m.cleareduser
	case deployment.EdgeRepo:
		return m.clearedrepo
	case deployment.EdgeApprovals:
		return m.clearedapprovals
	case deployment.EdgeDeploymentStatuses:
		return m.cleareddeployment_statuses
	case deployment.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeploymentMutation) ClearEdge(name string) error {
	switch name {
	case deployment.EdgeUser:
		m.ClearUser()
		return nil
	case deployment.EdgeRepo:
		m.ClearRepo()
		return nil
	}
	return fmt.Errorf("unknown Deployment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeploymentMutation) ResetEdge(name string) error {
	switch name {
	case deployment.EdgeUser:
		m.ResetUser()
		return nil
	case deployment.EdgeRepo:
		m.ResetRepo()
		return nil
	case deployment.EdgeApprovals:
		m.ResetApprovals()
		return nil
	case deployment.EdgeDeploymentStatuses:
		m.ResetDeploymentStatuses()
		return nil
	case deployment.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown Deployment edge %s", name)
}

// DeploymentStatusMutation represents an operation that mutates the DeploymentStatus nodes in the graph.
type DeploymentStatusMutation struct {
	config
	op                Op
	typ               string
	id                *int
	status            *string
	description       *string
	log_url           *string
	created_at        *time.Time
	updated_at        *time.Time
	clearedFields     map[string]struct{}
	deployment        *int
	cleareddeployment bool
	done              bool
	oldValue          func(context.Context) (*DeploymentStatus, error)
	predicates        []predicate.DeploymentStatus
}

var _ ent.Mutation = (*DeploymentStatusMutation)(nil)

// deploymentstatusOption allows management of the mutation configuration using functional options.
type deploymentstatusOption func(*DeploymentStatusMutation)

// newDeploymentStatusMutation creates new mutation for the DeploymentStatus entity.
func newDeploymentStatusMutation(c config, op Op, opts ...deploymentstatusOption) *DeploymentStatusMutation {
	m := &DeploymentStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeDeploymentStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeploymentStatusID sets the ID field of the mutation.
func withDeploymentStatusID(id int) deploymentstatusOption {
	return func(m *DeploymentStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *DeploymentStatus
		)
		m.oldValue = func(ctx context.Context) (*DeploymentStatus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DeploymentStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDeploymentStatus sets the old DeploymentStatus of the mutation.
func withDeploymentStatus(node *DeploymentStatus) deploymentstatusOption {
	return func(m *DeploymentStatusMutation) {
		m.oldValue = func(context.Context) (*DeploymentStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeploymentStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeploymentStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeploymentStatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetStatus sets the "status" field.
func (m *DeploymentStatusMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *DeploymentStatusMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the DeploymentStatus entity.
// If the DeploymentStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentStatusMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *DeploymentStatusMutation) ResetStatus() {
	m.status = nil
}

// SetDescription sets the "description" field.
func (m *DeploymentStatusMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *DeploymentStatusMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the DeploymentStatus entity.
// If the DeploymentStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentStatusMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *DeploymentStatusMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[deploymentstatus.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *DeploymentStatusMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[deploymentstatus.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *DeploymentStatusMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, deploymentstatus.FieldDescription)
}

// SetLogURL sets the "log_url" field.
func (m *DeploymentStatusMutation) SetLogURL(s string) {
	m.log_url = &s
}

// LogURL returns the value of the "log_url" field in the mutation.
func (m *DeploymentStatusMutation) LogURL() (r string, exists bool) {
	v := m.log_url
	if v == nil {
		return
	}
	return *v, true
}

// OldLogURL returns the old "log_url" field's value of the DeploymentStatus entity.
// If the DeploymentStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentStatusMutation) OldLogURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLogURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLogURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogURL: %w", err)
	}
	return oldValue.LogURL, nil
}

// ClearLogURL clears the value of the "log_url" field.
func (m *DeploymentStatusMutation) ClearLogURL() {
	m.log_url = nil
	m.clearedFields[deploymentstatus.FieldLogURL] = struct{}{}
}

// LogURLCleared returns if the "log_url" field was cleared in this mutation.
func (m *DeploymentStatusMutation) LogURLCleared() bool {
	_, ok := m.clearedFields[deploymentstatus.FieldLogURL]
	return ok
}

// ResetLogURL resets all changes to the "log_url" field.
func (m *DeploymentStatusMutation) ResetLogURL() {
	m.log_url = nil
	delete(m.clearedFields, deploymentstatus.FieldLogURL)
}

// SetCreatedAt sets the "created_at" field.
func (m *DeploymentStatusMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DeploymentStatusMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DeploymentStatus entity.
// If the DeploymentStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentStatusMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DeploymentStatusMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DeploymentStatusMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DeploymentStatusMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DeploymentStatus entity.
// If the DeploymentStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentStatusMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DeploymentStatusMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeploymentID sets the "deployment_id" field.
func (m *DeploymentStatusMutation) SetDeploymentID(i int) {
	m.deployment = &i
}

// DeploymentID returns the value of the "deployment_id" field in the mutation.
func (m *DeploymentStatusMutation) DeploymentID() (r int, exists bool) {
	v := m.deployment
	if v == nil {
		return
	}
	return *v, true
}

// OldDeploymentID returns the old "deployment_id" field's value of the DeploymentStatus entity.
// If the DeploymentStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentStatusMutation) OldDeploymentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeploymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeploymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeploymentID: %w", err)
	}
	return oldValue.DeploymentID, nil
}

// ResetDeploymentID resets all changes to the "deployment_id" field.
func (m *DeploymentStatusMutation) ResetDeploymentID() {
	m.deployment = nil
}

// ClearDeployment clears the "deployment" edge to the Deployment entity.
func (m *DeploymentStatusMutation) ClearDeployment() {
	m.cleareddeployment = true
}

// DeploymentCleared reports if the "deployment" edge to the Deployment entity was cleared.
func (m *DeploymentStatusMutation) DeploymentCleared() bool {
	return m.cleareddeployment
}

// DeploymentIDs returns the "deployment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DeploymentID instead. It exists only for internal usage by the builders.
func (m *DeploymentStatusMutation) DeploymentIDs() (ids []int) {
	if id := m.deployment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDeployment resets all changes to the "deployment" edge.
func (m *DeploymentStatusMutation) ResetDeployment() {
	m.deployment = nil
	m.cleareddeployment = false
}

// Where appends a list predicates to the DeploymentStatusMutation builder.
func (m *DeploymentStatusMutation) Where(ps ...predicate.DeploymentStatus) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DeploymentStatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DeploymentStatus).
func (m *DeploymentStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeploymentStatusMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.status != nil {
		fields = append(fields, deploymentstatus.FieldStatus)
	}
	if m.description != nil {
		fields = append(fields, deploymentstatus.FieldDescription)
	}
	if m.log_url != nil {
		fields = append(fields, deploymentstatus.FieldLogURL)
	}
	if m.created_at != nil {
		fields = append(fields, deploymentstatus.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, deploymentstatus.FieldUpdatedAt)
	}
	if m.deployment != nil {
		fields = append(fields, deploymentstatus.FieldDeploymentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeploymentStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case deploymentstatus.FieldStatus:
		return m.Status()
	case deploymentstatus.FieldDescription:
		return m.Description()
	case deploymentstatus.FieldLogURL:
		return m.LogURL()
	case deploymentstatus.FieldCreatedAt:
		return m.CreatedAt()
	case deploymentstatus.FieldUpdatedAt:
		return m.UpdatedAt()
	case deploymentstatus.FieldDeploymentID:
		return m.DeploymentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeploymentStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case deploymentstatus.FieldStatus:
		return m.OldStatus(ctx)
	case deploymentstatus.FieldDescription:
		return m.OldDescription(ctx)
	case deploymentstatus.FieldLogURL:
		return m.OldLogURL(ctx)
	case deploymentstatus.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case deploymentstatus.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case deploymentstatus.FieldDeploymentID:
		return m.OldDeploymentID(ctx)
	}
	return nil, fmt.Errorf("unknown DeploymentStatus field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeploymentStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case deploymentstatus.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case deploymentstatus.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case deploymentstatus.FieldLogURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogURL(v)
		return nil
	case deploymentstatus.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case deploymentstatus.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case deploymentstatus.FieldDeploymentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeploymentID(v)
		return nil
	}
	return fmt.Errorf("unknown DeploymentStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeploymentStatusMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeploymentStatusMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeploymentStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DeploymentStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeploymentStatusMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(deploymentstatus.FieldDescription) {
		fields = append(fields, deploymentstatus.FieldDescription)
	}
	if m.FieldCleared(deploymentstatus.FieldLogURL) {
		fields = append(fields, deploymentstatus.FieldLogURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeploymentStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeploymentStatusMutation) ClearField(name string) error {
	switch name {
	case deploymentstatus.FieldDescription:
		m.ClearDescription()
		return nil
	case deploymentstatus.FieldLogURL:
		m.ClearLogURL()
		return nil
	}
	return fmt.Errorf("unknown DeploymentStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeploymentStatusMutation) ResetField(name string) error {
	switch name {
	case deploymentstatus.FieldStatus:
		m.ResetStatus()
		return nil
	case deploymentstatus.FieldDescription:
		m.ResetDescription()
		return nil
	case deploymentstatus.FieldLogURL:
		m.ResetLogURL()
		return nil
	case deploymentstatus.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case deploymentstatus.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case deploymentstatus.FieldDeploymentID:
		m.ResetDeploymentID()
		return nil
	}
	return fmt.Errorf("unknown DeploymentStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeploymentStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.deployment != nil {
		edges = append(edges, deploymentstatus.EdgeDeployment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeploymentStatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case deploymentstatus.EdgeDeployment:
		if id := m.deployment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeploymentStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeploymentStatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeploymentStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddeployment {
		edges = append(edges, deploymentstatus.EdgeDeployment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeploymentStatusMutation) EdgeCleared(name string) bool {
	switch name {
	case deploymentstatus.EdgeDeployment:
		return m.cleareddeployment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeploymentStatusMutation) ClearEdge(name string) error {
	switch name {
	case deploymentstatus.EdgeDeployment:
		m.ClearDeployment()
		return nil
	}
	return fmt.Errorf("unknown DeploymentStatus unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeploymentStatusMutation) ResetEdge(name string) error {
	switch name {
	case deploymentstatus.EdgeDeployment:
		m.ResetDeployment()
		return nil
	}
	return fmt.Errorf("unknown DeploymentStatus edge %s", name)
}

// EventMutation represents an operation that mutates the Event nodes in the graph.
type EventMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	kind                       *event.Kind
	_type                      *event.Type
	created_at                 *time.Time
	clearedFields              map[string]struct{}
	deployment                 *int
	cleareddeployment          bool
	approval                   *int
	clearedapproval            bool
	notification_record        *int
	clearednotification_record bool
	done                       bool
	oldValue                   func(context.Context) (*Event, error)
	predicates                 []predicate.Event
}

var _ ent.Mutation = (*EventMutation)(nil)

// eventOption allows management of the mutation configuration using functional options.
type eventOption func(*EventMutation)

// newEventMutation creates new mutation for the Event entity.
func newEventMutation(c config, op Op, opts ...eventOption) *EventMutation {
	m := &EventMutation{
		config:        c,
		op:            op,
		typ:           TypeEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventID sets the ID field of the mutation.
func withEventID(id int) eventOption {
	return func(m *EventMutation) {
		var (
			err   error
			once  sync.Once
			value *Event
		)
		m.oldValue = func(ctx context.Context) (*Event, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Event.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvent sets the old Event of the mutation.
func withEvent(node *Event) eventOption {
	return func(m *EventMutation) {
		m.oldValue = func(context.Context) (*Event, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetKind sets the "kind" field.
func (m *EventMutation) SetKind(e event.Kind) {
	m.kind = &e
}

// Kind returns the value of the "kind" field in the mutation.
func (m *EventMutation) Kind() (r event.Kind, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldKind(ctx context.Context) (v event.Kind, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ResetKind resets all changes to the "kind" field.
func (m *EventMutation) ResetKind() {
	m.kind = nil
}

// SetType sets the "type" field.
func (m *EventMutation) SetType(e event.Type) {
	m._type = &e
}

// GetType returns the value of the "type" field in the mutation.
func (m *EventMutation) GetType() (r event.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldType(ctx context.Context) (v event.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *EventMutation) ResetType() {
	m._type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *EventMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EventMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EventMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetDeploymentID sets the "deployment_id" field.
func (m *EventMutation) SetDeploymentID(i int) {
	m.deployment = &i
}

// DeploymentID returns the value of the "deployment_id" field in the mutation.
func (m *EventMutation) DeploymentID() (r int, exists bool) {
	v := m.deployment
	if v == nil {
		return
	}
	return *v, true
}

// OldDeploymentID returns the old "deployment_id" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldDeploymentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeploymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeploymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeploymentID: %w", err)
	}
	return oldValue.DeploymentID, nil
}

// ClearDeploymentID clears the value of the "deployment_id" field.
func (m *EventMutation) ClearDeploymentID() {
	m.deployment = nil
	m.clearedFields[event.FieldDeploymentID] = struct{}{}
}

// DeploymentIDCleared returns if the "deployment_id" field was cleared in this mutation.
func (m *EventMutation) DeploymentIDCleared() bool {
	_, ok := m.clearedFields[event.FieldDeploymentID]
	return ok
}

// ResetDeploymentID resets all changes to the "deployment_id" field.
func (m *EventMutation) ResetDeploymentID() {
	m.deployment = nil
	delete(m.clearedFields, event.FieldDeploymentID)
}

// SetApprovalID sets the "approval_id" field.
func (m *EventMutation) SetApprovalID(i int) {
	m.approval = &i
}

// ApprovalID returns the value of the "approval_id" field in the mutation.
func (m *EventMutation) ApprovalID() (r int, exists bool) {
	v := m.approval
	if v == nil {
		return
	}
	return *v, true
}

// OldApprovalID returns the old "approval_id" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldApprovalID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldApprovalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldApprovalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApprovalID: %w", err)
	}
	return oldValue.ApprovalID, nil
}

// ClearApprovalID clears the value of the "approval_id" field.
func (m *EventMutation) ClearApprovalID() {
	m.approval = nil
	m.clearedFields[event.FieldApprovalID] = struct{}{}
}

// ApprovalIDCleared returns if the "approval_id" field was cleared in this mutation.
func (m *EventMutation) ApprovalIDCleared() bool {
	_, ok := m.clearedFields[event.FieldApprovalID]
	return ok
}

// ResetApprovalID resets all changes to the "approval_id" field.
func (m *EventMutation) ResetApprovalID() {
	m.approval = nil
	delete(m.clearedFields, event.FieldApprovalID)
}

// ClearDeployment clears the "deployment" edge to the Deployment entity.
func (m *EventMutation) ClearDeployment() {
	m.cleareddeployment = true
}

// DeploymentCleared reports if the "deployment" edge to the Deployment entity was cleared.
func (m *EventMutation) DeploymentCleared() bool {
	return m.DeploymentIDCleared() || m.cleareddeployment
}

// DeploymentIDs returns the "deployment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DeploymentID instead. It exists only for internal usage by the builders.
func (m *EventMutation) DeploymentIDs() (ids []int) {
	if id := m.deployment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDeployment resets all changes to the "deployment" edge.
func (m *EventMutation) ResetDeployment() {
	m.deployment = nil
	m.cleareddeployment = false
}

// ClearApproval clears the "approval" edge to the Approval entity.
func (m *EventMutation) ClearApproval() {
	m.clearedapproval = true
}

// ApprovalCleared reports if the "approval" edge to the Approval entity was cleared.
func (m *EventMutation) ApprovalCleared() bool {
	return m.ApprovalIDCleared() || m.clearedapproval
}

// ApprovalIDs returns the "approval" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ApprovalID instead. It exists only for internal usage by the builders.
func (m *EventMutation) ApprovalIDs() (ids []int) {
	if id := m.approval; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetApproval resets all changes to the "approval" edge.
func (m *EventMutation) ResetApproval() {
	m.approval = nil
	m.clearedapproval = false
}

// SetNotificationRecordID sets the "notification_record" edge to the NotificationRecord entity by id.
func (m *EventMutation) SetNotificationRecordID(id int) {
	m.notification_record = &id
}

// ClearNotificationRecord clears the "notification_record" edge to the NotificationRecord entity.
func (m *EventMutation) ClearNotificationRecord() {
	m.clearednotification_record = true
}

// NotificationRecordCleared reports if the "notification_record" edge to the NotificationRecord entity was cleared.
func (m *EventMutation) NotificationRecordCleared() bool {
	return m.clearednotification_record
}

// NotificationRecordID returns the "notification_record" edge ID in the mutation.
func (m *EventMutation) NotificationRecordID() (id int, exists bool) {
	if m.notification_record != nil {
		return *m.notification_record, true
	}
	return
}

// NotificationRecordIDs returns the "notification_record" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NotificationRecordID instead. It exists only for internal usage by the builders.
func (m *EventMutation) NotificationRecordIDs() (ids []int) {
	if id := m.notification_record; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNotificationRecord resets all changes to the "notification_record" edge.
func (m *EventMutation) ResetNotificationRecord() {
	m.notification_record = nil
	m.clearednotification_record = false
}

// Where appends a list predicates to the EventMutation builder.
func (m *EventMutation) Where(ps ...predicate.Event) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EventMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Event).
func (m *EventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.kind != nil {
		fields = append(fields, event.FieldKind)
	}
	if m._type != nil {
		fields = append(fields, event.FieldType)
	}
	if m.created_at != nil {
		fields = append(fields, event.FieldCreatedAt)
	}
	if m.deployment != nil {
		fields = append(fields, event.FieldDeploymentID)
	}
	if m.approval != nil {
		fields = append(fields, event.FieldApprovalID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case event.FieldKind:
		return m.Kind()
	case event.FieldType:
		return m.GetType()
	case event.FieldCreatedAt:
		return m.CreatedAt()
	case event.FieldDeploymentID:
		return m.DeploymentID()
	case event.FieldApprovalID:
		return m.ApprovalID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case event.FieldKind:
		return m.OldKind(ctx)
	case event.FieldType:
		return m.OldType(ctx)
	case event.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case event.FieldDeploymentID:
		return m.OldDeploymentID(ctx)
	case event.FieldApprovalID:
		return m.OldApprovalID(ctx)
	}
	return nil, fmt.Errorf("unknown Event field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case event.FieldKind:
		v, ok := value.(event.Kind)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case event.FieldType:
		v, ok := value.(event.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case event.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case event.FieldDeploymentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeploymentID(v)
		return nil
	case event.FieldApprovalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApprovalID(v)
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Event numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(event.FieldDeploymentID) {
		fields = append(fields, event.FieldDeploymentID)
	}
	if m.FieldCleared(event.FieldApprovalID) {
		fields = append(fields, event.FieldApprovalID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventMutation) ClearField(name string) error {
	switch name {
	case event.FieldDeploymentID:
		m.ClearDeploymentID()
		return nil
	case event.FieldApprovalID:
		m.ClearApprovalID()
		return nil
	}
	return fmt.Errorf("unknown Event nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventMutation) ResetField(name string) error {
	switch name {
	case event.FieldKind:
		m.ResetKind()
		return nil
	case event.FieldType:
		m.ResetType()
		return nil
	case event.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case event.FieldDeploymentID:
		m.ResetDeploymentID()
		return nil
	case event.FieldApprovalID:
		m.ResetApprovalID()
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.deployment != nil {
		edges = append(edges, event.EdgeDeployment)
	}
	if m.approval != nil {
		edges = append(edges, event.EdgeApproval)
	}
	if m.notification_record != nil {
		edges = append(edges, event.EdgeNotificationRecord)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeDeployment:
		if id := m.deployment; id != nil {
			return []ent.Value{*id}
		}
	case event.EdgeApproval:
		if id := m.approval; id != nil {
			return []ent.Value{*id}
		}
	case event.EdgeNotificationRecord:
		if id := m.notification_record; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareddeployment {
		edges = append(edges, event.EdgeDeployment)
	}
	if m.clearedapproval {
		edges = append(edges, event.EdgeApproval)
	}
	if m.clearednotification_record {
		edges = append(edges, event.EdgeNotificationRecord)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventMutation) EdgeCleared(name string) bool {
	switch name {
	case event.EdgeDeployment:
		return m.cleareddeployment
	case event.EdgeApproval:
		return m.clearedapproval
	case event.EdgeNotificationRecord:
		return m.clearednotification_record
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventMutation) ClearEdge(name string) error {
	switch name {
	case event.EdgeDeployment:
		m.ClearDeployment()
		return nil
	case event.EdgeApproval:
		m.ClearApproval()
		return nil
	case event.EdgeNotificationRecord:
		m.ClearNotificationRecord()
		return nil
	}
	return fmt.Errorf("unknown Event unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventMutation) ResetEdge(name string) error {
	switch name {
	case event.EdgeDeployment:
		m.ResetDeployment()
		return nil
	case event.EdgeApproval:
		m.ResetApproval()
		return nil
	case event.EdgeNotificationRecord:
		m.ResetNotificationRecord()
		return nil
	}
	return fmt.Errorf("unknown Event edge %s", name)
}

// NotificationRecordMutation represents an operation that mutates the NotificationRecord nodes in the graph.
type NotificationRecordMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	event         *int
	clearedevent  bool
	done          bool
	oldValue      func(context.Context) (*NotificationRecord, error)
	predicates    []predicate.NotificationRecord
}

var _ ent.Mutation = (*NotificationRecordMutation)(nil)

// notificationrecordOption allows management of the mutation configuration using functional options.
type notificationrecordOption func(*NotificationRecordMutation)

// newNotificationRecordMutation creates new mutation for the NotificationRecord entity.
func newNotificationRecordMutation(c config, op Op, opts ...notificationrecordOption) *NotificationRecordMutation {
	m := &NotificationRecordMutation{
		config:        c,
		op:            op,
		typ:           TypeNotificationRecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotificationRecordID sets the ID field of the mutation.
func withNotificationRecordID(id int) notificationrecordOption {
	return func(m *NotificationRecordMutation) {
		var (
			err   error
			once  sync.Once
			value *NotificationRecord
		)
		m.oldValue = func(ctx context.Context) (*NotificationRecord, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NotificationRecord.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotificationRecord sets the old NotificationRecord of the mutation.
func withNotificationRecord(node *NotificationRecord) notificationrecordOption {
	return func(m *NotificationRecordMutation) {
		m.oldValue = func(context.Context) (*NotificationRecord, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotificationRecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotificationRecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotificationRecordMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEventID sets the "event_id" field.
func (m *NotificationRecordMutation) SetEventID(i int) {
	m.event = &i
}

// EventID returns the value of the "event_id" field in the mutation.
func (m *NotificationRecordMutation) EventID() (r int, exists bool) {
	v := m.event
	if v == nil {
		return
	}
	return *v, true
}

// OldEventID returns the old "event_id" field's value of the NotificationRecord entity.
// If the NotificationRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationRecordMutation) OldEventID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEventID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEventID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventID: %w", err)
	}
	return oldValue.EventID, nil
}

// ResetEventID resets all changes to the "event_id" field.
func (m *NotificationRecordMutation) ResetEventID() {
	m.event = nil
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *NotificationRecordMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *NotificationRecordMutation) EventCleared() bool {
	return m.clearedevent
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *NotificationRecordMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *NotificationRecordMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the NotificationRecordMutation builder.
func (m *NotificationRecordMutation) Where(ps ...predicate.NotificationRecord) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NotificationRecordMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (NotificationRecord).
func (m *NotificationRecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotificationRecordMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.event != nil {
		fields = append(fields, notificationrecord.FieldEventID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotificationRecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notificationrecord.FieldEventID:
		return m.EventID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotificationRecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notificationrecord.FieldEventID:
		return m.OldEventID(ctx)
	}
	return nil, fmt.Errorf("unknown NotificationRecord field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationRecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notificationrecord.FieldEventID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventID(v)
		return nil
	}
	return fmt.Errorf("unknown NotificationRecord field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotificationRecordMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotificationRecordMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationRecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown NotificationRecord numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotificationRecordMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotificationRecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotificationRecordMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NotificationRecord nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotificationRecordMutation) ResetField(name string) error {
	switch name {
	case notificationrecord.FieldEventID:
		m.ResetEventID()
		return nil
	}
	return fmt.Errorf("unknown NotificationRecord field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotificationRecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event != nil {
		edges = append(edges, notificationrecord.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotificationRecordMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case notificationrecord.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotificationRecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotificationRecordMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotificationRecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent {
		edges = append(edges, notificationrecord.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotificationRecordMutation) EdgeCleared(name string) bool {
	switch name {
	case notificationrecord.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotificationRecordMutation) ClearEdge(name string) error {
	switch name {
	case notificationrecord.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown NotificationRecord unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotificationRecordMutation) ResetEdge(name string) error {
	switch name {
	case notificationrecord.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown NotificationRecord edge %s", name)
}

// PermMutation represents an operation that mutates the Perm nodes in the graph.
type PermMutation struct {
	config
	op            Op
	typ           string
	id            *int
	repo_perm     *perm.RepoPerm
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	repo          *string
	clearedrepo   bool
	done          bool
	oldValue      func(context.Context) (*Perm, error)
	predicates    []predicate.Perm
}

var _ ent.Mutation = (*PermMutation)(nil)

// permOption allows management of the mutation configuration using functional options.
type permOption func(*PermMutation)

// newPermMutation creates new mutation for the Perm entity.
func newPermMutation(c config, op Op, opts ...permOption) *PermMutation {
	m := &PermMutation{
		config:        c,
		op:            op,
		typ:           TypePerm,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPermID sets the ID field of the mutation.
func withPermID(id int) permOption {
	return func(m *PermMutation) {
		var (
			err   error
			once  sync.Once
			value *Perm
		)
		m.oldValue = func(ctx context.Context) (*Perm, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Perm.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPerm sets the old Perm of the mutation.
func withPerm(node *Perm) permOption {
	return func(m *PermMutation) {
		m.oldValue = func(context.Context) (*Perm, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PermMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PermMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PermMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRepoPerm sets the "repo_perm" field.
func (m *PermMutation) SetRepoPerm(pp perm.RepoPerm) {
	m.repo_perm = &pp
}

// RepoPerm returns the value of the "repo_perm" field in the mutation.
func (m *PermMutation) RepoPerm() (r perm.RepoPerm, exists bool) {
	v := m.repo_perm
	if v == nil {
		return
	}
	return *v, true
}

// OldRepoPerm returns the old "repo_perm" field's value of the Perm entity.
// If the Perm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermMutation) OldRepoPerm(ctx context.Context) (v perm.RepoPerm, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRepoPerm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRepoPerm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepoPerm: %w", err)
	}
	return oldValue.RepoPerm, nil
}

// ResetRepoPerm resets all changes to the "repo_perm" field.
func (m *PermMutation) ResetRepoPerm() {
	m.repo_perm = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PermMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PermMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Perm entity.
// If the Perm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PermMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PermMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PermMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Perm entity.
// If the Perm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PermMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user_id" field.
func (m *PermMutation) SetUserID(s string) {
	m.user = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *PermMutation) UserID() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Perm entity.
// If the Perm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *PermMutation) ResetUserID() {
	m.user = nil
}

// SetRepoID sets the "repo_id" field.
func (m *PermMutation) SetRepoID(s string) {
	m.repo = &s
}

// RepoID returns the value of the "repo_id" field in the mutation.
func (m *PermMutation) RepoID() (r string, exists bool) {
	v := m.repo
	if v == nil {
		return
	}
	return *v, true
}

// OldRepoID returns the old "repo_id" field's value of the Perm entity.
// If the Perm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermMutation) OldRepoID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRepoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRepoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepoID: %w", err)
	}
	return oldValue.RepoID, nil
}

// ResetRepoID resets all changes to the "repo_id" field.
func (m *PermMutation) ResetRepoID() {
	m.repo = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *PermMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *PermMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PermMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *PermMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearRepo clears the "repo" edge to the Repo entity.
func (m *PermMutation) ClearRepo() {
	m.clearedrepo = true
}

// RepoCleared reports if the "repo" edge to the Repo entity was cleared.
func (m *PermMutation) RepoCleared() bool {
	return m.clearedrepo
}

// RepoIDs returns the "repo" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RepoID instead. It exists only for internal usage by the builders.
func (m *PermMutation) RepoIDs() (ids []string) {
	if id := m.repo; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRepo resets all changes to the "repo" edge.
func (m *PermMutation) ResetRepo() {
	m.repo = nil
	m.clearedrepo = false
}

// Where appends a list predicates to the PermMutation builder.
func (m *PermMutation) Where(ps ...predicate.Perm) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PermMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Perm).
func (m *PermMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PermMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.repo_perm != nil {
		fields = append(fields, perm.FieldRepoPerm)
	}
	if m.created_at != nil {
		fields = append(fields, perm.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, perm.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, perm.FieldUserID)
	}
	if m.repo != nil {
		fields = append(fields, perm.FieldRepoID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PermMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case perm.FieldRepoPerm:
		return m.RepoPerm()
	case perm.FieldCreatedAt:
		return m.CreatedAt()
	case perm.FieldUpdatedAt:
		return m.UpdatedAt()
	case perm.FieldUserID:
		return m.UserID()
	case perm.FieldRepoID:
		return m.RepoID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PermMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case perm.FieldRepoPerm:
		return m.OldRepoPerm(ctx)
	case perm.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case perm.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case perm.FieldUserID:
		return m.OldUserID(ctx)
	case perm.FieldRepoID:
		return m.OldRepoID(ctx)
	}
	return nil, fmt.Errorf("unknown Perm field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermMutation) SetField(name string, value ent.Value) error {
	switch name {
	case perm.FieldRepoPerm:
		v, ok := value.(perm.RepoPerm)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepoPerm(v)
		return nil
	case perm.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case perm.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case perm.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case perm.FieldRepoID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepoID(v)
		return nil
	}
	return fmt.Errorf("unknown Perm field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PermMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PermMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Perm numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PermMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PermMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PermMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Perm nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PermMutation) ResetField(name string) error {
	switch name {
	case perm.FieldRepoPerm:
		m.ResetRepoPerm()
		return nil
	case perm.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case perm.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case perm.FieldUserID:
		m.ResetUserID()
		return nil
	case perm.FieldRepoID:
		m.ResetRepoID()
		return nil
	}
	return fmt.Errorf("unknown Perm field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PermMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, perm.EdgeUser)
	}
	if m.repo != nil {
		edges = append(edges, perm.EdgeRepo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PermMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case perm.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case perm.EdgeRepo:
		if id := m.repo; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PermMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PermMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PermMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, perm.EdgeUser)
	}
	if m.clearedrepo {
		edges = append(edges, perm.EdgeRepo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PermMutation) EdgeCleared(name string) bool {
	switch name {
	case perm.EdgeUser:
		return m.cleareduser
	case perm.EdgeRepo:
		return m.clearedrepo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PermMutation) ClearEdge(name string) error {
	switch name {
	case perm.EdgeUser:
		m.ClearUser()
		return nil
	case perm.EdgeRepo:
		m.ClearRepo()
		return nil
	}
	return fmt.Errorf("unknown Perm unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PermMutation) ResetEdge(name string) error {
	switch name {
	case perm.EdgeUser:
		m.ResetUser()
		return nil
	case perm.EdgeRepo:
		m.ResetRepo()
		return nil
	}
	return fmt.Errorf("unknown Perm edge %s", name)
}

// RepoMutation represents an operation that mutates the Repo nodes in the graph.
type RepoMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	namespace          *string
	name               *string
	description        *string
	config_path        *string
	active             *bool
	webhook_id         *int64
	addwebhook_id      *int64
	created_at         *time.Time
	updated_at         *time.Time
	latest_deployed_at *time.Time
	clearedFields      map[string]struct{}
	perms              map[int]struct{}
	removedperms       map[int]struct{}
	clearedperms       bool
	deployments        map[int]struct{}
	removeddeployments map[int]struct{}
	cleareddeployments bool
	callback           map[int]struct{}
	removedcallback    map[int]struct{}
	clearedcallback    bool
	done               bool
	oldValue           func(context.Context) (*Repo, error)
	predicates         []predicate.Repo
}

var _ ent.Mutation = (*RepoMutation)(nil)

// repoOption allows management of the mutation configuration using functional options.
type repoOption func(*RepoMutation)

// newRepoMutation creates new mutation for the Repo entity.
func newRepoMutation(c config, op Op, opts ...repoOption) *RepoMutation {
	m := &RepoMutation{
		config:        c,
		op:            op,
		typ:           TypeRepo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRepoID sets the ID field of the mutation.
func withRepoID(id string) repoOption {
	return func(m *RepoMutation) {
		var (
			err   error
			once  sync.Once
			value *Repo
		)
		m.oldValue = func(ctx context.Context) (*Repo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Repo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRepo sets the old Repo of the mutation.
func withRepo(node *Repo) repoOption {
	return func(m *RepoMutation) {
		m.oldValue = func(context.Context) (*Repo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RepoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RepoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Repo entities.
func (m *RepoMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RepoMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNamespace sets the "namespace" field.
func (m *RepoMutation) SetNamespace(s string) {
	m.namespace = &s
}

// Namespace returns the value of the "namespace" field in the mutation.
func (m *RepoMutation) Namespace() (r string, exists bool) {
	v := m.namespace
	if v == nil {
		return
	}
	return *v, true
}

// OldNamespace returns the old "namespace" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldNamespace(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNamespace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNamespace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNamespace: %w", err)
	}
	return oldValue.Namespace, nil
}

// ResetNamespace resets all changes to the "namespace" field.
func (m *RepoMutation) ResetNamespace() {
	m.namespace = nil
}

// SetName sets the "name" field.
func (m *RepoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RepoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RepoMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *RepoMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *RepoMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *RepoMutation) ResetDescription() {
	m.description = nil
}

// SetConfigPath sets the "config_path" field.
func (m *RepoMutation) SetConfigPath(s string) {
	m.config_path = &s
}

// ConfigPath returns the value of the "config_path" field in the mutation.
func (m *RepoMutation) ConfigPath() (r string, exists bool) {
	v := m.config_path
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigPath returns the old "config_path" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldConfigPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConfigPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConfigPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigPath: %w", err)
	}
	return oldValue.ConfigPath, nil
}

// ResetConfigPath resets all changes to the "config_path" field.
func (m *RepoMutation) ResetConfigPath() {
	m.config_path = nil
}

// SetActive sets the "active" field.
func (m *RepoMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *RepoMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *RepoMutation) ResetActive() {
	m.active = nil
}

// SetWebhookID sets the "webhook_id" field.
func (m *RepoMutation) SetWebhookID(i int64) {
	m.webhook_id = &i
	m.addwebhook_id = nil
}

// WebhookID returns the value of the "webhook_id" field in the mutation.
func (m *RepoMutation) WebhookID() (r int64, exists bool) {
	v := m.webhook_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWebhookID returns the old "webhook_id" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldWebhookID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWebhookID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWebhookID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebhookID: %w", err)
	}
	return oldValue.WebhookID, nil
}

// AddWebhookID adds i to the "webhook_id" field.
func (m *RepoMutation) AddWebhookID(i int64) {
	if m.addwebhook_id != nil {
		*m.addwebhook_id += i
	} else {
		m.addwebhook_id = &i
	}
}

// AddedWebhookID returns the value that was added to the "webhook_id" field in this mutation.
func (m *RepoMutation) AddedWebhookID() (r int64, exists bool) {
	v := m.addwebhook_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearWebhookID clears the value of the "webhook_id" field.
func (m *RepoMutation) ClearWebhookID() {
	m.webhook_id = nil
	m.addwebhook_id = nil
	m.clearedFields[repo.FieldWebhookID] = struct{}{}
}

// WebhookIDCleared returns if the "webhook_id" field was cleared in this mutation.
func (m *RepoMutation) WebhookIDCleared() bool {
	_, ok := m.clearedFields[repo.FieldWebhookID]
	return ok
}

// ResetWebhookID resets all changes to the "webhook_id" field.
func (m *RepoMutation) ResetWebhookID() {
	m.webhook_id = nil
	m.addwebhook_id = nil
	delete(m.clearedFields, repo.FieldWebhookID)
}

// SetCreatedAt sets the "created_at" field.
func (m *RepoMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RepoMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RepoMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RepoMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RepoMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RepoMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetLatestDeployedAt sets the "latest_deployed_at" field.
func (m *RepoMutation) SetLatestDeployedAt(t time.Time) {
	m.latest_deployed_at = &t
}

// LatestDeployedAt returns the value of the "latest_deployed_at" field in the mutation.
func (m *RepoMutation) LatestDeployedAt() (r time.Time, exists bool) {
	v := m.latest_deployed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLatestDeployedAt returns the old "latest_deployed_at" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldLatestDeployedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLatestDeployedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLatestDeployedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatestDeployedAt: %w", err)
	}
	return oldValue.LatestDeployedAt, nil
}

// ClearLatestDeployedAt clears the value of the "latest_deployed_at" field.
func (m *RepoMutation) ClearLatestDeployedAt() {
	m.latest_deployed_at = nil
	m.clearedFields[repo.FieldLatestDeployedAt] = struct{}{}
}

// LatestDeployedAtCleared returns if the "latest_deployed_at" field was cleared in this mutation.
func (m *RepoMutation) LatestDeployedAtCleared() bool {
	_, ok := m.clearedFields[repo.FieldLatestDeployedAt]
	return ok
}

// ResetLatestDeployedAt resets all changes to the "latest_deployed_at" field.
func (m *RepoMutation) ResetLatestDeployedAt() {
	m.latest_deployed_at = nil
	delete(m.clearedFields, repo.FieldLatestDeployedAt)
}

// AddPermIDs adds the "perms" edge to the Perm entity by ids.
func (m *RepoMutation) AddPermIDs(ids ...int) {
	if m.perms == nil {
		m.perms = make(map[int]struct{})
	}
	for i := range ids {
		m.perms[ids[i]] = struct{}{}
	}
}

// ClearPerms clears the "perms" edge to the Perm entity.
func (m *RepoMutation) ClearPerms() {
	m.clearedperms = true
}

// PermsCleared reports if the "perms" edge to the Perm entity was cleared.
func (m *RepoMutation) PermsCleared() bool {
	return m.clearedperms
}

// RemovePermIDs removes the "perms" edge to the Perm entity by IDs.
func (m *RepoMutation) RemovePermIDs(ids ...int) {
	if m.removedperms == nil {
		m.removedperms = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.perms, ids[i])
		m.removedperms[ids[i]] = struct{}{}
	}
}

// RemovedPerms returns the removed IDs of the "perms" edge to the Perm entity.
func (m *RepoMutation) RemovedPermsIDs() (ids []int) {
	for id := range m.removedperms {
		ids = append(ids, id)
	}
	return
}

// PermsIDs returns the "perms" edge IDs in the mutation.
func (m *RepoMutation) PermsIDs() (ids []int) {
	for id := range m.perms {
		ids = append(ids, id)
	}
	return
}

// ResetPerms resets all changes to the "perms" edge.
func (m *RepoMutation) ResetPerms() {
	m.perms = nil
	m.clearedperms = false
	m.removedperms = nil
}

// AddDeploymentIDs adds the "deployments" edge to the Deployment entity by ids.
func (m *RepoMutation) AddDeploymentIDs(ids ...int) {
	if m.deployments == nil {
		m.deployments = make(map[int]struct{})
	}
	for i := range ids {
		m.deployments[ids[i]] = struct{}{}
	}
}

// ClearDeployments clears the "deployments" edge to the Deployment entity.
func (m *RepoMutation) ClearDeployments() {
	m.cleareddeployments = true
}

// DeploymentsCleared reports if the "deployments" edge to the Deployment entity was cleared.
func (m *RepoMutation) DeploymentsCleared() bool {
	return m.cleareddeployments
}

// RemoveDeploymentIDs removes the "deployments" edge to the Deployment entity by IDs.
func (m *RepoMutation) RemoveDeploymentIDs(ids ...int) {
	if m.removeddeployments == nil {
		m.removeddeployments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.deployments, ids[i])
		m.removeddeployments[ids[i]] = struct{}{}
	}
}

// RemovedDeployments returns the removed IDs of the "deployments" edge to the Deployment entity.
func (m *RepoMutation) RemovedDeploymentsIDs() (ids []int) {
	for id := range m.removeddeployments {
		ids = append(ids, id)
	}
	return
}

// DeploymentsIDs returns the "deployments" edge IDs in the mutation.
func (m *RepoMutation) DeploymentsIDs() (ids []int) {
	for id := range m.deployments {
		ids = append(ids, id)
	}
	return
}

// ResetDeployments resets all changes to the "deployments" edge.
func (m *RepoMutation) ResetDeployments() {
	m.deployments = nil
	m.cleareddeployments = false
	m.removeddeployments = nil
}

// AddCallbackIDs adds the "callback" edge to the Callback entity by ids.
func (m *RepoMutation) AddCallbackIDs(ids ...int) {
	if m.callback == nil {
		m.callback = make(map[int]struct{})
	}
	for i := range ids {
		m.callback[ids[i]] = struct{}{}
	}
}

// ClearCallback clears the "callback" edge to the Callback entity.
func (m *RepoMutation) ClearCallback() {
	m.clearedcallback = true
}

// CallbackCleared reports if the "callback" edge to the Callback entity was cleared.
func (m *RepoMutation) CallbackCleared() bool {
	return m.clearedcallback
}

// RemoveCallbackIDs removes the "callback" edge to the Callback entity by IDs.
func (m *RepoMutation) RemoveCallbackIDs(ids ...int) {
	if m.removedcallback == nil {
		m.removedcallback = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.callback, ids[i])
		m.removedcallback[ids[i]] = struct{}{}
	}
}

// RemovedCallback returns the removed IDs of the "callback" edge to the Callback entity.
func (m *RepoMutation) RemovedCallbackIDs() (ids []int) {
	for id := range m.removedcallback {
		ids = append(ids, id)
	}
	return
}

// CallbackIDs returns the "callback" edge IDs in the mutation.
func (m *RepoMutation) CallbackIDs() (ids []int) {
	for id := range m.callback {
		ids = append(ids, id)
	}
	return
}

// ResetCallback resets all changes to the "callback" edge.
func (m *RepoMutation) ResetCallback() {
	m.callback = nil
	m.clearedcallback = false
	m.removedcallback = nil
}

// Where appends a list predicates to the RepoMutation builder.
func (m *RepoMutation) Where(ps ...predicate.Repo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RepoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Repo).
func (m *RepoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RepoMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.namespace != nil {
		fields = append(fields, repo.FieldNamespace)
	}
	if m.name != nil {
		fields = append(fields, repo.FieldName)
	}
	if m.description != nil {
		fields = append(fields, repo.FieldDescription)
	}
	if m.config_path != nil {
		fields = append(fields, repo.FieldConfigPath)
	}
	if m.active != nil {
		fields = append(fields, repo.FieldActive)
	}
	if m.webhook_id != nil {
		fields = append(fields, repo.FieldWebhookID)
	}
	if m.created_at != nil {
		fields = append(fields, repo.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, repo.FieldUpdatedAt)
	}
	if m.latest_deployed_at != nil {
		fields = append(fields, repo.FieldLatestDeployedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RepoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case repo.FieldNamespace:
		return m.Namespace()
	case repo.FieldName:
		return m.Name()
	case repo.FieldDescription:
		return m.Description()
	case repo.FieldConfigPath:
		return m.ConfigPath()
	case repo.FieldActive:
		return m.Active()
	case repo.FieldWebhookID:
		return m.WebhookID()
	case repo.FieldCreatedAt:
		return m.CreatedAt()
	case repo.FieldUpdatedAt:
		return m.UpdatedAt()
	case repo.FieldLatestDeployedAt:
		return m.LatestDeployedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RepoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case repo.FieldNamespace:
		return m.OldNamespace(ctx)
	case repo.FieldName:
		return m.OldName(ctx)
	case repo.FieldDescription:
		return m.OldDescription(ctx)
	case repo.FieldConfigPath:
		return m.OldConfigPath(ctx)
	case repo.FieldActive:
		return m.OldActive(ctx)
	case repo.FieldWebhookID:
		return m.OldWebhookID(ctx)
	case repo.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case repo.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case repo.FieldLatestDeployedAt:
		return m.OldLatestDeployedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Repo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case repo.FieldNamespace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNamespace(v)
		return nil
	case repo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case repo.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case repo.FieldConfigPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigPath(v)
		return nil
	case repo.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case repo.FieldWebhookID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebhookID(v)
		return nil
	case repo.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case repo.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case repo.FieldLatestDeployedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatestDeployedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Repo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RepoMutation) AddedFields() []string {
	var fields []string
	if m.addwebhook_id != nil {
		fields = append(fields, repo.FieldWebhookID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RepoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case repo.FieldWebhookID:
		return m.AddedWebhookID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case repo.FieldWebhookID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWebhookID(v)
		return nil
	}
	return fmt.Errorf("unknown Repo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RepoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(repo.FieldWebhookID) {
		fields = append(fields, repo.FieldWebhookID)
	}
	if m.FieldCleared(repo.FieldLatestDeployedAt) {
		fields = append(fields, repo.FieldLatestDeployedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RepoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RepoMutation) ClearField(name string) error {
	switch name {
	case repo.FieldWebhookID:
		m.ClearWebhookID()
		return nil
	case repo.FieldLatestDeployedAt:
		m.ClearLatestDeployedAt()
		return nil
	}
	return fmt.Errorf("unknown Repo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RepoMutation) ResetField(name string) error {
	switch name {
	case repo.FieldNamespace:
		m.ResetNamespace()
		return nil
	case repo.FieldName:
		m.ResetName()
		return nil
	case repo.FieldDescription:
		m.ResetDescription()
		return nil
	case repo.FieldConfigPath:
		m.ResetConfigPath()
		return nil
	case repo.FieldActive:
		m.ResetActive()
		return nil
	case repo.FieldWebhookID:
		m.ResetWebhookID()
		return nil
	case repo.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case repo.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case repo.FieldLatestDeployedAt:
		m.ResetLatestDeployedAt()
		return nil
	}
	return fmt.Errorf("unknown Repo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RepoMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.perms != nil {
		edges = append(edges, repo.EdgePerms)
	}
	if m.deployments != nil {
		edges = append(edges, repo.EdgeDeployments)
	}
	if m.callback != nil {
		edges = append(edges, repo.EdgeCallback)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RepoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case repo.EdgePerms:
		ids := make([]ent.Value, 0, len(m.perms))
		for id := range m.perms {
			ids = append(ids, id)
		}
		return ids
	case repo.EdgeDeployments:
		ids := make([]ent.Value, 0, len(m.deployments))
		for id := range m.deployments {
			ids = append(ids, id)
		}
		return ids
	case repo.EdgeCallback:
		ids := make([]ent.Value, 0, len(m.callback))
		for id := range m.callback {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RepoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedperms != nil {
		edges = append(edges, repo.EdgePerms)
	}
	if m.removeddeployments != nil {
		edges = append(edges, repo.EdgeDeployments)
	}
	if m.removedcallback != nil {
		edges = append(edges, repo.EdgeCallback)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RepoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case repo.EdgePerms:
		ids := make([]ent.Value, 0, len(m.removedperms))
		for id := range m.removedperms {
			ids = append(ids, id)
		}
		return ids
	case repo.EdgeDeployments:
		ids := make([]ent.Value, 0, len(m.removeddeployments))
		for id := range m.removeddeployments {
			ids = append(ids, id)
		}
		return ids
	case repo.EdgeCallback:
		ids := make([]ent.Value, 0, len(m.removedcallback))
		for id := range m.removedcallback {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RepoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedperms {
		edges = append(edges, repo.EdgePerms)
	}
	if m.cleareddeployments {
		edges = append(edges, repo.EdgeDeployments)
	}
	if m.clearedcallback {
		edges = append(edges, repo.EdgeCallback)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RepoMutation) EdgeCleared(name string) bool {
	switch name {
	case repo.EdgePerms:
		return m.clearedperms
	case repo.EdgeDeployments:
		return m.cleareddeployments
	case repo.EdgeCallback:
		return m.clearedcallback
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RepoMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Repo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RepoMutation) ResetEdge(name string) error {
	switch name {
	case repo.EdgePerms:
		m.ResetPerms()
		return nil
	case repo.EdgeDeployments:
		m.ResetDeployments()
		return nil
	case repo.EdgeCallback:
		m.ResetCallback()
		return nil
	}
	return fmt.Errorf("unknown Repo edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	login              *string
	avatar             *string
	admin              *bool
	token              *string
	refresh            *string
	expiry             *time.Time
	hash               *string
	created_at         *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	chat_user          *string
	clearedchat_user   bool
	perms              map[int]struct{}
	removedperms       map[int]struct{}
	clearedperms       bool
	deployments        map[int]struct{}
	removeddeployments map[int]struct{}
	cleareddeployments bool
	approvals          map[int]struct{}
	removedapprovals   map[int]struct{}
	clearedapprovals   bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetLogin sets the "login" field.
func (m *UserMutation) SetLogin(s string) {
	m.login = &s
}

// Login returns the value of the "login" field in the mutation.
func (m *UserMutation) Login() (r string, exists bool) {
	v := m.login
	if v == nil {
		return
	}
	return *v, true
}

// OldLogin returns the old "login" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLogin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogin: %w", err)
	}
	return oldValue.Login, nil
}

// ResetLogin resets all changes to the "login" field.
func (m *UserMutation) ResetLogin() {
	m.login = nil
}

// SetAvatar sets the "avatar" field.
func (m *UserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *UserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *UserMutation) ResetAvatar() {
	m.avatar = nil
}

// SetAdmin sets the "admin" field.
func (m *UserMutation) SetAdmin(b bool) {
	m.admin = &b
}

// Admin returns the value of the "admin" field in the mutation.
func (m *UserMutation) Admin() (r bool, exists bool) {
	v := m.admin
	if v == nil {
		return
	}
	return *v, true
}

// OldAdmin returns the old "admin" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAdmin(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAdmin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAdmin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdmin: %w", err)
	}
	return oldValue.Admin, nil
}

// ResetAdmin resets all changes to the "admin" field.
func (m *UserMutation) ResetAdmin() {
	m.admin = nil
}

// SetToken sets the "token" field.
func (m *UserMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *UserMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *UserMutation) ResetToken() {
	m.token = nil
}

// SetRefresh sets the "refresh" field.
func (m *UserMutation) SetRefresh(s string) {
	m.refresh = &s
}

// Refresh returns the value of the "refresh" field in the mutation.
func (m *UserMutation) Refresh() (r string, exists bool) {
	v := m.refresh
	if v == nil {
		return
	}
	return *v, true
}

// OldRefresh returns the old "refresh" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRefresh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRefresh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRefresh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefresh: %w", err)
	}
	return oldValue.Refresh, nil
}

// ResetRefresh resets all changes to the "refresh" field.
func (m *UserMutation) ResetRefresh() {
	m.refresh = nil
}

// SetExpiry sets the "expiry" field.
func (m *UserMutation) SetExpiry(t time.Time) {
	m.expiry = &t
}

// Expiry returns the value of the "expiry" field in the mutation.
func (m *UserMutation) Expiry() (r time.Time, exists bool) {
	v := m.expiry
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiry returns the old "expiry" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldExpiry(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExpiry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExpiry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiry: %w", err)
	}
	return oldValue.Expiry, nil
}

// ResetExpiry resets all changes to the "expiry" field.
func (m *UserMutation) ResetExpiry() {
	m.expiry = nil
}

// SetHash sets the "hash" field.
func (m *UserMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *UserMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *UserMutation) ResetHash() {
	m.hash = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetChatUserID sets the "chat_user" edge to the ChatUser entity by id.
func (m *UserMutation) SetChatUserID(id string) {
	m.chat_user = &id
}

// ClearChatUser clears the "chat_user" edge to the ChatUser entity.
func (m *UserMutation) ClearChatUser() {
	m.clearedchat_user = true
}

// ChatUserCleared reports if the "chat_user" edge to the ChatUser entity was cleared.
func (m *UserMutation) ChatUserCleared() bool {
	return m.clearedchat_user
}

// ChatUserID returns the "chat_user" edge ID in the mutation.
func (m *UserMutation) ChatUserID() (id string, exists bool) {
	if m.chat_user != nil {
		return *m.chat_user, true
	}
	return
}

// ChatUserIDs returns the "chat_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChatUserID instead. It exists only for internal usage by the builders.
func (m *UserMutation) ChatUserIDs() (ids []string) {
	if id := m.chat_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChatUser resets all changes to the "chat_user" edge.
func (m *UserMutation) ResetChatUser() {
	m.chat_user = nil
	m.clearedchat_user = false
}

// AddPermIDs adds the "perms" edge to the Perm entity by ids.
func (m *UserMutation) AddPermIDs(ids ...int) {
	if m.perms == nil {
		m.perms = make(map[int]struct{})
	}
	for i := range ids {
		m.perms[ids[i]] = struct{}{}
	}
}

// ClearPerms clears the "perms" edge to the Perm entity.
func (m *UserMutation) ClearPerms() {
	m.clearedperms = true
}

// PermsCleared reports if the "perms" edge to the Perm entity was cleared.
func (m *UserMutation) PermsCleared() bool {
	return m.clearedperms
}

// RemovePermIDs removes the "perms" edge to the Perm entity by IDs.
func (m *UserMutation) RemovePermIDs(ids ...int) {
	if m.removedperms == nil {
		m.removedperms = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.perms, ids[i])
		m.removedperms[ids[i]] = struct{}{}
	}
}

// RemovedPerms returns the removed IDs of the "perms" edge to the Perm entity.
func (m *UserMutation) RemovedPermsIDs() (ids []int) {
	for id := range m.removedperms {
		ids = append(ids, id)
	}
	return
}

// PermsIDs returns the "perms" edge IDs in the mutation.
func (m *UserMutation) PermsIDs() (ids []int) {
	for id := range m.perms {
		ids = append(ids, id)
	}
	return
}

// ResetPerms resets all changes to the "perms" edge.
func (m *UserMutation) ResetPerms() {
	m.perms = nil
	m.clearedperms = false
	m.removedperms = nil
}

// AddDeploymentIDs adds the "deployments" edge to the Deployment entity by ids.
func (m *UserMutation) AddDeploymentIDs(ids ...int) {
	if m.deployments == nil {
		m.deployments = make(map[int]struct{})
	}
	for i := range ids {
		m.deployments[ids[i]] = struct{}{}
	}
}

// ClearDeployments clears the "deployments" edge to the Deployment entity.
func (m *UserMutation) ClearDeployments() {
	m.cleareddeployments = true
}

// DeploymentsCleared reports if the "deployments" edge to the Deployment entity was cleared.
func (m *UserMutation) DeploymentsCleared() bool {
	return m.cleareddeployments
}

// RemoveDeploymentIDs removes the "deployments" edge to the Deployment entity by IDs.
func (m *UserMutation) RemoveDeploymentIDs(ids ...int) {
	if m.removeddeployments == nil {
		m.removeddeployments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.deployments, ids[i])
		m.removeddeployments[ids[i]] = struct{}{}
	}
}

// RemovedDeployments returns the removed IDs of the "deployments" edge to the Deployment entity.
func (m *UserMutation) RemovedDeploymentsIDs() (ids []int) {
	for id := range m.removeddeployments {
		ids = append(ids, id)
	}
	return
}

// DeploymentsIDs returns the "deployments" edge IDs in the mutation.
func (m *UserMutation) DeploymentsIDs() (ids []int) {
	for id := range m.deployments {
		ids = append(ids, id)
	}
	return
}

// ResetDeployments resets all changes to the "deployments" edge.
func (m *UserMutation) ResetDeployments() {
	m.deployments = nil
	m.cleareddeployments = false
	m.removeddeployments = nil
}

// AddApprovalIDs adds the "approvals" edge to the Approval entity by ids.
func (m *UserMutation) AddApprovalIDs(ids ...int) {
	if m.approvals == nil {
		m.approvals = make(map[int]struct{})
	}
	for i := range ids {
		m.approvals[ids[i]] = struct{}{}
	}
}

// ClearApprovals clears the "approvals" edge to the Approval entity.
func (m *UserMutation) ClearApprovals() {
	m.clearedapprovals = true
}

// ApprovalsCleared reports if the "approvals" edge to the Approval entity was cleared.
func (m *UserMutation) ApprovalsCleared() bool {
	return m.clearedapprovals
}

// RemoveApprovalIDs removes the "approvals" edge to the Approval entity by IDs.
func (m *UserMutation) RemoveApprovalIDs(ids ...int) {
	if m.removedapprovals == nil {
		m.removedapprovals = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.approvals, ids[i])
		m.removedapprovals[ids[i]] = struct{}{}
	}
}

// RemovedApprovals returns the removed IDs of the "approvals" edge to the Approval entity.
func (m *UserMutation) RemovedApprovalsIDs() (ids []int) {
	for id := range m.removedapprovals {
		ids = append(ids, id)
	}
	return
}

// ApprovalsIDs returns the "approvals" edge IDs in the mutation.
func (m *UserMutation) ApprovalsIDs() (ids []int) {
	for id := range m.approvals {
		ids = append(ids, id)
	}
	return
}

// ResetApprovals resets all changes to the "approvals" edge.
func (m *UserMutation) ResetApprovals() {
	m.approvals = nil
	m.clearedapprovals = false
	m.removedapprovals = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.login != nil {
		fields = append(fields, user.FieldLogin)
	}
	if m.avatar != nil {
		fields = append(fields, user.FieldAvatar)
	}
	if m.admin != nil {
		fields = append(fields, user.FieldAdmin)
	}
	if m.token != nil {
		fields = append(fields, user.FieldToken)
	}
	if m.refresh != nil {
		fields = append(fields, user.FieldRefresh)
	}
	if m.expiry != nil {
		fields = append(fields, user.FieldExpiry)
	}
	if m.hash != nil {
		fields = append(fields, user.FieldHash)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldLogin:
		return m.Login()
	case user.FieldAvatar:
		return m.Avatar()
	case user.FieldAdmin:
		return m.Admin()
	case user.FieldToken:
		return m.Token()
	case user.FieldRefresh:
		return m.Refresh()
	case user.FieldExpiry:
		return m.Expiry()
	case user.FieldHash:
		return m.Hash()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldLogin:
		return m.OldLogin(ctx)
	case user.FieldAvatar:
		return m.OldAvatar(ctx)
	case user.FieldAdmin:
		return m.OldAdmin(ctx)
	case user.FieldToken:
		return m.OldToken(ctx)
	case user.FieldRefresh:
		return m.OldRefresh(ctx)
	case user.FieldExpiry:
		return m.OldExpiry(ctx)
	case user.FieldHash:
		return m.OldHash(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldLogin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogin(v)
		return nil
	case user.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case user.FieldAdmin:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdmin(v)
		return nil
	case user.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case user.FieldRefresh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefresh(v)
		return nil
	case user.FieldExpiry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiry(v)
		return nil
	case user.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldLogin:
		m.ResetLogin()
		return nil
	case user.FieldAvatar:
		m.ResetAvatar()
		return nil
	case user.FieldAdmin:
		m.ResetAdmin()
		return nil
	case user.FieldToken:
		m.ResetToken()
		return nil
	case user.FieldRefresh:
		m.ResetRefresh()
		return nil
	case user.FieldExpiry:
		m.ResetExpiry()
		return nil
	case user.FieldHash:
		m.ResetHash()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.chat_user != nil {
		edges = append(edges, user.EdgeChatUser)
	}
	if m.perms != nil {
		edges = append(edges, user.EdgePerms)
	}
	if m.deployments != nil {
		edges = append(edges, user.EdgeDeployments)
	}
	if m.approvals != nil {
		edges = append(edges, user.EdgeApprovals)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeChatUser:
		if id := m.chat_user; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgePerms:
		ids := make([]ent.Value, 0, len(m.perms))
		for id := range m.perms {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDeployments:
		ids := make([]ent.Value, 0, len(m.deployments))
		for id := range m.deployments {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeApprovals:
		ids := make([]ent.Value, 0, len(m.approvals))
		for id := range m.approvals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedperms != nil {
		edges = append(edges, user.EdgePerms)
	}
	if m.removeddeployments != nil {
		edges = append(edges, user.EdgeDeployments)
	}
	if m.removedapprovals != nil {
		edges = append(edges, user.EdgeApprovals)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePerms:
		ids := make([]ent.Value, 0, len(m.removedperms))
		for id := range m.removedperms {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDeployments:
		ids := make([]ent.Value, 0, len(m.removeddeployments))
		for id := range m.removeddeployments {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeApprovals:
		ids := make([]ent.Value, 0, len(m.removedapprovals))
		for id := range m.removedapprovals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedchat_user {
		edges = append(edges, user.EdgeChatUser)
	}
	if m.clearedperms {
		edges = append(edges, user.EdgePerms)
	}
	if m.cleareddeployments {
		edges = append(edges, user.EdgeDeployments)
	}
	if m.clearedapprovals {
		edges = append(edges, user.EdgeApprovals)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeChatUser:
		return m.clearedchat_user
	case user.EdgePerms:
		return m.clearedperms
	case user.EdgeDeployments:
		return m.cleareddeployments
	case user.EdgeApprovals:
		return m.clearedapprovals
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeChatUser:
		m.ClearChatUser()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeChatUser:
		m.ResetChatUser()
		return nil
	case user.EdgePerms:
		m.ResetPerms()
		return nil
	case user.EdgeDeployments:
		m.ResetDeployments()
		return nil
	case user.EdgeApprovals:
		m.ResetApprovals()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
