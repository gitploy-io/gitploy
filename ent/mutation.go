// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/hanjunlee/gitploy/ent/chatuser"
	"github.com/hanjunlee/gitploy/ent/deployment"
	"github.com/hanjunlee/gitploy/ent/perm"
	"github.com/hanjunlee/gitploy/ent/predicate"
	"github.com/hanjunlee/gitploy/ent/repo"
	"github.com/hanjunlee/gitploy/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChatUser   = "ChatUser"
	TypeDeployment = "Deployment"
	TypePerm       = "Perm"
	TypeRepo       = "Repo"
	TypeUser       = "User"
)

// ChatUserMutation represents an operation that mutates the ChatUser nodes in the graph.
type ChatUserMutation struct {
	config
	op            Op
	typ           string
	id            *string
	token         *string
	refresh       *string
	expiry        *time.Time
	bot_token     *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*ChatUser, error)
	predicates    []predicate.ChatUser
}

var _ ent.Mutation = (*ChatUserMutation)(nil)

// chatuserOption allows management of the mutation configuration using functional options.
type chatuserOption func(*ChatUserMutation)

// newChatUserMutation creates new mutation for the ChatUser entity.
func newChatUserMutation(c config, op Op, opts ...chatuserOption) *ChatUserMutation {
	m := &ChatUserMutation{
		config:        c,
		op:            op,
		typ:           TypeChatUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatUserID sets the ID field of the mutation.
func withChatUserID(id string) chatuserOption {
	return func(m *ChatUserMutation) {
		var (
			err   error
			once  sync.Once
			value *ChatUser
		)
		m.oldValue = func(ctx context.Context) (*ChatUser, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChatUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChatUser sets the old ChatUser of the mutation.
func withChatUser(node *ChatUser) chatuserOption {
	return func(m *ChatUserMutation) {
		m.oldValue = func(context.Context) (*ChatUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ChatUser entities.
func (m *ChatUserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ChatUserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetToken sets the "token" field.
func (m *ChatUserMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *ChatUserMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the ChatUser entity.
// If the ChatUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatUserMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *ChatUserMutation) ResetToken() {
	m.token = nil
}

// SetRefresh sets the "refresh" field.
func (m *ChatUserMutation) SetRefresh(s string) {
	m.refresh = &s
}

// Refresh returns the value of the "refresh" field in the mutation.
func (m *ChatUserMutation) Refresh() (r string, exists bool) {
	v := m.refresh
	if v == nil {
		return
	}
	return *v, true
}

// OldRefresh returns the old "refresh" field's value of the ChatUser entity.
// If the ChatUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatUserMutation) OldRefresh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRefresh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRefresh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefresh: %w", err)
	}
	return oldValue.Refresh, nil
}

// ResetRefresh resets all changes to the "refresh" field.
func (m *ChatUserMutation) ResetRefresh() {
	m.refresh = nil
}

// SetExpiry sets the "expiry" field.
func (m *ChatUserMutation) SetExpiry(t time.Time) {
	m.expiry = &t
}

// Expiry returns the value of the "expiry" field in the mutation.
func (m *ChatUserMutation) Expiry() (r time.Time, exists bool) {
	v := m.expiry
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiry returns the old "expiry" field's value of the ChatUser entity.
// If the ChatUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatUserMutation) OldExpiry(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExpiry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExpiry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiry: %w", err)
	}
	return oldValue.Expiry, nil
}

// ResetExpiry resets all changes to the "expiry" field.
func (m *ChatUserMutation) ResetExpiry() {
	m.expiry = nil
}

// SetBotToken sets the "bot_token" field.
func (m *ChatUserMutation) SetBotToken(s string) {
	m.bot_token = &s
}

// BotToken returns the value of the "bot_token" field in the mutation.
func (m *ChatUserMutation) BotToken() (r string, exists bool) {
	v := m.bot_token
	if v == nil {
		return
	}
	return *v, true
}

// OldBotToken returns the old "bot_token" field's value of the ChatUser entity.
// If the ChatUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatUserMutation) OldBotToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBotToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBotToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBotToken: %w", err)
	}
	return oldValue.BotToken, nil
}

// ResetBotToken resets all changes to the "bot_token" field.
func (m *ChatUserMutation) ResetBotToken() {
	m.bot_token = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ChatUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ChatUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ChatUser entity.
// If the ChatUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ChatUserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ChatUserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ChatUserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ChatUser entity.
// If the ChatUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatUserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ChatUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user_id" field.
func (m *ChatUserMutation) SetUserID(s string) {
	m.user = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ChatUserMutation) UserID() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ChatUser entity.
// If the ChatUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatUserMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ChatUserMutation) ResetUserID() {
	m.user = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *ChatUserMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ChatUserMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ChatUserMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ChatUserMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Op returns the operation name.
func (m *ChatUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ChatUser).
func (m *ChatUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatUserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.token != nil {
		fields = append(fields, chatuser.FieldToken)
	}
	if m.refresh != nil {
		fields = append(fields, chatuser.FieldRefresh)
	}
	if m.expiry != nil {
		fields = append(fields, chatuser.FieldExpiry)
	}
	if m.bot_token != nil {
		fields = append(fields, chatuser.FieldBotToken)
	}
	if m.created_at != nil {
		fields = append(fields, chatuser.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, chatuser.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, chatuser.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chatuser.FieldToken:
		return m.Token()
	case chatuser.FieldRefresh:
		return m.Refresh()
	case chatuser.FieldExpiry:
		return m.Expiry()
	case chatuser.FieldBotToken:
		return m.BotToken()
	case chatuser.FieldCreatedAt:
		return m.CreatedAt()
	case chatuser.FieldUpdatedAt:
		return m.UpdatedAt()
	case chatuser.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chatuser.FieldToken:
		return m.OldToken(ctx)
	case chatuser.FieldRefresh:
		return m.OldRefresh(ctx)
	case chatuser.FieldExpiry:
		return m.OldExpiry(ctx)
	case chatuser.FieldBotToken:
		return m.OldBotToken(ctx)
	case chatuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case chatuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case chatuser.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown ChatUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chatuser.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case chatuser.FieldRefresh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefresh(v)
		return nil
	case chatuser.FieldExpiry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiry(v)
		return nil
	case chatuser.FieldBotToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBotToken(v)
		return nil
	case chatuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case chatuser.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case chatuser.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown ChatUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ChatUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ChatUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatUserMutation) ResetField(name string) error {
	switch name {
	case chatuser.FieldToken:
		m.ResetToken()
		return nil
	case chatuser.FieldRefresh:
		m.ResetRefresh()
		return nil
	case chatuser.FieldExpiry:
		m.ResetExpiry()
		return nil
	case chatuser.FieldBotToken:
		m.ResetBotToken()
		return nil
	case chatuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case chatuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case chatuser.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown ChatUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, chatuser.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chatuser.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, chatuser.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatUserMutation) EdgeCleared(name string) bool {
	switch name {
	case chatuser.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatUserMutation) ClearEdge(name string) error {
	switch name {
	case chatuser.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown ChatUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatUserMutation) ResetEdge(name string) error {
	switch name {
	case chatuser.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown ChatUser edge %s", name)
}

// DeploymentMutation represents an operation that mutates the Deployment nodes in the graph.
type DeploymentMutation struct {
	config
	op            Op
	typ           string
	id            *int
	uid           *int64
	adduid        *int64
	_type         *deployment.Type
	ref           *string
	sha           *string
	env           *string
	status        *deployment.Status
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	repo          *string
	clearedrepo   bool
	done          bool
	oldValue      func(context.Context) (*Deployment, error)
	predicates    []predicate.Deployment
}

var _ ent.Mutation = (*DeploymentMutation)(nil)

// deploymentOption allows management of the mutation configuration using functional options.
type deploymentOption func(*DeploymentMutation)

// newDeploymentMutation creates new mutation for the Deployment entity.
func newDeploymentMutation(c config, op Op, opts ...deploymentOption) *DeploymentMutation {
	m := &DeploymentMutation{
		config:        c,
		op:            op,
		typ:           TypeDeployment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeploymentID sets the ID field of the mutation.
func withDeploymentID(id int) deploymentOption {
	return func(m *DeploymentMutation) {
		var (
			err   error
			once  sync.Once
			value *Deployment
		)
		m.oldValue = func(ctx context.Context) (*Deployment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Deployment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDeployment sets the old Deployment of the mutation.
func withDeployment(node *Deployment) deploymentOption {
	return func(m *DeploymentMutation) {
		m.oldValue = func(context.Context) (*Deployment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeploymentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeploymentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *DeploymentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUID sets the "uid" field.
func (m *DeploymentMutation) SetUID(i int64) {
	m.uid = &i
	m.adduid = nil
}

// UID returns the value of the "uid" field in the mutation.
func (m *DeploymentMutation) UID() (r int64, exists bool) {
	v := m.uid
	if v == nil {
		return
	}
	return *v, true
}

// OldUID returns the old "uid" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldUID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUID: %w", err)
	}
	return oldValue.UID, nil
}

// AddUID adds i to the "uid" field.
func (m *DeploymentMutation) AddUID(i int64) {
	if m.adduid != nil {
		*m.adduid += i
	} else {
		m.adduid = &i
	}
}

// AddedUID returns the value that was added to the "uid" field in this mutation.
func (m *DeploymentMutation) AddedUID() (r int64, exists bool) {
	v := m.adduid
	if v == nil {
		return
	}
	return *v, true
}

// ClearUID clears the value of the "uid" field.
func (m *DeploymentMutation) ClearUID() {
	m.uid = nil
	m.adduid = nil
	m.clearedFields[deployment.FieldUID] = struct{}{}
}

// UIDCleared returns if the "uid" field was cleared in this mutation.
func (m *DeploymentMutation) UIDCleared() bool {
	_, ok := m.clearedFields[deployment.FieldUID]
	return ok
}

// ResetUID resets all changes to the "uid" field.
func (m *DeploymentMutation) ResetUID() {
	m.uid = nil
	m.adduid = nil
	delete(m.clearedFields, deployment.FieldUID)
}

// SetType sets the "type" field.
func (m *DeploymentMutation) SetType(d deployment.Type) {
	m._type = &d
}

// GetType returns the value of the "type" field in the mutation.
func (m *DeploymentMutation) GetType() (r deployment.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldType(ctx context.Context) (v deployment.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *DeploymentMutation) ResetType() {
	m._type = nil
}

// SetRef sets the "ref" field.
func (m *DeploymentMutation) SetRef(s string) {
	m.ref = &s
}

// Ref returns the value of the "ref" field in the mutation.
func (m *DeploymentMutation) Ref() (r string, exists bool) {
	v := m.ref
	if v == nil {
		return
	}
	return *v, true
}

// OldRef returns the old "ref" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldRef(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRef is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRef requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRef: %w", err)
	}
	return oldValue.Ref, nil
}

// ResetRef resets all changes to the "ref" field.
func (m *DeploymentMutation) ResetRef() {
	m.ref = nil
}

// SetSha sets the "sha" field.
func (m *DeploymentMutation) SetSha(s string) {
	m.sha = &s
}

// Sha returns the value of the "sha" field in the mutation.
func (m *DeploymentMutation) Sha() (r string, exists bool) {
	v := m.sha
	if v == nil {
		return
	}
	return *v, true
}

// OldSha returns the old "sha" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldSha(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSha is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSha requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSha: %w", err)
	}
	return oldValue.Sha, nil
}

// ClearSha clears the value of the "sha" field.
func (m *DeploymentMutation) ClearSha() {
	m.sha = nil
	m.clearedFields[deployment.FieldSha] = struct{}{}
}

// ShaCleared returns if the "sha" field was cleared in this mutation.
func (m *DeploymentMutation) ShaCleared() bool {
	_, ok := m.clearedFields[deployment.FieldSha]
	return ok
}

// ResetSha resets all changes to the "sha" field.
func (m *DeploymentMutation) ResetSha() {
	m.sha = nil
	delete(m.clearedFields, deployment.FieldSha)
}

// SetEnv sets the "env" field.
func (m *DeploymentMutation) SetEnv(s string) {
	m.env = &s
}

// Env returns the value of the "env" field in the mutation.
func (m *DeploymentMutation) Env() (r string, exists bool) {
	v := m.env
	if v == nil {
		return
	}
	return *v, true
}

// OldEnv returns the old "env" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldEnv(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEnv is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEnv requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnv: %w", err)
	}
	return oldValue.Env, nil
}

// ResetEnv resets all changes to the "env" field.
func (m *DeploymentMutation) ResetEnv() {
	m.env = nil
}

// SetStatus sets the "status" field.
func (m *DeploymentMutation) SetStatus(d deployment.Status) {
	m.status = &d
}

// Status returns the value of the "status" field in the mutation.
func (m *DeploymentMutation) Status() (r deployment.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldStatus(ctx context.Context) (v deployment.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *DeploymentMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *DeploymentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DeploymentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DeploymentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DeploymentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DeploymentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DeploymentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user_id" field.
func (m *DeploymentMutation) SetUserID(s string) {
	m.user = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *DeploymentMutation) UserID() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *DeploymentMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[deployment.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *DeploymentMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[deployment.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *DeploymentMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, deployment.FieldUserID)
}

// SetRepoID sets the "repo_id" field.
func (m *DeploymentMutation) SetRepoID(s string) {
	m.repo = &s
}

// RepoID returns the value of the "repo_id" field in the mutation.
func (m *DeploymentMutation) RepoID() (r string, exists bool) {
	v := m.repo
	if v == nil {
		return
	}
	return *v, true
}

// OldRepoID returns the old "repo_id" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldRepoID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRepoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRepoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepoID: %w", err)
	}
	return oldValue.RepoID, nil
}

// ClearRepoID clears the value of the "repo_id" field.
func (m *DeploymentMutation) ClearRepoID() {
	m.repo = nil
	m.clearedFields[deployment.FieldRepoID] = struct{}{}
}

// RepoIDCleared returns if the "repo_id" field was cleared in this mutation.
func (m *DeploymentMutation) RepoIDCleared() bool {
	_, ok := m.clearedFields[deployment.FieldRepoID]
	return ok
}

// ResetRepoID resets all changes to the "repo_id" field.
func (m *DeploymentMutation) ResetRepoID() {
	m.repo = nil
	delete(m.clearedFields, deployment.FieldRepoID)
}

// ClearUser clears the "user" edge to the User entity.
func (m *DeploymentMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *DeploymentMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *DeploymentMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *DeploymentMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearRepo clears the "repo" edge to the Repo entity.
func (m *DeploymentMutation) ClearRepo() {
	m.clearedrepo = true
}

// RepoCleared reports if the "repo" edge to the Repo entity was cleared.
func (m *DeploymentMutation) RepoCleared() bool {
	return m.RepoIDCleared() || m.clearedrepo
}

// RepoIDs returns the "repo" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RepoID instead. It exists only for internal usage by the builders.
func (m *DeploymentMutation) RepoIDs() (ids []string) {
	if id := m.repo; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRepo resets all changes to the "repo" edge.
func (m *DeploymentMutation) ResetRepo() {
	m.repo = nil
	m.clearedrepo = false
}

// Op returns the operation name.
func (m *DeploymentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Deployment).
func (m *DeploymentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeploymentMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.uid != nil {
		fields = append(fields, deployment.FieldUID)
	}
	if m._type != nil {
		fields = append(fields, deployment.FieldType)
	}
	if m.ref != nil {
		fields = append(fields, deployment.FieldRef)
	}
	if m.sha != nil {
		fields = append(fields, deployment.FieldSha)
	}
	if m.env != nil {
		fields = append(fields, deployment.FieldEnv)
	}
	if m.status != nil {
		fields = append(fields, deployment.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, deployment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, deployment.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, deployment.FieldUserID)
	}
	if m.repo != nil {
		fields = append(fields, deployment.FieldRepoID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeploymentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case deployment.FieldUID:
		return m.UID()
	case deployment.FieldType:
		return m.GetType()
	case deployment.FieldRef:
		return m.Ref()
	case deployment.FieldSha:
		return m.Sha()
	case deployment.FieldEnv:
		return m.Env()
	case deployment.FieldStatus:
		return m.Status()
	case deployment.FieldCreatedAt:
		return m.CreatedAt()
	case deployment.FieldUpdatedAt:
		return m.UpdatedAt()
	case deployment.FieldUserID:
		return m.UserID()
	case deployment.FieldRepoID:
		return m.RepoID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeploymentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case deployment.FieldUID:
		return m.OldUID(ctx)
	case deployment.FieldType:
		return m.OldType(ctx)
	case deployment.FieldRef:
		return m.OldRef(ctx)
	case deployment.FieldSha:
		return m.OldSha(ctx)
	case deployment.FieldEnv:
		return m.OldEnv(ctx)
	case deployment.FieldStatus:
		return m.OldStatus(ctx)
	case deployment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case deployment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case deployment.FieldUserID:
		return m.OldUserID(ctx)
	case deployment.FieldRepoID:
		return m.OldRepoID(ctx)
	}
	return nil, fmt.Errorf("unknown Deployment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeploymentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case deployment.FieldUID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUID(v)
		return nil
	case deployment.FieldType:
		v, ok := value.(deployment.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case deployment.FieldRef:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRef(v)
		return nil
	case deployment.FieldSha:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSha(v)
		return nil
	case deployment.FieldEnv:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnv(v)
		return nil
	case deployment.FieldStatus:
		v, ok := value.(deployment.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case deployment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case deployment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case deployment.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case deployment.FieldRepoID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepoID(v)
		return nil
	}
	return fmt.Errorf("unknown Deployment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeploymentMutation) AddedFields() []string {
	var fields []string
	if m.adduid != nil {
		fields = append(fields, deployment.FieldUID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeploymentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case deployment.FieldUID:
		return m.AddedUID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeploymentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case deployment.FieldUID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUID(v)
		return nil
	}
	return fmt.Errorf("unknown Deployment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeploymentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(deployment.FieldUID) {
		fields = append(fields, deployment.FieldUID)
	}
	if m.FieldCleared(deployment.FieldSha) {
		fields = append(fields, deployment.FieldSha)
	}
	if m.FieldCleared(deployment.FieldUserID) {
		fields = append(fields, deployment.FieldUserID)
	}
	if m.FieldCleared(deployment.FieldRepoID) {
		fields = append(fields, deployment.FieldRepoID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeploymentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeploymentMutation) ClearField(name string) error {
	switch name {
	case deployment.FieldUID:
		m.ClearUID()
		return nil
	case deployment.FieldSha:
		m.ClearSha()
		return nil
	case deployment.FieldUserID:
		m.ClearUserID()
		return nil
	case deployment.FieldRepoID:
		m.ClearRepoID()
		return nil
	}
	return fmt.Errorf("unknown Deployment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeploymentMutation) ResetField(name string) error {
	switch name {
	case deployment.FieldUID:
		m.ResetUID()
		return nil
	case deployment.FieldType:
		m.ResetType()
		return nil
	case deployment.FieldRef:
		m.ResetRef()
		return nil
	case deployment.FieldSha:
		m.ResetSha()
		return nil
	case deployment.FieldEnv:
		m.ResetEnv()
		return nil
	case deployment.FieldStatus:
		m.ResetStatus()
		return nil
	case deployment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case deployment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case deployment.FieldUserID:
		m.ResetUserID()
		return nil
	case deployment.FieldRepoID:
		m.ResetRepoID()
		return nil
	}
	return fmt.Errorf("unknown Deployment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeploymentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, deployment.EdgeUser)
	}
	if m.repo != nil {
		edges = append(edges, deployment.EdgeRepo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeploymentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case deployment.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case deployment.EdgeRepo:
		if id := m.repo; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeploymentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeploymentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeploymentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, deployment.EdgeUser)
	}
	if m.clearedrepo {
		edges = append(edges, deployment.EdgeRepo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeploymentMutation) EdgeCleared(name string) bool {
	switch name {
	case deployment.EdgeUser:
		return m.cleareduser
	case deployment.EdgeRepo:
		return m.clearedrepo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeploymentMutation) ClearEdge(name string) error {
	switch name {
	case deployment.EdgeUser:
		m.ClearUser()
		return nil
	case deployment.EdgeRepo:
		m.ClearRepo()
		return nil
	}
	return fmt.Errorf("unknown Deployment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeploymentMutation) ResetEdge(name string) error {
	switch name {
	case deployment.EdgeUser:
		m.ResetUser()
		return nil
	case deployment.EdgeRepo:
		m.ResetRepo()
		return nil
	}
	return fmt.Errorf("unknown Deployment edge %s", name)
}

// PermMutation represents an operation that mutates the Perm nodes in the graph.
type PermMutation struct {
	config
	op            Op
	typ           string
	id            *int
	repo_perm     *perm.RepoPerm
	synced_at     *time.Time
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	repo          *string
	clearedrepo   bool
	done          bool
	oldValue      func(context.Context) (*Perm, error)
	predicates    []predicate.Perm
}

var _ ent.Mutation = (*PermMutation)(nil)

// permOption allows management of the mutation configuration using functional options.
type permOption func(*PermMutation)

// newPermMutation creates new mutation for the Perm entity.
func newPermMutation(c config, op Op, opts ...permOption) *PermMutation {
	m := &PermMutation{
		config:        c,
		op:            op,
		typ:           TypePerm,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPermID sets the ID field of the mutation.
func withPermID(id int) permOption {
	return func(m *PermMutation) {
		var (
			err   error
			once  sync.Once
			value *Perm
		)
		m.oldValue = func(ctx context.Context) (*Perm, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Perm.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPerm sets the old Perm of the mutation.
func withPerm(node *Perm) permOption {
	return func(m *PermMutation) {
		m.oldValue = func(context.Context) (*Perm, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PermMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PermMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *PermMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRepoPerm sets the "repo_perm" field.
func (m *PermMutation) SetRepoPerm(pp perm.RepoPerm) {
	m.repo_perm = &pp
}

// RepoPerm returns the value of the "repo_perm" field in the mutation.
func (m *PermMutation) RepoPerm() (r perm.RepoPerm, exists bool) {
	v := m.repo_perm
	if v == nil {
		return
	}
	return *v, true
}

// OldRepoPerm returns the old "repo_perm" field's value of the Perm entity.
// If the Perm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermMutation) OldRepoPerm(ctx context.Context) (v perm.RepoPerm, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRepoPerm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRepoPerm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepoPerm: %w", err)
	}
	return oldValue.RepoPerm, nil
}

// ResetRepoPerm resets all changes to the "repo_perm" field.
func (m *PermMutation) ResetRepoPerm() {
	m.repo_perm = nil
}

// SetSyncedAt sets the "synced_at" field.
func (m *PermMutation) SetSyncedAt(t time.Time) {
	m.synced_at = &t
}

// SyncedAt returns the value of the "synced_at" field in the mutation.
func (m *PermMutation) SyncedAt() (r time.Time, exists bool) {
	v := m.synced_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSyncedAt returns the old "synced_at" field's value of the Perm entity.
// If the Perm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermMutation) OldSyncedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSyncedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSyncedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSyncedAt: %w", err)
	}
	return oldValue.SyncedAt, nil
}

// ClearSyncedAt clears the value of the "synced_at" field.
func (m *PermMutation) ClearSyncedAt() {
	m.synced_at = nil
	m.clearedFields[perm.FieldSyncedAt] = struct{}{}
}

// SyncedAtCleared returns if the "synced_at" field was cleared in this mutation.
func (m *PermMutation) SyncedAtCleared() bool {
	_, ok := m.clearedFields[perm.FieldSyncedAt]
	return ok
}

// ResetSyncedAt resets all changes to the "synced_at" field.
func (m *PermMutation) ResetSyncedAt() {
	m.synced_at = nil
	delete(m.clearedFields, perm.FieldSyncedAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *PermMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PermMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Perm entity.
// If the Perm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PermMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PermMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PermMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Perm entity.
// If the Perm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PermMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user_id" field.
func (m *PermMutation) SetUserID(s string) {
	m.user = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *PermMutation) UserID() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Perm entity.
// If the Perm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *PermMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[perm.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *PermMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[perm.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *PermMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, perm.FieldUserID)
}

// SetRepoID sets the "repo_id" field.
func (m *PermMutation) SetRepoID(s string) {
	m.repo = &s
}

// RepoID returns the value of the "repo_id" field in the mutation.
func (m *PermMutation) RepoID() (r string, exists bool) {
	v := m.repo
	if v == nil {
		return
	}
	return *v, true
}

// OldRepoID returns the old "repo_id" field's value of the Perm entity.
// If the Perm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermMutation) OldRepoID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRepoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRepoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepoID: %w", err)
	}
	return oldValue.RepoID, nil
}

// ClearRepoID clears the value of the "repo_id" field.
func (m *PermMutation) ClearRepoID() {
	m.repo = nil
	m.clearedFields[perm.FieldRepoID] = struct{}{}
}

// RepoIDCleared returns if the "repo_id" field was cleared in this mutation.
func (m *PermMutation) RepoIDCleared() bool {
	_, ok := m.clearedFields[perm.FieldRepoID]
	return ok
}

// ResetRepoID resets all changes to the "repo_id" field.
func (m *PermMutation) ResetRepoID() {
	m.repo = nil
	delete(m.clearedFields, perm.FieldRepoID)
}

// ClearUser clears the "user" edge to the User entity.
func (m *PermMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *PermMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PermMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *PermMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearRepo clears the "repo" edge to the Repo entity.
func (m *PermMutation) ClearRepo() {
	m.clearedrepo = true
}

// RepoCleared reports if the "repo" edge to the Repo entity was cleared.
func (m *PermMutation) RepoCleared() bool {
	return m.RepoIDCleared() || m.clearedrepo
}

// RepoIDs returns the "repo" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RepoID instead. It exists only for internal usage by the builders.
func (m *PermMutation) RepoIDs() (ids []string) {
	if id := m.repo; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRepo resets all changes to the "repo" edge.
func (m *PermMutation) ResetRepo() {
	m.repo = nil
	m.clearedrepo = false
}

// Op returns the operation name.
func (m *PermMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Perm).
func (m *PermMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PermMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.repo_perm != nil {
		fields = append(fields, perm.FieldRepoPerm)
	}
	if m.synced_at != nil {
		fields = append(fields, perm.FieldSyncedAt)
	}
	if m.created_at != nil {
		fields = append(fields, perm.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, perm.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, perm.FieldUserID)
	}
	if m.repo != nil {
		fields = append(fields, perm.FieldRepoID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PermMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case perm.FieldRepoPerm:
		return m.RepoPerm()
	case perm.FieldSyncedAt:
		return m.SyncedAt()
	case perm.FieldCreatedAt:
		return m.CreatedAt()
	case perm.FieldUpdatedAt:
		return m.UpdatedAt()
	case perm.FieldUserID:
		return m.UserID()
	case perm.FieldRepoID:
		return m.RepoID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PermMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case perm.FieldRepoPerm:
		return m.OldRepoPerm(ctx)
	case perm.FieldSyncedAt:
		return m.OldSyncedAt(ctx)
	case perm.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case perm.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case perm.FieldUserID:
		return m.OldUserID(ctx)
	case perm.FieldRepoID:
		return m.OldRepoID(ctx)
	}
	return nil, fmt.Errorf("unknown Perm field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermMutation) SetField(name string, value ent.Value) error {
	switch name {
	case perm.FieldRepoPerm:
		v, ok := value.(perm.RepoPerm)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepoPerm(v)
		return nil
	case perm.FieldSyncedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSyncedAt(v)
		return nil
	case perm.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case perm.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case perm.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case perm.FieldRepoID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepoID(v)
		return nil
	}
	return fmt.Errorf("unknown Perm field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PermMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PermMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Perm numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PermMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(perm.FieldSyncedAt) {
		fields = append(fields, perm.FieldSyncedAt)
	}
	if m.FieldCleared(perm.FieldUserID) {
		fields = append(fields, perm.FieldUserID)
	}
	if m.FieldCleared(perm.FieldRepoID) {
		fields = append(fields, perm.FieldRepoID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PermMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PermMutation) ClearField(name string) error {
	switch name {
	case perm.FieldSyncedAt:
		m.ClearSyncedAt()
		return nil
	case perm.FieldUserID:
		m.ClearUserID()
		return nil
	case perm.FieldRepoID:
		m.ClearRepoID()
		return nil
	}
	return fmt.Errorf("unknown Perm nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PermMutation) ResetField(name string) error {
	switch name {
	case perm.FieldRepoPerm:
		m.ResetRepoPerm()
		return nil
	case perm.FieldSyncedAt:
		m.ResetSyncedAt()
		return nil
	case perm.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case perm.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case perm.FieldUserID:
		m.ResetUserID()
		return nil
	case perm.FieldRepoID:
		m.ResetRepoID()
		return nil
	}
	return fmt.Errorf("unknown Perm field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PermMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, perm.EdgeUser)
	}
	if m.repo != nil {
		edges = append(edges, perm.EdgeRepo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PermMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case perm.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case perm.EdgeRepo:
		if id := m.repo; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PermMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PermMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PermMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, perm.EdgeUser)
	}
	if m.clearedrepo {
		edges = append(edges, perm.EdgeRepo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PermMutation) EdgeCleared(name string) bool {
	switch name {
	case perm.EdgeUser:
		return m.cleareduser
	case perm.EdgeRepo:
		return m.clearedrepo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PermMutation) ClearEdge(name string) error {
	switch name {
	case perm.EdgeUser:
		m.ClearUser()
		return nil
	case perm.EdgeRepo:
		m.ClearRepo()
		return nil
	}
	return fmt.Errorf("unknown Perm unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PermMutation) ResetEdge(name string) error {
	switch name {
	case perm.EdgeUser:
		m.ResetUser()
		return nil
	case perm.EdgeRepo:
		m.ResetRepo()
		return nil
	}
	return fmt.Errorf("unknown Perm edge %s", name)
}

// RepoMutation represents an operation that mutates the Repo nodes in the graph.
type RepoMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	namespace          *string
	name               *string
	description        *string
	config_path        *string
	active             *bool
	webhook_id         *int64
	addwebhook_id      *int64
	synced_at          *time.Time
	created_at         *time.Time
	updated_at         *time.Time
	latest_deployed_at *time.Time
	clearedFields      map[string]struct{}
	perms              map[int]struct{}
	removedperms       map[int]struct{}
	clearedperms       bool
	deployments        map[int]struct{}
	removeddeployments map[int]struct{}
	cleareddeployments bool
	done               bool
	oldValue           func(context.Context) (*Repo, error)
	predicates         []predicate.Repo
}

var _ ent.Mutation = (*RepoMutation)(nil)

// repoOption allows management of the mutation configuration using functional options.
type repoOption func(*RepoMutation)

// newRepoMutation creates new mutation for the Repo entity.
func newRepoMutation(c config, op Op, opts ...repoOption) *RepoMutation {
	m := &RepoMutation{
		config:        c,
		op:            op,
		typ:           TypeRepo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRepoID sets the ID field of the mutation.
func withRepoID(id string) repoOption {
	return func(m *RepoMutation) {
		var (
			err   error
			once  sync.Once
			value *Repo
		)
		m.oldValue = func(ctx context.Context) (*Repo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Repo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRepo sets the old Repo of the mutation.
func withRepo(node *Repo) repoOption {
	return func(m *RepoMutation) {
		m.oldValue = func(context.Context) (*Repo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RepoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RepoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Repo entities.
func (m *RepoMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *RepoMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNamespace sets the "namespace" field.
func (m *RepoMutation) SetNamespace(s string) {
	m.namespace = &s
}

// Namespace returns the value of the "namespace" field in the mutation.
func (m *RepoMutation) Namespace() (r string, exists bool) {
	v := m.namespace
	if v == nil {
		return
	}
	return *v, true
}

// OldNamespace returns the old "namespace" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldNamespace(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNamespace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNamespace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNamespace: %w", err)
	}
	return oldValue.Namespace, nil
}

// ResetNamespace resets all changes to the "namespace" field.
func (m *RepoMutation) ResetNamespace() {
	m.namespace = nil
}

// SetName sets the "name" field.
func (m *RepoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RepoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RepoMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *RepoMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *RepoMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *RepoMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[repo.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *RepoMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[repo.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *RepoMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, repo.FieldDescription)
}

// SetConfigPath sets the "config_path" field.
func (m *RepoMutation) SetConfigPath(s string) {
	m.config_path = &s
}

// ConfigPath returns the value of the "config_path" field in the mutation.
func (m *RepoMutation) ConfigPath() (r string, exists bool) {
	v := m.config_path
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigPath returns the old "config_path" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldConfigPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConfigPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConfigPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigPath: %w", err)
	}
	return oldValue.ConfigPath, nil
}

// ResetConfigPath resets all changes to the "config_path" field.
func (m *RepoMutation) ResetConfigPath() {
	m.config_path = nil
}

// SetActive sets the "active" field.
func (m *RepoMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *RepoMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *RepoMutation) ResetActive() {
	m.active = nil
}

// SetWebhookID sets the "webhook_id" field.
func (m *RepoMutation) SetWebhookID(i int64) {
	m.webhook_id = &i
	m.addwebhook_id = nil
}

// WebhookID returns the value of the "webhook_id" field in the mutation.
func (m *RepoMutation) WebhookID() (r int64, exists bool) {
	v := m.webhook_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWebhookID returns the old "webhook_id" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldWebhookID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWebhookID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWebhookID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebhookID: %w", err)
	}
	return oldValue.WebhookID, nil
}

// AddWebhookID adds i to the "webhook_id" field.
func (m *RepoMutation) AddWebhookID(i int64) {
	if m.addwebhook_id != nil {
		*m.addwebhook_id += i
	} else {
		m.addwebhook_id = &i
	}
}

// AddedWebhookID returns the value that was added to the "webhook_id" field in this mutation.
func (m *RepoMutation) AddedWebhookID() (r int64, exists bool) {
	v := m.addwebhook_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearWebhookID clears the value of the "webhook_id" field.
func (m *RepoMutation) ClearWebhookID() {
	m.webhook_id = nil
	m.addwebhook_id = nil
	m.clearedFields[repo.FieldWebhookID] = struct{}{}
}

// WebhookIDCleared returns if the "webhook_id" field was cleared in this mutation.
func (m *RepoMutation) WebhookIDCleared() bool {
	_, ok := m.clearedFields[repo.FieldWebhookID]
	return ok
}

// ResetWebhookID resets all changes to the "webhook_id" field.
func (m *RepoMutation) ResetWebhookID() {
	m.webhook_id = nil
	m.addwebhook_id = nil
	delete(m.clearedFields, repo.FieldWebhookID)
}

// SetSyncedAt sets the "synced_at" field.
func (m *RepoMutation) SetSyncedAt(t time.Time) {
	m.synced_at = &t
}

// SyncedAt returns the value of the "synced_at" field in the mutation.
func (m *RepoMutation) SyncedAt() (r time.Time, exists bool) {
	v := m.synced_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSyncedAt returns the old "synced_at" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldSyncedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSyncedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSyncedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSyncedAt: %w", err)
	}
	return oldValue.SyncedAt, nil
}

// ClearSyncedAt clears the value of the "synced_at" field.
func (m *RepoMutation) ClearSyncedAt() {
	m.synced_at = nil
	m.clearedFields[repo.FieldSyncedAt] = struct{}{}
}

// SyncedAtCleared returns if the "synced_at" field was cleared in this mutation.
func (m *RepoMutation) SyncedAtCleared() bool {
	_, ok := m.clearedFields[repo.FieldSyncedAt]
	return ok
}

// ResetSyncedAt resets all changes to the "synced_at" field.
func (m *RepoMutation) ResetSyncedAt() {
	m.synced_at = nil
	delete(m.clearedFields, repo.FieldSyncedAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *RepoMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RepoMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RepoMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RepoMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RepoMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RepoMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetLatestDeployedAt sets the "latest_deployed_at" field.
func (m *RepoMutation) SetLatestDeployedAt(t time.Time) {
	m.latest_deployed_at = &t
}

// LatestDeployedAt returns the value of the "latest_deployed_at" field in the mutation.
func (m *RepoMutation) LatestDeployedAt() (r time.Time, exists bool) {
	v := m.latest_deployed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLatestDeployedAt returns the old "latest_deployed_at" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldLatestDeployedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLatestDeployedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLatestDeployedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatestDeployedAt: %w", err)
	}
	return oldValue.LatestDeployedAt, nil
}

// ClearLatestDeployedAt clears the value of the "latest_deployed_at" field.
func (m *RepoMutation) ClearLatestDeployedAt() {
	m.latest_deployed_at = nil
	m.clearedFields[repo.FieldLatestDeployedAt] = struct{}{}
}

// LatestDeployedAtCleared returns if the "latest_deployed_at" field was cleared in this mutation.
func (m *RepoMutation) LatestDeployedAtCleared() bool {
	_, ok := m.clearedFields[repo.FieldLatestDeployedAt]
	return ok
}

// ResetLatestDeployedAt resets all changes to the "latest_deployed_at" field.
func (m *RepoMutation) ResetLatestDeployedAt() {
	m.latest_deployed_at = nil
	delete(m.clearedFields, repo.FieldLatestDeployedAt)
}

// AddPermIDs adds the "perms" edge to the Perm entity by ids.
func (m *RepoMutation) AddPermIDs(ids ...int) {
	if m.perms == nil {
		m.perms = make(map[int]struct{})
	}
	for i := range ids {
		m.perms[ids[i]] = struct{}{}
	}
}

// ClearPerms clears the "perms" edge to the Perm entity.
func (m *RepoMutation) ClearPerms() {
	m.clearedperms = true
}

// PermsCleared reports if the "perms" edge to the Perm entity was cleared.
func (m *RepoMutation) PermsCleared() bool {
	return m.clearedperms
}

// RemovePermIDs removes the "perms" edge to the Perm entity by IDs.
func (m *RepoMutation) RemovePermIDs(ids ...int) {
	if m.removedperms == nil {
		m.removedperms = make(map[int]struct{})
	}
	for i := range ids {
		m.removedperms[ids[i]] = struct{}{}
	}
}

// RemovedPerms returns the removed IDs of the "perms" edge to the Perm entity.
func (m *RepoMutation) RemovedPermsIDs() (ids []int) {
	for id := range m.removedperms {
		ids = append(ids, id)
	}
	return
}

// PermsIDs returns the "perms" edge IDs in the mutation.
func (m *RepoMutation) PermsIDs() (ids []int) {
	for id := range m.perms {
		ids = append(ids, id)
	}
	return
}

// ResetPerms resets all changes to the "perms" edge.
func (m *RepoMutation) ResetPerms() {
	m.perms = nil
	m.clearedperms = false
	m.removedperms = nil
}

// AddDeploymentIDs adds the "deployments" edge to the Deployment entity by ids.
func (m *RepoMutation) AddDeploymentIDs(ids ...int) {
	if m.deployments == nil {
		m.deployments = make(map[int]struct{})
	}
	for i := range ids {
		m.deployments[ids[i]] = struct{}{}
	}
}

// ClearDeployments clears the "deployments" edge to the Deployment entity.
func (m *RepoMutation) ClearDeployments() {
	m.cleareddeployments = true
}

// DeploymentsCleared reports if the "deployments" edge to the Deployment entity was cleared.
func (m *RepoMutation) DeploymentsCleared() bool {
	return m.cleareddeployments
}

// RemoveDeploymentIDs removes the "deployments" edge to the Deployment entity by IDs.
func (m *RepoMutation) RemoveDeploymentIDs(ids ...int) {
	if m.removeddeployments == nil {
		m.removeddeployments = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddeployments[ids[i]] = struct{}{}
	}
}

// RemovedDeployments returns the removed IDs of the "deployments" edge to the Deployment entity.
func (m *RepoMutation) RemovedDeploymentsIDs() (ids []int) {
	for id := range m.removeddeployments {
		ids = append(ids, id)
	}
	return
}

// DeploymentsIDs returns the "deployments" edge IDs in the mutation.
func (m *RepoMutation) DeploymentsIDs() (ids []int) {
	for id := range m.deployments {
		ids = append(ids, id)
	}
	return
}

// ResetDeployments resets all changes to the "deployments" edge.
func (m *RepoMutation) ResetDeployments() {
	m.deployments = nil
	m.cleareddeployments = false
	m.removeddeployments = nil
}

// Op returns the operation name.
func (m *RepoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Repo).
func (m *RepoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RepoMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.namespace != nil {
		fields = append(fields, repo.FieldNamespace)
	}
	if m.name != nil {
		fields = append(fields, repo.FieldName)
	}
	if m.description != nil {
		fields = append(fields, repo.FieldDescription)
	}
	if m.config_path != nil {
		fields = append(fields, repo.FieldConfigPath)
	}
	if m.active != nil {
		fields = append(fields, repo.FieldActive)
	}
	if m.webhook_id != nil {
		fields = append(fields, repo.FieldWebhookID)
	}
	if m.synced_at != nil {
		fields = append(fields, repo.FieldSyncedAt)
	}
	if m.created_at != nil {
		fields = append(fields, repo.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, repo.FieldUpdatedAt)
	}
	if m.latest_deployed_at != nil {
		fields = append(fields, repo.FieldLatestDeployedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RepoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case repo.FieldNamespace:
		return m.Namespace()
	case repo.FieldName:
		return m.Name()
	case repo.FieldDescription:
		return m.Description()
	case repo.FieldConfigPath:
		return m.ConfigPath()
	case repo.FieldActive:
		return m.Active()
	case repo.FieldWebhookID:
		return m.WebhookID()
	case repo.FieldSyncedAt:
		return m.SyncedAt()
	case repo.FieldCreatedAt:
		return m.CreatedAt()
	case repo.FieldUpdatedAt:
		return m.UpdatedAt()
	case repo.FieldLatestDeployedAt:
		return m.LatestDeployedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RepoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case repo.FieldNamespace:
		return m.OldNamespace(ctx)
	case repo.FieldName:
		return m.OldName(ctx)
	case repo.FieldDescription:
		return m.OldDescription(ctx)
	case repo.FieldConfigPath:
		return m.OldConfigPath(ctx)
	case repo.FieldActive:
		return m.OldActive(ctx)
	case repo.FieldWebhookID:
		return m.OldWebhookID(ctx)
	case repo.FieldSyncedAt:
		return m.OldSyncedAt(ctx)
	case repo.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case repo.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case repo.FieldLatestDeployedAt:
		return m.OldLatestDeployedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Repo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case repo.FieldNamespace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNamespace(v)
		return nil
	case repo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case repo.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case repo.FieldConfigPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigPath(v)
		return nil
	case repo.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case repo.FieldWebhookID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebhookID(v)
		return nil
	case repo.FieldSyncedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSyncedAt(v)
		return nil
	case repo.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case repo.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case repo.FieldLatestDeployedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatestDeployedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Repo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RepoMutation) AddedFields() []string {
	var fields []string
	if m.addwebhook_id != nil {
		fields = append(fields, repo.FieldWebhookID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RepoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case repo.FieldWebhookID:
		return m.AddedWebhookID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case repo.FieldWebhookID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWebhookID(v)
		return nil
	}
	return fmt.Errorf("unknown Repo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RepoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(repo.FieldDescription) {
		fields = append(fields, repo.FieldDescription)
	}
	if m.FieldCleared(repo.FieldWebhookID) {
		fields = append(fields, repo.FieldWebhookID)
	}
	if m.FieldCleared(repo.FieldSyncedAt) {
		fields = append(fields, repo.FieldSyncedAt)
	}
	if m.FieldCleared(repo.FieldLatestDeployedAt) {
		fields = append(fields, repo.FieldLatestDeployedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RepoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RepoMutation) ClearField(name string) error {
	switch name {
	case repo.FieldDescription:
		m.ClearDescription()
		return nil
	case repo.FieldWebhookID:
		m.ClearWebhookID()
		return nil
	case repo.FieldSyncedAt:
		m.ClearSyncedAt()
		return nil
	case repo.FieldLatestDeployedAt:
		m.ClearLatestDeployedAt()
		return nil
	}
	return fmt.Errorf("unknown Repo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RepoMutation) ResetField(name string) error {
	switch name {
	case repo.FieldNamespace:
		m.ResetNamespace()
		return nil
	case repo.FieldName:
		m.ResetName()
		return nil
	case repo.FieldDescription:
		m.ResetDescription()
		return nil
	case repo.FieldConfigPath:
		m.ResetConfigPath()
		return nil
	case repo.FieldActive:
		m.ResetActive()
		return nil
	case repo.FieldWebhookID:
		m.ResetWebhookID()
		return nil
	case repo.FieldSyncedAt:
		m.ResetSyncedAt()
		return nil
	case repo.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case repo.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case repo.FieldLatestDeployedAt:
		m.ResetLatestDeployedAt()
		return nil
	}
	return fmt.Errorf("unknown Repo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RepoMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.perms != nil {
		edges = append(edges, repo.EdgePerms)
	}
	if m.deployments != nil {
		edges = append(edges, repo.EdgeDeployments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RepoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case repo.EdgePerms:
		ids := make([]ent.Value, 0, len(m.perms))
		for id := range m.perms {
			ids = append(ids, id)
		}
		return ids
	case repo.EdgeDeployments:
		ids := make([]ent.Value, 0, len(m.deployments))
		for id := range m.deployments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RepoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedperms != nil {
		edges = append(edges, repo.EdgePerms)
	}
	if m.removeddeployments != nil {
		edges = append(edges, repo.EdgeDeployments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RepoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case repo.EdgePerms:
		ids := make([]ent.Value, 0, len(m.removedperms))
		for id := range m.removedperms {
			ids = append(ids, id)
		}
		return ids
	case repo.EdgeDeployments:
		ids := make([]ent.Value, 0, len(m.removeddeployments))
		for id := range m.removeddeployments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RepoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedperms {
		edges = append(edges, repo.EdgePerms)
	}
	if m.cleareddeployments {
		edges = append(edges, repo.EdgeDeployments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RepoMutation) EdgeCleared(name string) bool {
	switch name {
	case repo.EdgePerms:
		return m.clearedperms
	case repo.EdgeDeployments:
		return m.cleareddeployments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RepoMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Repo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RepoMutation) ResetEdge(name string) error {
	switch name {
	case repo.EdgePerms:
		m.ResetPerms()
		return nil
	case repo.EdgeDeployments:
		m.ResetDeployments()
		return nil
	}
	return fmt.Errorf("unknown Repo edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	login              *string
	avatar             *string
	admin              *bool
	token              *string
	refresh            *string
	expiry             *time.Time
	hash               *string
	synced_at          *time.Time
	created_at         *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	chat_user          *string
	clearedchat_user   bool
	perms              map[int]struct{}
	removedperms       map[int]struct{}
	clearedperms       bool
	deployments        map[int]struct{}
	removeddeployments map[int]struct{}
	cleareddeployments bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetLogin sets the "login" field.
func (m *UserMutation) SetLogin(s string) {
	m.login = &s
}

// Login returns the value of the "login" field in the mutation.
func (m *UserMutation) Login() (r string, exists bool) {
	v := m.login
	if v == nil {
		return
	}
	return *v, true
}

// OldLogin returns the old "login" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLogin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogin: %w", err)
	}
	return oldValue.Login, nil
}

// ResetLogin resets all changes to the "login" field.
func (m *UserMutation) ResetLogin() {
	m.login = nil
}

// SetAvatar sets the "avatar" field.
func (m *UserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *UserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *UserMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[user.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *UserMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *UserMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, user.FieldAvatar)
}

// SetAdmin sets the "admin" field.
func (m *UserMutation) SetAdmin(b bool) {
	m.admin = &b
}

// Admin returns the value of the "admin" field in the mutation.
func (m *UserMutation) Admin() (r bool, exists bool) {
	v := m.admin
	if v == nil {
		return
	}
	return *v, true
}

// OldAdmin returns the old "admin" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAdmin(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAdmin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAdmin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdmin: %w", err)
	}
	return oldValue.Admin, nil
}

// ResetAdmin resets all changes to the "admin" field.
func (m *UserMutation) ResetAdmin() {
	m.admin = nil
}

// SetToken sets the "token" field.
func (m *UserMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *UserMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *UserMutation) ResetToken() {
	m.token = nil
}

// SetRefresh sets the "refresh" field.
func (m *UserMutation) SetRefresh(s string) {
	m.refresh = &s
}

// Refresh returns the value of the "refresh" field in the mutation.
func (m *UserMutation) Refresh() (r string, exists bool) {
	v := m.refresh
	if v == nil {
		return
	}
	return *v, true
}

// OldRefresh returns the old "refresh" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRefresh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRefresh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRefresh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefresh: %w", err)
	}
	return oldValue.Refresh, nil
}

// ResetRefresh resets all changes to the "refresh" field.
func (m *UserMutation) ResetRefresh() {
	m.refresh = nil
}

// SetExpiry sets the "expiry" field.
func (m *UserMutation) SetExpiry(t time.Time) {
	m.expiry = &t
}

// Expiry returns the value of the "expiry" field in the mutation.
func (m *UserMutation) Expiry() (r time.Time, exists bool) {
	v := m.expiry
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiry returns the old "expiry" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldExpiry(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExpiry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExpiry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiry: %w", err)
	}
	return oldValue.Expiry, nil
}

// ResetExpiry resets all changes to the "expiry" field.
func (m *UserMutation) ResetExpiry() {
	m.expiry = nil
}

// SetHash sets the "hash" field.
func (m *UserMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *UserMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *UserMutation) ResetHash() {
	m.hash = nil
}

// SetSyncedAt sets the "synced_at" field.
func (m *UserMutation) SetSyncedAt(t time.Time) {
	m.synced_at = &t
}

// SyncedAt returns the value of the "synced_at" field in the mutation.
func (m *UserMutation) SyncedAt() (r time.Time, exists bool) {
	v := m.synced_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSyncedAt returns the old "synced_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSyncedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSyncedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSyncedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSyncedAt: %w", err)
	}
	return oldValue.SyncedAt, nil
}

// ClearSyncedAt clears the value of the "synced_at" field.
func (m *UserMutation) ClearSyncedAt() {
	m.synced_at = nil
	m.clearedFields[user.FieldSyncedAt] = struct{}{}
}

// SyncedAtCleared returns if the "synced_at" field was cleared in this mutation.
func (m *UserMutation) SyncedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldSyncedAt]
	return ok
}

// ResetSyncedAt resets all changes to the "synced_at" field.
func (m *UserMutation) ResetSyncedAt() {
	m.synced_at = nil
	delete(m.clearedFields, user.FieldSyncedAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetChatUserID sets the "chat_user" edge to the ChatUser entity by id.
func (m *UserMutation) SetChatUserID(id string) {
	m.chat_user = &id
}

// ClearChatUser clears the "chat_user" edge to the ChatUser entity.
func (m *UserMutation) ClearChatUser() {
	m.clearedchat_user = true
}

// ChatUserCleared reports if the "chat_user" edge to the ChatUser entity was cleared.
func (m *UserMutation) ChatUserCleared() bool {
	return m.clearedchat_user
}

// ChatUserID returns the "chat_user" edge ID in the mutation.
func (m *UserMutation) ChatUserID() (id string, exists bool) {
	if m.chat_user != nil {
		return *m.chat_user, true
	}
	return
}

// ChatUserIDs returns the "chat_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChatUserID instead. It exists only for internal usage by the builders.
func (m *UserMutation) ChatUserIDs() (ids []string) {
	if id := m.chat_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChatUser resets all changes to the "chat_user" edge.
func (m *UserMutation) ResetChatUser() {
	m.chat_user = nil
	m.clearedchat_user = false
}

// AddPermIDs adds the "perms" edge to the Perm entity by ids.
func (m *UserMutation) AddPermIDs(ids ...int) {
	if m.perms == nil {
		m.perms = make(map[int]struct{})
	}
	for i := range ids {
		m.perms[ids[i]] = struct{}{}
	}
}

// ClearPerms clears the "perms" edge to the Perm entity.
func (m *UserMutation) ClearPerms() {
	m.clearedperms = true
}

// PermsCleared reports if the "perms" edge to the Perm entity was cleared.
func (m *UserMutation) PermsCleared() bool {
	return m.clearedperms
}

// RemovePermIDs removes the "perms" edge to the Perm entity by IDs.
func (m *UserMutation) RemovePermIDs(ids ...int) {
	if m.removedperms == nil {
		m.removedperms = make(map[int]struct{})
	}
	for i := range ids {
		m.removedperms[ids[i]] = struct{}{}
	}
}

// RemovedPerms returns the removed IDs of the "perms" edge to the Perm entity.
func (m *UserMutation) RemovedPermsIDs() (ids []int) {
	for id := range m.removedperms {
		ids = append(ids, id)
	}
	return
}

// PermsIDs returns the "perms" edge IDs in the mutation.
func (m *UserMutation) PermsIDs() (ids []int) {
	for id := range m.perms {
		ids = append(ids, id)
	}
	return
}

// ResetPerms resets all changes to the "perms" edge.
func (m *UserMutation) ResetPerms() {
	m.perms = nil
	m.clearedperms = false
	m.removedperms = nil
}

// AddDeploymentIDs adds the "deployments" edge to the Deployment entity by ids.
func (m *UserMutation) AddDeploymentIDs(ids ...int) {
	if m.deployments == nil {
		m.deployments = make(map[int]struct{})
	}
	for i := range ids {
		m.deployments[ids[i]] = struct{}{}
	}
}

// ClearDeployments clears the "deployments" edge to the Deployment entity.
func (m *UserMutation) ClearDeployments() {
	m.cleareddeployments = true
}

// DeploymentsCleared reports if the "deployments" edge to the Deployment entity was cleared.
func (m *UserMutation) DeploymentsCleared() bool {
	return m.cleareddeployments
}

// RemoveDeploymentIDs removes the "deployments" edge to the Deployment entity by IDs.
func (m *UserMutation) RemoveDeploymentIDs(ids ...int) {
	if m.removeddeployments == nil {
		m.removeddeployments = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddeployments[ids[i]] = struct{}{}
	}
}

// RemovedDeployments returns the removed IDs of the "deployments" edge to the Deployment entity.
func (m *UserMutation) RemovedDeploymentsIDs() (ids []int) {
	for id := range m.removeddeployments {
		ids = append(ids, id)
	}
	return
}

// DeploymentsIDs returns the "deployments" edge IDs in the mutation.
func (m *UserMutation) DeploymentsIDs() (ids []int) {
	for id := range m.deployments {
		ids = append(ids, id)
	}
	return
}

// ResetDeployments resets all changes to the "deployments" edge.
func (m *UserMutation) ResetDeployments() {
	m.deployments = nil
	m.cleareddeployments = false
	m.removeddeployments = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.login != nil {
		fields = append(fields, user.FieldLogin)
	}
	if m.avatar != nil {
		fields = append(fields, user.FieldAvatar)
	}
	if m.admin != nil {
		fields = append(fields, user.FieldAdmin)
	}
	if m.token != nil {
		fields = append(fields, user.FieldToken)
	}
	if m.refresh != nil {
		fields = append(fields, user.FieldRefresh)
	}
	if m.expiry != nil {
		fields = append(fields, user.FieldExpiry)
	}
	if m.hash != nil {
		fields = append(fields, user.FieldHash)
	}
	if m.synced_at != nil {
		fields = append(fields, user.FieldSyncedAt)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldLogin:
		return m.Login()
	case user.FieldAvatar:
		return m.Avatar()
	case user.FieldAdmin:
		return m.Admin()
	case user.FieldToken:
		return m.Token()
	case user.FieldRefresh:
		return m.Refresh()
	case user.FieldExpiry:
		return m.Expiry()
	case user.FieldHash:
		return m.Hash()
	case user.FieldSyncedAt:
		return m.SyncedAt()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldLogin:
		return m.OldLogin(ctx)
	case user.FieldAvatar:
		return m.OldAvatar(ctx)
	case user.FieldAdmin:
		return m.OldAdmin(ctx)
	case user.FieldToken:
		return m.OldToken(ctx)
	case user.FieldRefresh:
		return m.OldRefresh(ctx)
	case user.FieldExpiry:
		return m.OldExpiry(ctx)
	case user.FieldHash:
		return m.OldHash(ctx)
	case user.FieldSyncedAt:
		return m.OldSyncedAt(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldLogin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogin(v)
		return nil
	case user.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case user.FieldAdmin:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdmin(v)
		return nil
	case user.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case user.FieldRefresh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefresh(v)
		return nil
	case user.FieldExpiry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiry(v)
		return nil
	case user.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case user.FieldSyncedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSyncedAt(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldAvatar) {
		fields = append(fields, user.FieldAvatar)
	}
	if m.FieldCleared(user.FieldSyncedAt) {
		fields = append(fields, user.FieldSyncedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldAvatar:
		m.ClearAvatar()
		return nil
	case user.FieldSyncedAt:
		m.ClearSyncedAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldLogin:
		m.ResetLogin()
		return nil
	case user.FieldAvatar:
		m.ResetAvatar()
		return nil
	case user.FieldAdmin:
		m.ResetAdmin()
		return nil
	case user.FieldToken:
		m.ResetToken()
		return nil
	case user.FieldRefresh:
		m.ResetRefresh()
		return nil
	case user.FieldExpiry:
		m.ResetExpiry()
		return nil
	case user.FieldHash:
		m.ResetHash()
		return nil
	case user.FieldSyncedAt:
		m.ResetSyncedAt()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.chat_user != nil {
		edges = append(edges, user.EdgeChatUser)
	}
	if m.perms != nil {
		edges = append(edges, user.EdgePerms)
	}
	if m.deployments != nil {
		edges = append(edges, user.EdgeDeployments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeChatUser:
		if id := m.chat_user; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgePerms:
		ids := make([]ent.Value, 0, len(m.perms))
		for id := range m.perms {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDeployments:
		ids := make([]ent.Value, 0, len(m.deployments))
		for id := range m.deployments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedperms != nil {
		edges = append(edges, user.EdgePerms)
	}
	if m.removeddeployments != nil {
		edges = append(edges, user.EdgeDeployments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePerms:
		ids := make([]ent.Value, 0, len(m.removedperms))
		for id := range m.removedperms {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDeployments:
		ids := make([]ent.Value, 0, len(m.removeddeployments))
		for id := range m.removeddeployments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedchat_user {
		edges = append(edges, user.EdgeChatUser)
	}
	if m.clearedperms {
		edges = append(edges, user.EdgePerms)
	}
	if m.cleareddeployments {
		edges = append(edges, user.EdgeDeployments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeChatUser:
		return m.clearedchat_user
	case user.EdgePerms:
		return m.clearedperms
	case user.EdgeDeployments:
		return m.cleareddeployments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeChatUser:
		m.ClearChatUser()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeChatUser:
		m.ResetChatUser()
		return nil
	case user.EdgePerms:
		m.ResetPerms()
		return nil
	case user.EdgeDeployments:
		m.ResetDeployments()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
