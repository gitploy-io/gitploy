// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/hanjunlee/gitploy/ent/chatuser"
	"github.com/hanjunlee/gitploy/ent/user"
)

// ChatUser is the model entity for the ChatUser schema.
type ChatUser struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"-"`
	// Refresh holds the value of the "refresh" field.
	Refresh string `json:"-"`
	// Expiry holds the value of the "expiry" field.
	Expiry time.Time `json:"expiry"`
	// BotToken holds the value of the "bot_token" field.
	BotToken string `json:"-"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChatUserQuery when eager-loading is set.
	Edges ChatUserEdges `json:"edges"`
}

// ChatUserEdges holds the relations/edges for other nodes in the graph.
type ChatUserEdges struct {
	// ChatCallback holds the value of the chat_callback edge.
	ChatCallback []*ChatCallback `json:"chat_callback,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ChatCallbackOrErr returns the ChatCallback value or an error if the edge
// was not loaded in eager-loading.
func (e ChatUserEdges) ChatCallbackOrErr() ([]*ChatCallback, error) {
	if e.loadedTypes[0] {
		return e.ChatCallback, nil
	}
	return nil, &NotLoadedError{edge: "chat_callback"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChatUserEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatuser.FieldID, chatuser.FieldToken, chatuser.FieldRefresh, chatuser.FieldBotToken, chatuser.FieldUserID:
			values[i] = new(sql.NullString)
		case chatuser.FieldExpiry, chatuser.FieldCreatedAt, chatuser.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ChatUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatUser fields.
func (cu *ChatUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatuser.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cu.ID = value.String
			}
		case chatuser.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				cu.Token = value.String
			}
		case chatuser.FieldRefresh:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh", values[i])
			} else if value.Valid {
				cu.Refresh = value.String
			}
		case chatuser.FieldExpiry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiry", values[i])
			} else if value.Valid {
				cu.Expiry = value.Time
			}
		case chatuser.FieldBotToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bot_token", values[i])
			} else if value.Valid {
				cu.BotToken = value.String
			}
		case chatuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cu.CreatedAt = value.Time
			}
		case chatuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cu.UpdatedAt = value.Time
			}
		case chatuser.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				cu.UserID = value.String
			}
		}
	}
	return nil
}

// QueryChatCallback queries the "chat_callback" edge of the ChatUser entity.
func (cu *ChatUser) QueryChatCallback() *ChatCallbackQuery {
	return (&ChatUserClient{config: cu.config}).QueryChatCallback(cu)
}

// QueryUser queries the "user" edge of the ChatUser entity.
func (cu *ChatUser) QueryUser() *UserQuery {
	return (&ChatUserClient{config: cu.config}).QueryUser(cu)
}

// Update returns a builder for updating this ChatUser.
// Note that you need to call ChatUser.Unwrap() before calling this method if this ChatUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (cu *ChatUser) Update() *ChatUserUpdateOne {
	return (&ChatUserClient{config: cu.config}).UpdateOne(cu)
}

// Unwrap unwraps the ChatUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cu *ChatUser) Unwrap() *ChatUser {
	tx, ok := cu.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatUser is not a transactional entity")
	}
	cu.config.driver = tx.drv
	return cu
}

// String implements the fmt.Stringer.
func (cu *ChatUser) String() string {
	var builder strings.Builder
	builder.WriteString("ChatUser(")
	builder.WriteString(fmt.Sprintf("id=%v", cu.ID))
	builder.WriteString(", token=<sensitive>")
	builder.WriteString(", refresh=<sensitive>")
	builder.WriteString(", expiry=")
	builder.WriteString(cu.Expiry.Format(time.ANSIC))
	builder.WriteString(", bot_token=<sensitive>")
	builder.WriteString(", created_at=")
	builder.WriteString(cu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(cu.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", user_id=")
	builder.WriteString(cu.UserID)
	builder.WriteByte(')')
	return builder.String()
}

// ChatUsers is a parsable slice of ChatUser.
type ChatUsers []*ChatUser

func (cu ChatUsers) config(cfg config) {
	for _i := range cu {
		cu[_i].config = cfg
	}
}
