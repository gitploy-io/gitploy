// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gitploy-io/gitploy/ent/deployment"
	"github.com/gitploy-io/gitploy/ent/event"
	"github.com/gitploy-io/gitploy/ent/notificationrecord"
	"github.com/gitploy-io/gitploy/ent/review"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind event.Kind `json:"kind"`
	// Type holds the value of the "type" field.
	Type event.Type `json:"type"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// DeploymentID holds the value of the "deployment_id" field.
	DeploymentID int `json:"deployment_id,omitemtpy"`
	// ReviewID holds the value of the "review_id" field.
	ReviewID int `json:"review_id,omitemtpy"`
	// DeletedID holds the value of the "deleted_id" field.
	DeletedID int `json:"deleted_id,omitemtpy"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges EventEdges `json:"edges"`
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// Deployment holds the value of the deployment edge.
	Deployment *Deployment `json:"deployment,omitempty"`
	// Review holds the value of the review edge.
	Review *Review `json:"review,omitempty"`
	// NotificationRecord holds the value of the notification_record edge.
	NotificationRecord *NotificationRecord `json:"notification_record,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DeploymentOrErr returns the Deployment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) DeploymentOrErr() (*Deployment, error) {
	if e.loadedTypes[0] {
		if e.Deployment == nil {
			// The edge deployment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: deployment.Label}
		}
		return e.Deployment, nil
	}
	return nil, &NotLoadedError{edge: "deployment"}
}

// ReviewOrErr returns the Review value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) ReviewOrErr() (*Review, error) {
	if e.loadedTypes[1] {
		if e.Review == nil {
			// The edge review was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: review.Label}
		}
		return e.Review, nil
	}
	return nil, &NotLoadedError{edge: "review"}
}

// NotificationRecordOrErr returns the NotificationRecord value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) NotificationRecordOrErr() (*NotificationRecord, error) {
	if e.loadedTypes[2] {
		if e.NotificationRecord == nil {
			// The edge notification_record was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: notificationrecord.Label}
		}
		return e.NotificationRecord, nil
	}
	return nil, &NotLoadedError{edge: "notification_record"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldID, event.FieldDeploymentID, event.FieldReviewID, event.FieldDeletedID:
			values[i] = new(sql.NullInt64)
		case event.FieldKind, event.FieldType:
			values[i] = new(sql.NullString)
		case event.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Event", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case event.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				e.Kind = event.Kind(value.String)
			}
		case event.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				e.Type = event.Type(value.String)
			}
		case event.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case event.FieldDeploymentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_id", values[i])
			} else if value.Valid {
				e.DeploymentID = int(value.Int64)
			}
		case event.FieldReviewID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field review_id", values[i])
			} else if value.Valid {
				e.ReviewID = int(value.Int64)
			}
		case event.FieldDeletedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_id", values[i])
			} else if value.Valid {
				e.DeletedID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDeployment queries the "deployment" edge of the Event entity.
func (e *Event) QueryDeployment() *DeploymentQuery {
	return (&EventClient{config: e.config}).QueryDeployment(e)
}

// QueryReview queries the "review" edge of the Event entity.
func (e *Event) QueryReview() *ReviewQuery {
	return (&EventClient{config: e.config}).QueryReview(e)
}

// QueryNotificationRecord queries the "notification_record" edge of the Event entity.
func (e *Event) QueryNotificationRecord() *NotificationRecordQuery {
	return (&EventClient{config: e.config}).QueryNotificationRecord(e)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return (&EventClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", kind=")
	builder.WriteString(fmt.Sprintf("%v", e.Kind))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", e.Type))
	builder.WriteString(", created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", deployment_id=")
	builder.WriteString(fmt.Sprintf("%v", e.DeploymentID))
	builder.WriteString(", review_id=")
	builder.WriteString(fmt.Sprintf("%v", e.ReviewID))
	builder.WriteString(", deleted_id=")
	builder.WriteString(fmt.Sprintf("%v", e.DeletedID))
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event

func (e Events) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
