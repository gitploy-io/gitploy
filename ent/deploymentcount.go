// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gitploy-io/gitploy/ent/deploymentcount"
)

// DeploymentCount is the model entity for the DeploymentCount schema.
type DeploymentCount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// Env holds the value of the "env" field.
	Env string `json:"env"`
	// Count holds the value of the "count" field.
	Count int `json:"count"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeploymentCount) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case deploymentcount.FieldID, deploymentcount.FieldCount:
			values[i] = new(sql.NullInt64)
		case deploymentcount.FieldNamespace, deploymentcount.FieldName, deploymentcount.FieldEnv:
			values[i] = new(sql.NullString)
		case deploymentcount.FieldCreatedAt, deploymentcount.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DeploymentCount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeploymentCount fields.
func (dc *DeploymentCount) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deploymentcount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dc.ID = int(value.Int64)
		case deploymentcount.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				dc.Namespace = value.String
			}
		case deploymentcount.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dc.Name = value.String
			}
		case deploymentcount.FieldEnv:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field env", values[i])
			} else if value.Valid {
				dc.Env = value.String
			}
		case deploymentcount.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				dc.Count = int(value.Int64)
			}
		case deploymentcount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dc.CreatedAt = value.Time
			}
		case deploymentcount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dc.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this DeploymentCount.
// Note that you need to call DeploymentCount.Unwrap() before calling this method if this DeploymentCount
// was returned from a transaction, and the transaction was committed or rolled back.
func (dc *DeploymentCount) Update() *DeploymentCountUpdateOne {
	return (&DeploymentCountClient{config: dc.config}).UpdateOne(dc)
}

// Unwrap unwraps the DeploymentCount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dc *DeploymentCount) Unwrap() *DeploymentCount {
	tx, ok := dc.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeploymentCount is not a transactional entity")
	}
	dc.config.driver = tx.drv
	return dc
}

// String implements the fmt.Stringer.
func (dc *DeploymentCount) String() string {
	var builder strings.Builder
	builder.WriteString("DeploymentCount(")
	builder.WriteString(fmt.Sprintf("id=%v", dc.ID))
	builder.WriteString(", namespace=")
	builder.WriteString(dc.Namespace)
	builder.WriteString(", name=")
	builder.WriteString(dc.Name)
	builder.WriteString(", env=")
	builder.WriteString(dc.Env)
	builder.WriteString(", count=")
	builder.WriteString(fmt.Sprintf("%v", dc.Count))
	builder.WriteString(", created_at=")
	builder.WriteString(dc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(dc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DeploymentCounts is a parsable slice of DeploymentCount.
type DeploymentCounts []*DeploymentCount

func (dc DeploymentCounts) config(cfg config) {
	for _i := range dc {
		dc[_i].config = cfg
	}
}
