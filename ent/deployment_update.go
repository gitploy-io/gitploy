// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hanjunlee/gitploy/ent/deployment"
	"github.com/hanjunlee/gitploy/ent/predicate"
	"github.com/hanjunlee/gitploy/ent/repo"
	"github.com/hanjunlee/gitploy/ent/user"
)

// DeploymentUpdate is the builder for updating Deployment entities.
type DeploymentUpdate struct {
	config
	hooks    []Hook
	mutation *DeploymentMutation
}

// Where adds a new predicate for the DeploymentUpdate builder.
func (du *DeploymentUpdate) Where(ps ...predicate.Deployment) *DeploymentUpdate {
	du.mutation.predicates = append(du.mutation.predicates, ps...)
	return du
}

// SetUID sets the "uid" field.
func (du *DeploymentUpdate) SetUID(i int64) *DeploymentUpdate {
	du.mutation.ResetUID()
	du.mutation.SetUID(i)
	return du
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (du *DeploymentUpdate) SetNillableUID(i *int64) *DeploymentUpdate {
	if i != nil {
		du.SetUID(*i)
	}
	return du
}

// AddUID adds i to the "uid" field.
func (du *DeploymentUpdate) AddUID(i int64) *DeploymentUpdate {
	du.mutation.AddUID(i)
	return du
}

// ClearUID clears the value of the "uid" field.
func (du *DeploymentUpdate) ClearUID() *DeploymentUpdate {
	du.mutation.ClearUID()
	return du
}

// SetType sets the "type" field.
func (du *DeploymentUpdate) SetType(d deployment.Type) *DeploymentUpdate {
	du.mutation.SetType(d)
	return du
}

// SetNillableType sets the "type" field if the given value is not nil.
func (du *DeploymentUpdate) SetNillableType(d *deployment.Type) *DeploymentUpdate {
	if d != nil {
		du.SetType(*d)
	}
	return du
}

// SetRef sets the "ref" field.
func (du *DeploymentUpdate) SetRef(s string) *DeploymentUpdate {
	du.mutation.SetRef(s)
	return du
}

// SetSha sets the "sha" field.
func (du *DeploymentUpdate) SetSha(s string) *DeploymentUpdate {
	du.mutation.SetSha(s)
	return du
}

// SetNillableSha sets the "sha" field if the given value is not nil.
func (du *DeploymentUpdate) SetNillableSha(s *string) *DeploymentUpdate {
	if s != nil {
		du.SetSha(*s)
	}
	return du
}

// ClearSha clears the value of the "sha" field.
func (du *DeploymentUpdate) ClearSha() *DeploymentUpdate {
	du.mutation.ClearSha()
	return du
}

// SetEnv sets the "env" field.
func (du *DeploymentUpdate) SetEnv(s string) *DeploymentUpdate {
	du.mutation.SetEnv(s)
	return du
}

// SetStatus sets the "status" field.
func (du *DeploymentUpdate) SetStatus(d deployment.Status) *DeploymentUpdate {
	du.mutation.SetStatus(d)
	return du
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (du *DeploymentUpdate) SetNillableStatus(d *deployment.Status) *DeploymentUpdate {
	if d != nil {
		du.SetStatus(*d)
	}
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DeploymentUpdate) SetCreatedAt(t time.Time) *DeploymentUpdate {
	du.mutation.SetCreatedAt(t)
	return du
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (du *DeploymentUpdate) SetNillableCreatedAt(t *time.Time) *DeploymentUpdate {
	if t != nil {
		du.SetCreatedAt(*t)
	}
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DeploymentUpdate) SetUpdatedAt(t time.Time) *DeploymentUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetUserID sets the "user_id" field.
func (du *DeploymentUpdate) SetUserID(s string) *DeploymentUpdate {
	du.mutation.SetUserID(s)
	return du
}

// SetRepoID sets the "repo_id" field.
func (du *DeploymentUpdate) SetRepoID(s string) *DeploymentUpdate {
	du.mutation.SetRepoID(s)
	return du
}

// SetUser sets the "user" edge to the User entity.
func (du *DeploymentUpdate) SetUser(u *User) *DeploymentUpdate {
	return du.SetUserID(u.ID)
}

// SetRepo sets the "repo" edge to the Repo entity.
func (du *DeploymentUpdate) SetRepo(r *Repo) *DeploymentUpdate {
	return du.SetRepoID(r.ID)
}

// Mutation returns the DeploymentMutation object of the builder.
func (du *DeploymentUpdate) Mutation() *DeploymentMutation {
	return du.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (du *DeploymentUpdate) ClearUser() *DeploymentUpdate {
	du.mutation.ClearUser()
	return du
}

// ClearRepo clears the "repo" edge to the Repo entity.
func (du *DeploymentUpdate) ClearRepo() *DeploymentUpdate {
	du.mutation.ClearRepo()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeploymentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	du.defaults()
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeploymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeploymentUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeploymentUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeploymentUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DeploymentUpdate) defaults() {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		v := deployment.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DeploymentUpdate) check() error {
	if v, ok := du.mutation.GetType(); ok {
		if err := deployment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := du.mutation.Status(); ok {
		if err := deployment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := du.mutation.UserID(); du.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	if _, ok := du.mutation.RepoID(); du.mutation.RepoCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"repo\"")
	}
	return nil
}

func (du *DeploymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deployment.Table,
			Columns: deployment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deployment.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deployment.FieldUID,
		})
	}
	if value, ok := du.mutation.AddedUID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deployment.FieldUID,
		})
	}
	if du.mutation.UIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: deployment.FieldUID,
		})
	}
	if value, ok := du.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: deployment.FieldType,
		})
	}
	if value, ok := du.mutation.Ref(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deployment.FieldRef,
		})
	}
	if value, ok := du.mutation.Sha(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deployment.FieldSha,
		})
	}
	if du.mutation.ShaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deployment.FieldSha,
		})
	}
	if value, ok := du.mutation.Env(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deployment.FieldEnv,
		})
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: deployment.FieldStatus,
		})
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deployment.FieldCreatedAt,
		})
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deployment.FieldUpdatedAt,
		})
	}
	if du.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deployment.UserTable,
			Columns: []string{deployment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deployment.UserTable,
			Columns: []string{deployment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deployment.RepoTable,
			Columns: []string{deployment.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: repo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deployment.RepoTable,
			Columns: []string{deployment.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deployment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DeploymentUpdateOne is the builder for updating a single Deployment entity.
type DeploymentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeploymentMutation
}

// SetUID sets the "uid" field.
func (duo *DeploymentUpdateOne) SetUID(i int64) *DeploymentUpdateOne {
	duo.mutation.ResetUID()
	duo.mutation.SetUID(i)
	return duo
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (duo *DeploymentUpdateOne) SetNillableUID(i *int64) *DeploymentUpdateOne {
	if i != nil {
		duo.SetUID(*i)
	}
	return duo
}

// AddUID adds i to the "uid" field.
func (duo *DeploymentUpdateOne) AddUID(i int64) *DeploymentUpdateOne {
	duo.mutation.AddUID(i)
	return duo
}

// ClearUID clears the value of the "uid" field.
func (duo *DeploymentUpdateOne) ClearUID() *DeploymentUpdateOne {
	duo.mutation.ClearUID()
	return duo
}

// SetType sets the "type" field.
func (duo *DeploymentUpdateOne) SetType(d deployment.Type) *DeploymentUpdateOne {
	duo.mutation.SetType(d)
	return duo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (duo *DeploymentUpdateOne) SetNillableType(d *deployment.Type) *DeploymentUpdateOne {
	if d != nil {
		duo.SetType(*d)
	}
	return duo
}

// SetRef sets the "ref" field.
func (duo *DeploymentUpdateOne) SetRef(s string) *DeploymentUpdateOne {
	duo.mutation.SetRef(s)
	return duo
}

// SetSha sets the "sha" field.
func (duo *DeploymentUpdateOne) SetSha(s string) *DeploymentUpdateOne {
	duo.mutation.SetSha(s)
	return duo
}

// SetNillableSha sets the "sha" field if the given value is not nil.
func (duo *DeploymentUpdateOne) SetNillableSha(s *string) *DeploymentUpdateOne {
	if s != nil {
		duo.SetSha(*s)
	}
	return duo
}

// ClearSha clears the value of the "sha" field.
func (duo *DeploymentUpdateOne) ClearSha() *DeploymentUpdateOne {
	duo.mutation.ClearSha()
	return duo
}

// SetEnv sets the "env" field.
func (duo *DeploymentUpdateOne) SetEnv(s string) *DeploymentUpdateOne {
	duo.mutation.SetEnv(s)
	return duo
}

// SetStatus sets the "status" field.
func (duo *DeploymentUpdateOne) SetStatus(d deployment.Status) *DeploymentUpdateOne {
	duo.mutation.SetStatus(d)
	return duo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (duo *DeploymentUpdateOne) SetNillableStatus(d *deployment.Status) *DeploymentUpdateOne {
	if d != nil {
		duo.SetStatus(*d)
	}
	return duo
}

// SetCreatedAt sets the "created_at" field.
func (duo *DeploymentUpdateOne) SetCreatedAt(t time.Time) *DeploymentUpdateOne {
	duo.mutation.SetCreatedAt(t)
	return duo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (duo *DeploymentUpdateOne) SetNillableCreatedAt(t *time.Time) *DeploymentUpdateOne {
	if t != nil {
		duo.SetCreatedAt(*t)
	}
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DeploymentUpdateOne) SetUpdatedAt(t time.Time) *DeploymentUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetUserID sets the "user_id" field.
func (duo *DeploymentUpdateOne) SetUserID(s string) *DeploymentUpdateOne {
	duo.mutation.SetUserID(s)
	return duo
}

// SetRepoID sets the "repo_id" field.
func (duo *DeploymentUpdateOne) SetRepoID(s string) *DeploymentUpdateOne {
	duo.mutation.SetRepoID(s)
	return duo
}

// SetUser sets the "user" edge to the User entity.
func (duo *DeploymentUpdateOne) SetUser(u *User) *DeploymentUpdateOne {
	return duo.SetUserID(u.ID)
}

// SetRepo sets the "repo" edge to the Repo entity.
func (duo *DeploymentUpdateOne) SetRepo(r *Repo) *DeploymentUpdateOne {
	return duo.SetRepoID(r.ID)
}

// Mutation returns the DeploymentMutation object of the builder.
func (duo *DeploymentUpdateOne) Mutation() *DeploymentMutation {
	return duo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (duo *DeploymentUpdateOne) ClearUser() *DeploymentUpdateOne {
	duo.mutation.ClearUser()
	return duo
}

// ClearRepo clears the "repo" edge to the Repo entity.
func (duo *DeploymentUpdateOne) ClearRepo() *DeploymentUpdateOne {
	duo.mutation.ClearRepo()
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeploymentUpdateOne) Select(field string, fields ...string) *DeploymentUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Deployment entity.
func (duo *DeploymentUpdateOne) Save(ctx context.Context) (*Deployment, error) {
	var (
		err  error
		node *Deployment
	)
	duo.defaults()
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeploymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeploymentUpdateOne) SaveX(ctx context.Context) *Deployment {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeploymentUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeploymentUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DeploymentUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		v := deployment.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DeploymentUpdateOne) check() error {
	if v, ok := duo.mutation.GetType(); ok {
		if err := deployment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Status(); ok {
		if err := deployment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := duo.mutation.UserID(); duo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	if _, ok := duo.mutation.RepoID(); duo.mutation.RepoCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"repo\"")
	}
	return nil
}

func (duo *DeploymentUpdateOne) sqlSave(ctx context.Context) (_node *Deployment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deployment.Table,
			Columns: deployment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deployment.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Deployment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deployment.FieldID)
		for _, f := range fields {
			if !deployment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deployment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deployment.FieldUID,
		})
	}
	if value, ok := duo.mutation.AddedUID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deployment.FieldUID,
		})
	}
	if duo.mutation.UIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: deployment.FieldUID,
		})
	}
	if value, ok := duo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: deployment.FieldType,
		})
	}
	if value, ok := duo.mutation.Ref(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deployment.FieldRef,
		})
	}
	if value, ok := duo.mutation.Sha(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deployment.FieldSha,
		})
	}
	if duo.mutation.ShaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deployment.FieldSha,
		})
	}
	if value, ok := duo.mutation.Env(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deployment.FieldEnv,
		})
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: deployment.FieldStatus,
		})
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deployment.FieldCreatedAt,
		})
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deployment.FieldUpdatedAt,
		})
	}
	if duo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deployment.UserTable,
			Columns: []string{deployment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deployment.UserTable,
			Columns: []string{deployment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deployment.RepoTable,
			Columns: []string{deployment.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: repo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deployment.RepoTable,
			Columns: []string{deployment.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Deployment{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deployment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
