// Code generated by entc, DO NOT EDIT.

package deployment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gitploy-io/gitploy/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber), v))
	})
}

// Env applies equality check predicate on the "env" field. It's identical to EnvEQ.
func Env(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnv), v))
	})
}

// Ref applies equality check predicate on the "ref" field. It's identical to RefEQ.
func Ref(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRef), v))
	})
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v int64) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// Sha applies equality check predicate on the "sha" field. It's identical to ShaEQ.
func Sha(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSha), v))
	})
}

// HTMLURL applies equality check predicate on the "html_url" field. It's identical to HTMLURLEQ.
func HTMLURL(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHTMLURL), v))
	})
}

// ProductionEnvironment applies equality check predicate on the "production_environment" field. It's identical to ProductionEnvironmentEQ.
func ProductionEnvironment(v bool) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductionEnvironment), v))
	})
}

// IsRollback applies equality check predicate on the "is_rollback" field. It's identical to IsRollbackEQ.
func IsRollback(v bool) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsRollback), v))
	})
}

// IsApprovalEnabled applies equality check predicate on the "is_approval_enabled" field. It's identical to IsApprovalEnabledEQ.
func IsApprovalEnabled(v bool) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsApprovalEnabled), v))
	})
}

// RequiredApprovalCount applies equality check predicate on the "required_approval_count" field. It's identical to RequiredApprovalCountEQ.
func RequiredApprovalCount(v int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequiredApprovalCount), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// RepoID applies equality check predicate on the "repo_id" field. It's identical to RepoIDEQ.
func RepoID(v int64) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepoID), v))
	})
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber), v))
	})
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumber), v))
	})
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...int) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumber), v...))
	})
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...int) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumber), v...))
	})
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumber), v))
	})
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumber), v))
	})
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumber), v))
	})
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumber), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// EnvEQ applies the EQ predicate on the "env" field.
func EnvEQ(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnv), v))
	})
}

// EnvNEQ applies the NEQ predicate on the "env" field.
func EnvNEQ(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnv), v))
	})
}

// EnvIn applies the In predicate on the "env" field.
func EnvIn(vs ...string) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEnv), v...))
	})
}

// EnvNotIn applies the NotIn predicate on the "env" field.
func EnvNotIn(vs ...string) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEnv), v...))
	})
}

// EnvGT applies the GT predicate on the "env" field.
func EnvGT(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEnv), v))
	})
}

// EnvGTE applies the GTE predicate on the "env" field.
func EnvGTE(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEnv), v))
	})
}

// EnvLT applies the LT predicate on the "env" field.
func EnvLT(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEnv), v))
	})
}

// EnvLTE applies the LTE predicate on the "env" field.
func EnvLTE(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEnv), v))
	})
}

// EnvContains applies the Contains predicate on the "env" field.
func EnvContains(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEnv), v))
	})
}

// EnvHasPrefix applies the HasPrefix predicate on the "env" field.
func EnvHasPrefix(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEnv), v))
	})
}

// EnvHasSuffix applies the HasSuffix predicate on the "env" field.
func EnvHasSuffix(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEnv), v))
	})
}

// EnvEqualFold applies the EqualFold predicate on the "env" field.
func EnvEqualFold(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEnv), v))
	})
}

// EnvContainsFold applies the ContainsFold predicate on the "env" field.
func EnvContainsFold(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEnv), v))
	})
}

// RefEQ applies the EQ predicate on the "ref" field.
func RefEQ(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRef), v))
	})
}

// RefNEQ applies the NEQ predicate on the "ref" field.
func RefNEQ(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRef), v))
	})
}

// RefIn applies the In predicate on the "ref" field.
func RefIn(vs ...string) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRef), v...))
	})
}

// RefNotIn applies the NotIn predicate on the "ref" field.
func RefNotIn(vs ...string) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRef), v...))
	})
}

// RefGT applies the GT predicate on the "ref" field.
func RefGT(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRef), v))
	})
}

// RefGTE applies the GTE predicate on the "ref" field.
func RefGTE(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRef), v))
	})
}

// RefLT applies the LT predicate on the "ref" field.
func RefLT(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRef), v))
	})
}

// RefLTE applies the LTE predicate on the "ref" field.
func RefLTE(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRef), v))
	})
}

// RefContains applies the Contains predicate on the "ref" field.
func RefContains(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRef), v))
	})
}

// RefHasPrefix applies the HasPrefix predicate on the "ref" field.
func RefHasPrefix(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRef), v))
	})
}

// RefHasSuffix applies the HasSuffix predicate on the "ref" field.
func RefHasSuffix(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRef), v))
	})
}

// RefEqualFold applies the EqualFold predicate on the "ref" field.
func RefEqualFold(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRef), v))
	})
}

// RefContainsFold applies the ContainsFold predicate on the "ref" field.
func RefContainsFold(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRef), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v int64) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v int64) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUID), v))
	})
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...int64) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUID), v...))
	})
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...int64) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUID), v...))
	})
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v int64) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUID), v))
	})
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v int64) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUID), v))
	})
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v int64) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUID), v))
	})
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v int64) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUID), v))
	})
}

// UIDIsNil applies the IsNil predicate on the "uid" field.
func UIDIsNil() predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUID)))
	})
}

// UIDNotNil applies the NotNil predicate on the "uid" field.
func UIDNotNil() predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUID)))
	})
}

// ShaEQ applies the EQ predicate on the "sha" field.
func ShaEQ(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSha), v))
	})
}

// ShaNEQ applies the NEQ predicate on the "sha" field.
func ShaNEQ(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSha), v))
	})
}

// ShaIn applies the In predicate on the "sha" field.
func ShaIn(vs ...string) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSha), v...))
	})
}

// ShaNotIn applies the NotIn predicate on the "sha" field.
func ShaNotIn(vs ...string) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSha), v...))
	})
}

// ShaGT applies the GT predicate on the "sha" field.
func ShaGT(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSha), v))
	})
}

// ShaGTE applies the GTE predicate on the "sha" field.
func ShaGTE(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSha), v))
	})
}

// ShaLT applies the LT predicate on the "sha" field.
func ShaLT(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSha), v))
	})
}

// ShaLTE applies the LTE predicate on the "sha" field.
func ShaLTE(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSha), v))
	})
}

// ShaContains applies the Contains predicate on the "sha" field.
func ShaContains(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSha), v))
	})
}

// ShaHasPrefix applies the HasPrefix predicate on the "sha" field.
func ShaHasPrefix(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSha), v))
	})
}

// ShaHasSuffix applies the HasSuffix predicate on the "sha" field.
func ShaHasSuffix(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSha), v))
	})
}

// ShaIsNil applies the IsNil predicate on the "sha" field.
func ShaIsNil() predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSha)))
	})
}

// ShaNotNil applies the NotNil predicate on the "sha" field.
func ShaNotNil() predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSha)))
	})
}

// ShaEqualFold applies the EqualFold predicate on the "sha" field.
func ShaEqualFold(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSha), v))
	})
}

// ShaContainsFold applies the ContainsFold predicate on the "sha" field.
func ShaContainsFold(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSha), v))
	})
}

// HTMLURLEQ applies the EQ predicate on the "html_url" field.
func HTMLURLEQ(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLNEQ applies the NEQ predicate on the "html_url" field.
func HTMLURLNEQ(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLIn applies the In predicate on the "html_url" field.
func HTMLURLIn(vs ...string) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHTMLURL), v...))
	})
}

// HTMLURLNotIn applies the NotIn predicate on the "html_url" field.
func HTMLURLNotIn(vs ...string) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHTMLURL), v...))
	})
}

// HTMLURLGT applies the GT predicate on the "html_url" field.
func HTMLURLGT(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLGTE applies the GTE predicate on the "html_url" field.
func HTMLURLGTE(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLLT applies the LT predicate on the "html_url" field.
func HTMLURLLT(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLLTE applies the LTE predicate on the "html_url" field.
func HTMLURLLTE(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLContains applies the Contains predicate on the "html_url" field.
func HTMLURLContains(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLHasPrefix applies the HasPrefix predicate on the "html_url" field.
func HTMLURLHasPrefix(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLHasSuffix applies the HasSuffix predicate on the "html_url" field.
func HTMLURLHasSuffix(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLIsNil applies the IsNil predicate on the "html_url" field.
func HTMLURLIsNil() predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHTMLURL)))
	})
}

// HTMLURLNotNil applies the NotNil predicate on the "html_url" field.
func HTMLURLNotNil() predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHTMLURL)))
	})
}

// HTMLURLEqualFold applies the EqualFold predicate on the "html_url" field.
func HTMLURLEqualFold(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLContainsFold applies the ContainsFold predicate on the "html_url" field.
func HTMLURLContainsFold(v string) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHTMLURL), v))
	})
}

// ProductionEnvironmentEQ applies the EQ predicate on the "production_environment" field.
func ProductionEnvironmentEQ(v bool) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductionEnvironment), v))
	})
}

// ProductionEnvironmentNEQ applies the NEQ predicate on the "production_environment" field.
func ProductionEnvironmentNEQ(v bool) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductionEnvironment), v))
	})
}

// IsRollbackEQ applies the EQ predicate on the "is_rollback" field.
func IsRollbackEQ(v bool) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsRollback), v))
	})
}

// IsRollbackNEQ applies the NEQ predicate on the "is_rollback" field.
func IsRollbackNEQ(v bool) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsRollback), v))
	})
}

// IsApprovalEnabledEQ applies the EQ predicate on the "is_approval_enabled" field.
func IsApprovalEnabledEQ(v bool) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsApprovalEnabled), v))
	})
}

// IsApprovalEnabledNEQ applies the NEQ predicate on the "is_approval_enabled" field.
func IsApprovalEnabledNEQ(v bool) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsApprovalEnabled), v))
	})
}

// RequiredApprovalCountEQ applies the EQ predicate on the "required_approval_count" field.
func RequiredApprovalCountEQ(v int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequiredApprovalCount), v))
	})
}

// RequiredApprovalCountNEQ applies the NEQ predicate on the "required_approval_count" field.
func RequiredApprovalCountNEQ(v int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequiredApprovalCount), v))
	})
}

// RequiredApprovalCountIn applies the In predicate on the "required_approval_count" field.
func RequiredApprovalCountIn(vs ...int) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRequiredApprovalCount), v...))
	})
}

// RequiredApprovalCountNotIn applies the NotIn predicate on the "required_approval_count" field.
func RequiredApprovalCountNotIn(vs ...int) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRequiredApprovalCount), v...))
	})
}

// RequiredApprovalCountGT applies the GT predicate on the "required_approval_count" field.
func RequiredApprovalCountGT(v int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRequiredApprovalCount), v))
	})
}

// RequiredApprovalCountGTE applies the GTE predicate on the "required_approval_count" field.
func RequiredApprovalCountGTE(v int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRequiredApprovalCount), v))
	})
}

// RequiredApprovalCountLT applies the LT predicate on the "required_approval_count" field.
func RequiredApprovalCountLT(v int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRequiredApprovalCount), v))
	})
}

// RequiredApprovalCountLTE applies the LTE predicate on the "required_approval_count" field.
func RequiredApprovalCountLTE(v int) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRequiredApprovalCount), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// RepoIDEQ applies the EQ predicate on the "repo_id" field.
func RepoIDEQ(v int64) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepoID), v))
	})
}

// RepoIDNEQ applies the NEQ predicate on the "repo_id" field.
func RepoIDNEQ(v int64) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRepoID), v))
	})
}

// RepoIDIn applies the In predicate on the "repo_id" field.
func RepoIDIn(vs ...int64) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRepoID), v...))
	})
}

// RepoIDNotIn applies the NotIn predicate on the "repo_id" field.
func RepoIDNotIn(vs ...int64) predicate.Deployment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deployment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRepoID), v...))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRepo applies the HasEdge predicate on the "repo" edge.
func HasRepo() predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RepoTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RepoTable, RepoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepoWith applies the HasEdge predicate on the "repo" edge with a given conditions (other predicates).
func HasRepoWith(preds ...predicate.Repo) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RepoInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RepoTable, RepoColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApprovals applies the HasEdge predicate on the "approvals" edge.
func HasApprovals() predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApprovalsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApprovalsTable, ApprovalsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApprovalsWith applies the HasEdge predicate on the "approvals" edge with a given conditions (other predicates).
func HasApprovalsWith(preds ...predicate.Approval) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApprovalsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApprovalsTable, ApprovalsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReviews applies the HasEdge predicate on the "reviews" edge.
func HasReviews() predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReviewsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReviewsTable, ReviewsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReviewsWith applies the HasEdge predicate on the "reviews" edge with a given conditions (other predicates).
func HasReviewsWith(preds ...predicate.Review) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReviewsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReviewsTable, ReviewsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeploymentStatuses applies the HasEdge predicate on the "deployment_statuses" edge.
func HasDeploymentStatuses() predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeploymentStatusesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DeploymentStatusesTable, DeploymentStatusesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeploymentStatusesWith applies the HasEdge predicate on the "deployment_statuses" edge with a given conditions (other predicates).
func HasDeploymentStatusesWith(preds ...predicate.DeploymentStatus) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeploymentStatusesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DeploymentStatusesTable, DeploymentStatusesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventTable, EventColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Deployment) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Deployment) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Deployment) predicate.Deployment {
	return predicate.Deployment(func(s *sql.Selector) {
		p(s.Not())
	})
}
