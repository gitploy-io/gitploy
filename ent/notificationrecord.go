// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/gitploy-io/gitploy/ent/event"
	"github.com/gitploy-io/gitploy/ent/notificationrecord"
)

// NotificationRecord is the model entity for the NotificationRecord schema.
type NotificationRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID int `json:"event_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationRecordQuery when eager-loading is set.
	Edges NotificationRecordEdges `json:"edges"`
}

// NotificationRecordEdges holds the relations/edges for other nodes in the graph.
type NotificationRecordEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationRecordEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// The edge event was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotificationRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case notificationrecord.FieldID, notificationrecord.FieldEventID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NotificationRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotificationRecord fields.
func (nr *NotificationRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notificationrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nr.ID = int(value.Int64)
		case notificationrecord.FieldEventID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				nr.EventID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryEvent queries the "event" edge of the NotificationRecord entity.
func (nr *NotificationRecord) QueryEvent() *EventQuery {
	return (&NotificationRecordClient{config: nr.config}).QueryEvent(nr)
}

// Update returns a builder for updating this NotificationRecord.
// Note that you need to call NotificationRecord.Unwrap() before calling this method if this NotificationRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (nr *NotificationRecord) Update() *NotificationRecordUpdateOne {
	return (&NotificationRecordClient{config: nr.config}).UpdateOne(nr)
}

// Unwrap unwraps the NotificationRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nr *NotificationRecord) Unwrap() *NotificationRecord {
	tx, ok := nr.config.driver.(*txDriver)
	if !ok {
		panic("ent: NotificationRecord is not a transactional entity")
	}
	nr.config.driver = tx.drv
	return nr
}

// String implements the fmt.Stringer.
func (nr *NotificationRecord) String() string {
	var builder strings.Builder
	builder.WriteString("NotificationRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", nr.ID))
	builder.WriteString(", event_id=")
	builder.WriteString(fmt.Sprintf("%v", nr.EventID))
	builder.WriteByte(')')
	return builder.String()
}

// NotificationRecords is a parsable slice of NotificationRecord.
type NotificationRecords []*NotificationRecord

func (nr NotificationRecords) config(cfg config) {
	for _i := range nr {
		nr[_i].config = cfg
	}
}
