// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/hanjunlee/gitploy/ent/chatcallback"
)

// ChatCallback is the model entity for the ChatCallback schema.
type ChatCallback struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Type holds the value of the "type" field.
	Type chatcallback.Type `json:"type,omitempty"`
	// IsOpened holds the value of the "is_opened" field.
	IsOpened bool `json:"is_opened,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatCallback) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatcallback.FieldIsOpened:
			values[i] = new(sql.NullBool)
		case chatcallback.FieldID, chatcallback.FieldState, chatcallback.FieldType:
			values[i] = new(sql.NullString)
		case chatcallback.FieldCreatedAt, chatcallback.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ChatCallback", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatCallback fields.
func (cc *ChatCallback) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatcallback.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cc.ID = value.String
			}
		case chatcallback.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				cc.State = value.String
			}
		case chatcallback.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				cc.Type = chatcallback.Type(value.String)
			}
		case chatcallback.FieldIsOpened:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_opened", values[i])
			} else if value.Valid {
				cc.IsOpened = value.Bool
			}
		case chatcallback.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cc.CreatedAt = value.Time
			}
		case chatcallback.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cc.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ChatCallback.
// Note that you need to call ChatCallback.Unwrap() before calling this method if this ChatCallback
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *ChatCallback) Update() *ChatCallbackUpdateOne {
	return (&ChatCallbackClient{config: cc.config}).UpdateOne(cc)
}

// Unwrap unwraps the ChatCallback entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *ChatCallback) Unwrap() *ChatCallback {
	tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatCallback is not a transactional entity")
	}
	cc.config.driver = tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *ChatCallback) String() string {
	var builder strings.Builder
	builder.WriteString("ChatCallback(")
	builder.WriteString(fmt.Sprintf("id=%v", cc.ID))
	builder.WriteString(", state=")
	builder.WriteString(cc.State)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", cc.Type))
	builder.WriteString(", is_opened=")
	builder.WriteString(fmt.Sprintf("%v", cc.IsOpened))
	builder.WriteString(", created_at=")
	builder.WriteString(cc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(cc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ChatCallbacks is a parsable slice of ChatCallback.
type ChatCallbacks []*ChatCallback

func (cc ChatCallbacks) config(cfg config) {
	for _i := range cc {
		cc[_i].config = cfg
	}
}
