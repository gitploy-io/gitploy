// Code generated by entc, DO NOT EDIT.

package notification

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hanjunlee/gitploy/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RepoNamespace applies equality check predicate on the "repo_namespace" field. It's identical to RepoNamespaceEQ.
func RepoNamespace(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepoNamespace), v))
	})
}

// RepoName applies equality check predicate on the "repo_name" field. It's identical to RepoNameEQ.
func RepoName(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepoName), v))
	})
}

// DeploymentNumber applies equality check predicate on the "deployment_number" field. It's identical to DeploymentNumberEQ.
func DeploymentNumber(v int) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeploymentNumber), v))
	})
}

// DeploymentType applies equality check predicate on the "deployment_type" field. It's identical to DeploymentTypeEQ.
func DeploymentType(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeploymentType), v))
	})
}

// DeploymentRef applies equality check predicate on the "deployment_ref" field. It's identical to DeploymentRefEQ.
func DeploymentRef(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeploymentRef), v))
	})
}

// DeploymentEnv applies equality check predicate on the "deployment_env" field. It's identical to DeploymentEnvEQ.
func DeploymentEnv(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeploymentEnv), v))
	})
}

// DeploymentStatus applies equality check predicate on the "deployment_status" field. It's identical to DeploymentStatusEQ.
func DeploymentStatus(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeploymentStatus), v))
	})
}

// DeploymentLogin applies equality check predicate on the "deployment_login" field. It's identical to DeploymentLoginEQ.
func DeploymentLogin(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeploymentLogin), v))
	})
}

// Notified applies equality check predicate on the "notified" field. It's identical to NotifiedEQ.
func Notified(v bool) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotified), v))
	})
}

// Checked applies equality check predicate on the "checked" field. It's identical to CheckedEQ.
func Checked(v bool) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChecked), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// RepoNamespaceEQ applies the EQ predicate on the "repo_namespace" field.
func RepoNamespaceEQ(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceNEQ applies the NEQ predicate on the "repo_namespace" field.
func RepoNamespaceNEQ(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceIn applies the In predicate on the "repo_namespace" field.
func RepoNamespaceIn(vs ...string) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRepoNamespace), v...))
	})
}

// RepoNamespaceNotIn applies the NotIn predicate on the "repo_namespace" field.
func RepoNamespaceNotIn(vs ...string) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRepoNamespace), v...))
	})
}

// RepoNamespaceGT applies the GT predicate on the "repo_namespace" field.
func RepoNamespaceGT(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceGTE applies the GTE predicate on the "repo_namespace" field.
func RepoNamespaceGTE(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceLT applies the LT predicate on the "repo_namespace" field.
func RepoNamespaceLT(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceLTE applies the LTE predicate on the "repo_namespace" field.
func RepoNamespaceLTE(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceContains applies the Contains predicate on the "repo_namespace" field.
func RepoNamespaceContains(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceHasPrefix applies the HasPrefix predicate on the "repo_namespace" field.
func RepoNamespaceHasPrefix(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceHasSuffix applies the HasSuffix predicate on the "repo_namespace" field.
func RepoNamespaceHasSuffix(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceEqualFold applies the EqualFold predicate on the "repo_namespace" field.
func RepoNamespaceEqualFold(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceContainsFold applies the ContainsFold predicate on the "repo_namespace" field.
func RepoNamespaceContainsFold(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRepoNamespace), v))
	})
}

// RepoNameEQ applies the EQ predicate on the "repo_name" field.
func RepoNameEQ(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepoName), v))
	})
}

// RepoNameNEQ applies the NEQ predicate on the "repo_name" field.
func RepoNameNEQ(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRepoName), v))
	})
}

// RepoNameIn applies the In predicate on the "repo_name" field.
func RepoNameIn(vs ...string) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRepoName), v...))
	})
}

// RepoNameNotIn applies the NotIn predicate on the "repo_name" field.
func RepoNameNotIn(vs ...string) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRepoName), v...))
	})
}

// RepoNameGT applies the GT predicate on the "repo_name" field.
func RepoNameGT(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRepoName), v))
	})
}

// RepoNameGTE applies the GTE predicate on the "repo_name" field.
func RepoNameGTE(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRepoName), v))
	})
}

// RepoNameLT applies the LT predicate on the "repo_name" field.
func RepoNameLT(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRepoName), v))
	})
}

// RepoNameLTE applies the LTE predicate on the "repo_name" field.
func RepoNameLTE(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRepoName), v))
	})
}

// RepoNameContains applies the Contains predicate on the "repo_name" field.
func RepoNameContains(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRepoName), v))
	})
}

// RepoNameHasPrefix applies the HasPrefix predicate on the "repo_name" field.
func RepoNameHasPrefix(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRepoName), v))
	})
}

// RepoNameHasSuffix applies the HasSuffix predicate on the "repo_name" field.
func RepoNameHasSuffix(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRepoName), v))
	})
}

// RepoNameEqualFold applies the EqualFold predicate on the "repo_name" field.
func RepoNameEqualFold(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRepoName), v))
	})
}

// RepoNameContainsFold applies the ContainsFold predicate on the "repo_name" field.
func RepoNameContainsFold(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRepoName), v))
	})
}

// DeploymentNumberEQ applies the EQ predicate on the "deployment_number" field.
func DeploymentNumberEQ(v int) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeploymentNumber), v))
	})
}

// DeploymentNumberNEQ applies the NEQ predicate on the "deployment_number" field.
func DeploymentNumberNEQ(v int) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeploymentNumber), v))
	})
}

// DeploymentNumberIn applies the In predicate on the "deployment_number" field.
func DeploymentNumberIn(vs ...int) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeploymentNumber), v...))
	})
}

// DeploymentNumberNotIn applies the NotIn predicate on the "deployment_number" field.
func DeploymentNumberNotIn(vs ...int) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeploymentNumber), v...))
	})
}

// DeploymentNumberGT applies the GT predicate on the "deployment_number" field.
func DeploymentNumberGT(v int) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeploymentNumber), v))
	})
}

// DeploymentNumberGTE applies the GTE predicate on the "deployment_number" field.
func DeploymentNumberGTE(v int) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeploymentNumber), v))
	})
}

// DeploymentNumberLT applies the LT predicate on the "deployment_number" field.
func DeploymentNumberLT(v int) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeploymentNumber), v))
	})
}

// DeploymentNumberLTE applies the LTE predicate on the "deployment_number" field.
func DeploymentNumberLTE(v int) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeploymentNumber), v))
	})
}

// DeploymentTypeEQ applies the EQ predicate on the "deployment_type" field.
func DeploymentTypeEQ(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeploymentType), v))
	})
}

// DeploymentTypeNEQ applies the NEQ predicate on the "deployment_type" field.
func DeploymentTypeNEQ(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeploymentType), v))
	})
}

// DeploymentTypeIn applies the In predicate on the "deployment_type" field.
func DeploymentTypeIn(vs ...string) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeploymentType), v...))
	})
}

// DeploymentTypeNotIn applies the NotIn predicate on the "deployment_type" field.
func DeploymentTypeNotIn(vs ...string) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeploymentType), v...))
	})
}

// DeploymentTypeGT applies the GT predicate on the "deployment_type" field.
func DeploymentTypeGT(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeploymentType), v))
	})
}

// DeploymentTypeGTE applies the GTE predicate on the "deployment_type" field.
func DeploymentTypeGTE(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeploymentType), v))
	})
}

// DeploymentTypeLT applies the LT predicate on the "deployment_type" field.
func DeploymentTypeLT(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeploymentType), v))
	})
}

// DeploymentTypeLTE applies the LTE predicate on the "deployment_type" field.
func DeploymentTypeLTE(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeploymentType), v))
	})
}

// DeploymentTypeContains applies the Contains predicate on the "deployment_type" field.
func DeploymentTypeContains(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeploymentType), v))
	})
}

// DeploymentTypeHasPrefix applies the HasPrefix predicate on the "deployment_type" field.
func DeploymentTypeHasPrefix(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeploymentType), v))
	})
}

// DeploymentTypeHasSuffix applies the HasSuffix predicate on the "deployment_type" field.
func DeploymentTypeHasSuffix(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeploymentType), v))
	})
}

// DeploymentTypeEqualFold applies the EqualFold predicate on the "deployment_type" field.
func DeploymentTypeEqualFold(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeploymentType), v))
	})
}

// DeploymentTypeContainsFold applies the ContainsFold predicate on the "deployment_type" field.
func DeploymentTypeContainsFold(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeploymentType), v))
	})
}

// DeploymentRefEQ applies the EQ predicate on the "deployment_ref" field.
func DeploymentRefEQ(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeploymentRef), v))
	})
}

// DeploymentRefNEQ applies the NEQ predicate on the "deployment_ref" field.
func DeploymentRefNEQ(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeploymentRef), v))
	})
}

// DeploymentRefIn applies the In predicate on the "deployment_ref" field.
func DeploymentRefIn(vs ...string) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeploymentRef), v...))
	})
}

// DeploymentRefNotIn applies the NotIn predicate on the "deployment_ref" field.
func DeploymentRefNotIn(vs ...string) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeploymentRef), v...))
	})
}

// DeploymentRefGT applies the GT predicate on the "deployment_ref" field.
func DeploymentRefGT(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeploymentRef), v))
	})
}

// DeploymentRefGTE applies the GTE predicate on the "deployment_ref" field.
func DeploymentRefGTE(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeploymentRef), v))
	})
}

// DeploymentRefLT applies the LT predicate on the "deployment_ref" field.
func DeploymentRefLT(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeploymentRef), v))
	})
}

// DeploymentRefLTE applies the LTE predicate on the "deployment_ref" field.
func DeploymentRefLTE(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeploymentRef), v))
	})
}

// DeploymentRefContains applies the Contains predicate on the "deployment_ref" field.
func DeploymentRefContains(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeploymentRef), v))
	})
}

// DeploymentRefHasPrefix applies the HasPrefix predicate on the "deployment_ref" field.
func DeploymentRefHasPrefix(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeploymentRef), v))
	})
}

// DeploymentRefHasSuffix applies the HasSuffix predicate on the "deployment_ref" field.
func DeploymentRefHasSuffix(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeploymentRef), v))
	})
}

// DeploymentRefEqualFold applies the EqualFold predicate on the "deployment_ref" field.
func DeploymentRefEqualFold(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeploymentRef), v))
	})
}

// DeploymentRefContainsFold applies the ContainsFold predicate on the "deployment_ref" field.
func DeploymentRefContainsFold(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeploymentRef), v))
	})
}

// DeploymentEnvEQ applies the EQ predicate on the "deployment_env" field.
func DeploymentEnvEQ(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeploymentEnv), v))
	})
}

// DeploymentEnvNEQ applies the NEQ predicate on the "deployment_env" field.
func DeploymentEnvNEQ(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeploymentEnv), v))
	})
}

// DeploymentEnvIn applies the In predicate on the "deployment_env" field.
func DeploymentEnvIn(vs ...string) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeploymentEnv), v...))
	})
}

// DeploymentEnvNotIn applies the NotIn predicate on the "deployment_env" field.
func DeploymentEnvNotIn(vs ...string) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeploymentEnv), v...))
	})
}

// DeploymentEnvGT applies the GT predicate on the "deployment_env" field.
func DeploymentEnvGT(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeploymentEnv), v))
	})
}

// DeploymentEnvGTE applies the GTE predicate on the "deployment_env" field.
func DeploymentEnvGTE(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeploymentEnv), v))
	})
}

// DeploymentEnvLT applies the LT predicate on the "deployment_env" field.
func DeploymentEnvLT(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeploymentEnv), v))
	})
}

// DeploymentEnvLTE applies the LTE predicate on the "deployment_env" field.
func DeploymentEnvLTE(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeploymentEnv), v))
	})
}

// DeploymentEnvContains applies the Contains predicate on the "deployment_env" field.
func DeploymentEnvContains(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeploymentEnv), v))
	})
}

// DeploymentEnvHasPrefix applies the HasPrefix predicate on the "deployment_env" field.
func DeploymentEnvHasPrefix(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeploymentEnv), v))
	})
}

// DeploymentEnvHasSuffix applies the HasSuffix predicate on the "deployment_env" field.
func DeploymentEnvHasSuffix(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeploymentEnv), v))
	})
}

// DeploymentEnvEqualFold applies the EqualFold predicate on the "deployment_env" field.
func DeploymentEnvEqualFold(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeploymentEnv), v))
	})
}

// DeploymentEnvContainsFold applies the ContainsFold predicate on the "deployment_env" field.
func DeploymentEnvContainsFold(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeploymentEnv), v))
	})
}

// DeploymentStatusEQ applies the EQ predicate on the "deployment_status" field.
func DeploymentStatusEQ(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeploymentStatus), v))
	})
}

// DeploymentStatusNEQ applies the NEQ predicate on the "deployment_status" field.
func DeploymentStatusNEQ(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeploymentStatus), v))
	})
}

// DeploymentStatusIn applies the In predicate on the "deployment_status" field.
func DeploymentStatusIn(vs ...string) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeploymentStatus), v...))
	})
}

// DeploymentStatusNotIn applies the NotIn predicate on the "deployment_status" field.
func DeploymentStatusNotIn(vs ...string) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeploymentStatus), v...))
	})
}

// DeploymentStatusGT applies the GT predicate on the "deployment_status" field.
func DeploymentStatusGT(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeploymentStatus), v))
	})
}

// DeploymentStatusGTE applies the GTE predicate on the "deployment_status" field.
func DeploymentStatusGTE(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeploymentStatus), v))
	})
}

// DeploymentStatusLT applies the LT predicate on the "deployment_status" field.
func DeploymentStatusLT(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeploymentStatus), v))
	})
}

// DeploymentStatusLTE applies the LTE predicate on the "deployment_status" field.
func DeploymentStatusLTE(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeploymentStatus), v))
	})
}

// DeploymentStatusContains applies the Contains predicate on the "deployment_status" field.
func DeploymentStatusContains(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeploymentStatus), v))
	})
}

// DeploymentStatusHasPrefix applies the HasPrefix predicate on the "deployment_status" field.
func DeploymentStatusHasPrefix(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeploymentStatus), v))
	})
}

// DeploymentStatusHasSuffix applies the HasSuffix predicate on the "deployment_status" field.
func DeploymentStatusHasSuffix(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeploymentStatus), v))
	})
}

// DeploymentStatusEqualFold applies the EqualFold predicate on the "deployment_status" field.
func DeploymentStatusEqualFold(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeploymentStatus), v))
	})
}

// DeploymentStatusContainsFold applies the ContainsFold predicate on the "deployment_status" field.
func DeploymentStatusContainsFold(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeploymentStatus), v))
	})
}

// DeploymentLoginEQ applies the EQ predicate on the "deployment_login" field.
func DeploymentLoginEQ(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeploymentLogin), v))
	})
}

// DeploymentLoginNEQ applies the NEQ predicate on the "deployment_login" field.
func DeploymentLoginNEQ(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeploymentLogin), v))
	})
}

// DeploymentLoginIn applies the In predicate on the "deployment_login" field.
func DeploymentLoginIn(vs ...string) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeploymentLogin), v...))
	})
}

// DeploymentLoginNotIn applies the NotIn predicate on the "deployment_login" field.
func DeploymentLoginNotIn(vs ...string) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeploymentLogin), v...))
	})
}

// DeploymentLoginGT applies the GT predicate on the "deployment_login" field.
func DeploymentLoginGT(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeploymentLogin), v))
	})
}

// DeploymentLoginGTE applies the GTE predicate on the "deployment_login" field.
func DeploymentLoginGTE(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeploymentLogin), v))
	})
}

// DeploymentLoginLT applies the LT predicate on the "deployment_login" field.
func DeploymentLoginLT(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeploymentLogin), v))
	})
}

// DeploymentLoginLTE applies the LTE predicate on the "deployment_login" field.
func DeploymentLoginLTE(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeploymentLogin), v))
	})
}

// DeploymentLoginContains applies the Contains predicate on the "deployment_login" field.
func DeploymentLoginContains(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeploymentLogin), v))
	})
}

// DeploymentLoginHasPrefix applies the HasPrefix predicate on the "deployment_login" field.
func DeploymentLoginHasPrefix(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeploymentLogin), v))
	})
}

// DeploymentLoginHasSuffix applies the HasSuffix predicate on the "deployment_login" field.
func DeploymentLoginHasSuffix(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeploymentLogin), v))
	})
}

// DeploymentLoginEqualFold applies the EqualFold predicate on the "deployment_login" field.
func DeploymentLoginEqualFold(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeploymentLogin), v))
	})
}

// DeploymentLoginContainsFold applies the ContainsFold predicate on the "deployment_login" field.
func DeploymentLoginContainsFold(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeploymentLogin), v))
	})
}

// NotifiedEQ applies the EQ predicate on the "notified" field.
func NotifiedEQ(v bool) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotified), v))
	})
}

// NotifiedNEQ applies the NEQ predicate on the "notified" field.
func NotifiedNEQ(v bool) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNotified), v))
	})
}

// CheckedEQ applies the EQ predicate on the "checked" field.
func CheckedEQ(v bool) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChecked), v))
	})
}

// CheckedNEQ applies the NEQ predicate on the "checked" field.
func CheckedNEQ(v bool) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChecked), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Notification {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Notification(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserID), v))
	})
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserID), v))
	})
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserID), v))
	})
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserID), v))
	})
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserID), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Notification) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		p(s.Not())
	})
}
