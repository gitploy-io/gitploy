// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hanjunlee/gitploy/ent/approval"
	"github.com/hanjunlee/gitploy/ent/deployment"
	"github.com/hanjunlee/gitploy/ent/event"
	"github.com/hanjunlee/gitploy/ent/predicate"
	"github.com/hanjunlee/gitploy/ent/user"
)

// ApprovalUpdate is the builder for updating Approval entities.
type ApprovalUpdate struct {
	config
	hooks    []Hook
	mutation *ApprovalMutation
}

// Where appends a list predicates to the ApprovalUpdate builder.
func (au *ApprovalUpdate) Where(ps ...predicate.Approval) *ApprovalUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetStatus sets the "status" field.
func (au *ApprovalUpdate) SetStatus(a approval.Status) *ApprovalUpdate {
	au.mutation.SetStatus(a)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *ApprovalUpdate) SetNillableStatus(a *approval.Status) *ApprovalUpdate {
	if a != nil {
		au.SetStatus(*a)
	}
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *ApprovalUpdate) SetCreatedAt(t time.Time) *ApprovalUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *ApprovalUpdate) SetNillableCreatedAt(t *time.Time) *ApprovalUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *ApprovalUpdate) SetUpdatedAt(t time.Time) *ApprovalUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetUserID sets the "user_id" field.
func (au *ApprovalUpdate) SetUserID(s string) *ApprovalUpdate {
	au.mutation.SetUserID(s)
	return au
}

// SetDeploymentID sets the "deployment_id" field.
func (au *ApprovalUpdate) SetDeploymentID(i int) *ApprovalUpdate {
	au.mutation.SetDeploymentID(i)
	return au
}

// SetUser sets the "user" edge to the User entity.
func (au *ApprovalUpdate) SetUser(u *User) *ApprovalUpdate {
	return au.SetUserID(u.ID)
}

// SetDeployment sets the "deployment" edge to the Deployment entity.
func (au *ApprovalUpdate) SetDeployment(d *Deployment) *ApprovalUpdate {
	return au.SetDeploymentID(d.ID)
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (au *ApprovalUpdate) AddEventIDs(ids ...int) *ApprovalUpdate {
	au.mutation.AddEventIDs(ids...)
	return au
}

// AddEvent adds the "event" edges to the Event entity.
func (au *ApprovalUpdate) AddEvent(e ...*Event) *ApprovalUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEventIDs(ids...)
}

// Mutation returns the ApprovalMutation object of the builder.
func (au *ApprovalUpdate) Mutation() *ApprovalMutation {
	return au.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (au *ApprovalUpdate) ClearUser() *ApprovalUpdate {
	au.mutation.ClearUser()
	return au
}

// ClearDeployment clears the "deployment" edge to the Deployment entity.
func (au *ApprovalUpdate) ClearDeployment() *ApprovalUpdate {
	au.mutation.ClearDeployment()
	return au
}

// ClearEvent clears all "event" edges to the Event entity.
func (au *ApprovalUpdate) ClearEvent() *ApprovalUpdate {
	au.mutation.ClearEvent()
	return au
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (au *ApprovalUpdate) RemoveEventIDs(ids ...int) *ApprovalUpdate {
	au.mutation.RemoveEventIDs(ids...)
	return au
}

// RemoveEvent removes "event" edges to Event entities.
func (au *ApprovalUpdate) RemoveEvent(e ...*Event) *ApprovalUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ApprovalUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApprovalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *ApprovalUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ApprovalUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ApprovalUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *ApprovalUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := approval.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ApprovalUpdate) check() error {
	if v, ok := au.mutation.Status(); ok {
		if err := approval.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := au.mutation.UserID(); au.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	if _, ok := au.mutation.DeploymentID(); au.mutation.DeploymentCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"deployment\"")
	}
	return nil
}

func (au *ApprovalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   approval.Table,
			Columns: approval.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: approval.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: approval.FieldStatus,
		})
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: approval.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: approval.FieldUpdatedAt,
		})
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approval.UserTable,
			Columns: []string{approval.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approval.UserTable,
			Columns: []string{approval.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DeploymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approval.DeploymentTable,
			Columns: []string{approval.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approval.DeploymentTable,
			Columns: []string{approval.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   approval.EventTable,
			Columns: []string{approval.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEventIDs(); len(nodes) > 0 && !au.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   approval.EventTable,
			Columns: []string{approval.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   approval.EventTable,
			Columns: []string{approval.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approval.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ApprovalUpdateOne is the builder for updating a single Approval entity.
type ApprovalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApprovalMutation
}

// SetStatus sets the "status" field.
func (auo *ApprovalUpdateOne) SetStatus(a approval.Status) *ApprovalUpdateOne {
	auo.mutation.SetStatus(a)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *ApprovalUpdateOne) SetNillableStatus(a *approval.Status) *ApprovalUpdateOne {
	if a != nil {
		auo.SetStatus(*a)
	}
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *ApprovalUpdateOne) SetCreatedAt(t time.Time) *ApprovalUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *ApprovalUpdateOne) SetNillableCreatedAt(t *time.Time) *ApprovalUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *ApprovalUpdateOne) SetUpdatedAt(t time.Time) *ApprovalUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetUserID sets the "user_id" field.
func (auo *ApprovalUpdateOne) SetUserID(s string) *ApprovalUpdateOne {
	auo.mutation.SetUserID(s)
	return auo
}

// SetDeploymentID sets the "deployment_id" field.
func (auo *ApprovalUpdateOne) SetDeploymentID(i int) *ApprovalUpdateOne {
	auo.mutation.SetDeploymentID(i)
	return auo
}

// SetUser sets the "user" edge to the User entity.
func (auo *ApprovalUpdateOne) SetUser(u *User) *ApprovalUpdateOne {
	return auo.SetUserID(u.ID)
}

// SetDeployment sets the "deployment" edge to the Deployment entity.
func (auo *ApprovalUpdateOne) SetDeployment(d *Deployment) *ApprovalUpdateOne {
	return auo.SetDeploymentID(d.ID)
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (auo *ApprovalUpdateOne) AddEventIDs(ids ...int) *ApprovalUpdateOne {
	auo.mutation.AddEventIDs(ids...)
	return auo
}

// AddEvent adds the "event" edges to the Event entity.
func (auo *ApprovalUpdateOne) AddEvent(e ...*Event) *ApprovalUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEventIDs(ids...)
}

// Mutation returns the ApprovalMutation object of the builder.
func (auo *ApprovalUpdateOne) Mutation() *ApprovalMutation {
	return auo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (auo *ApprovalUpdateOne) ClearUser() *ApprovalUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// ClearDeployment clears the "deployment" edge to the Deployment entity.
func (auo *ApprovalUpdateOne) ClearDeployment() *ApprovalUpdateOne {
	auo.mutation.ClearDeployment()
	return auo
}

// ClearEvent clears all "event" edges to the Event entity.
func (auo *ApprovalUpdateOne) ClearEvent() *ApprovalUpdateOne {
	auo.mutation.ClearEvent()
	return auo
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (auo *ApprovalUpdateOne) RemoveEventIDs(ids ...int) *ApprovalUpdateOne {
	auo.mutation.RemoveEventIDs(ids...)
	return auo
}

// RemoveEvent removes "event" edges to Event entities.
func (auo *ApprovalUpdateOne) RemoveEvent(e ...*Event) *ApprovalUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEventIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ApprovalUpdateOne) Select(field string, fields ...string) *ApprovalUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Approval entity.
func (auo *ApprovalUpdateOne) Save(ctx context.Context) (*Approval, error) {
	var (
		err  error
		node *Approval
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApprovalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ApprovalUpdateOne) SaveX(ctx context.Context) *Approval {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ApprovalUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ApprovalUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *ApprovalUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := approval.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ApprovalUpdateOne) check() error {
	if v, ok := auo.mutation.Status(); ok {
		if err := approval.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := auo.mutation.UserID(); auo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	if _, ok := auo.mutation.DeploymentID(); auo.mutation.DeploymentCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"deployment\"")
	}
	return nil
}

func (auo *ApprovalUpdateOne) sqlSave(ctx context.Context) (_node *Approval, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   approval.Table,
			Columns: approval.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: approval.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Approval.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, approval.FieldID)
		for _, f := range fields {
			if !approval.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != approval.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: approval.FieldStatus,
		})
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: approval.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: approval.FieldUpdatedAt,
		})
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approval.UserTable,
			Columns: []string{approval.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approval.UserTable,
			Columns: []string{approval.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DeploymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approval.DeploymentTable,
			Columns: []string{approval.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approval.DeploymentTable,
			Columns: []string{approval.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   approval.EventTable,
			Columns: []string{approval.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEventIDs(); len(nodes) > 0 && !auo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   approval.EventTable,
			Columns: []string{approval.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   approval.EventTable,
			Columns: []string{approval.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Approval{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approval.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
