// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gitploy-io/gitploy/ent/approval"
	"github.com/gitploy-io/gitploy/ent/deployment"
	"github.com/gitploy-io/gitploy/ent/user"
)

// Approval is the model entity for the Approval schema.
type Approval struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status approval.Status `json:"status"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id"`
	// DeploymentID holds the value of the "deployment_id" field.
	DeploymentID int `json:"deployment_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApprovalQuery when eager-loading is set.
	Edges ApprovalEdges `json:"edges"`
}

// ApprovalEdges holds the relations/edges for other nodes in the graph.
type ApprovalEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Deployment holds the value of the deployment edge.
	Deployment *Deployment `json:"deployment,omitempty"`
	// Event holds the value of the event edge.
	Event []*Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApprovalEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// DeploymentOrErr returns the Deployment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApprovalEdges) DeploymentOrErr() (*Deployment, error) {
	if e.loadedTypes[1] {
		if e.Deployment == nil {
			// The edge deployment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: deployment.Label}
		}
		return e.Deployment, nil
	}
	return nil, &NotLoadedError{edge: "deployment"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading.
func (e ApprovalEdges) EventOrErr() ([]*Event, error) {
	if e.loadedTypes[2] {
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Approval) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case approval.FieldID, approval.FieldDeploymentID:
			values[i] = new(sql.NullInt64)
		case approval.FieldStatus, approval.FieldUserID:
			values[i] = new(sql.NullString)
		case approval.FieldCreatedAt, approval.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Approval", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Approval fields.
func (a *Approval) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case approval.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case approval.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = approval.Status(value.String)
			}
		case approval.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case approval.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case approval.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				a.UserID = value.String
			}
		case approval.FieldDeploymentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_id", values[i])
			} else if value.Valid {
				a.DeploymentID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Approval entity.
func (a *Approval) QueryUser() *UserQuery {
	return (&ApprovalClient{config: a.config}).QueryUser(a)
}

// QueryDeployment queries the "deployment" edge of the Approval entity.
func (a *Approval) QueryDeployment() *DeploymentQuery {
	return (&ApprovalClient{config: a.config}).QueryDeployment(a)
}

// QueryEvent queries the "event" edge of the Approval entity.
func (a *Approval) QueryEvent() *EventQuery {
	return (&ApprovalClient{config: a.config}).QueryEvent(a)
}

// Update returns a builder for updating this Approval.
// Note that you need to call Approval.Unwrap() before calling this method if this Approval
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Approval) Update() *ApprovalUpdateOne {
	return (&ApprovalClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Approval entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Approval) Unwrap() *Approval {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Approval is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Approval) String() string {
	var builder strings.Builder
	builder.WriteString("Approval(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", user_id=")
	builder.WriteString(a.UserID)
	builder.WriteString(", deployment_id=")
	builder.WriteString(fmt.Sprintf("%v", a.DeploymentID))
	builder.WriteByte(')')
	return builder.String()
}

// Approvals is a parsable slice of Approval.
type Approvals []*Approval

func (a Approvals) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
