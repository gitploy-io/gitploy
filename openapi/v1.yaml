openapi: '3.0.2'
info:
  title: gitploy.
  version: '1.0'
servers:
  - url: http://localhost/api/v1
  - url: https://gitploy.jp.ngrok.io/api/v1
paths:
  /license:
    get:
      tags:
        - License
      summary: Return license
      responses:
        '200':
          description: Licnese
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos:
    get:
      tags:
        - Repo
      summary: List repositories the user can access.
      parameters:
        - in: query
          name: sort 
          schema:
            type: boolean
            default: false
        - in: query
          name: q
          schema:
            type: string
            default: ""
        - in: query
          name: namespace
          schema:
            type: string
            default: ""
        - in: query
          name: name
          schema:
            type: string
            default: ""
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: The page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
            description: The number per page
      responses:
        '200':
          description: Repositories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repositories'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}:
    get:
      tags:
        - Repo
      summary: Get the repository.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
    patch:
      tags:
        - Repo
      summary: Update the repository.
      description: Basically patch the respository field. And it creates a new webhook when it activates.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                config_path:
                  type: string
                  default: deploy.yml
                active:
                  type: boolean
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}/commits:
    get:
      tags:
        - Repo
      summary: List commits of repository.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: query
          name: branch
          schema:
            type: string
            default: 
            description: > 
              The branch to start listing commits from. 
              Default - the repositoryâ€™s default branch.
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: The page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
            description: The page number
      responses:
        '200':
          description: Commits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commits'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}/commits/{sha}:
    get:
      tags:
        - Repo
      summary: Get the commit of repository.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: sha
          required: true
          schema:
            type: string
            description: The commit sha
      responses:
        '200':
          description: Commit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commit'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}/commits/{sha}/statuses:
    get:
      tags:
        - Repo
      summary: List statuses of the commit.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: sha
          required: true
          schema:
            type: string
            description: The commit sha
      responses:
        '200':
          description: Statuses for ref
          content:
            application/json:
              schema:
                type: object
                properties:
                  state:
                    type: string
                  statuses:
                    $ref: '#/components/schemas/Statuses'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}/branches:
    get:
      tags:
        - Repo
      summary: List branches of the repository.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: The page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
            description: The item count per page
      responses:
        '200':
          description: Branches
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branches'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}/branches/{branch}:
    get:
      tags:
        - Repo
      summary: Get the branch of repository.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: branch
          required: true
          schema:
            type: string
            description: The branch name
      responses:
        '200':
          description: Branch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}/tags:
    get:
      tags:
        - Repo
      summary: List tags of the repository.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: The page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
            description: The item count per page
      responses:
        '200':
          description: Tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tags'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}/tags/{tag}:
    get:
      tags:
        - Repo
      summary: Get the tag of the repository.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: tag
          required: true
          schema:
            type: string
            description: The tag name
      responses:
        '200':
          description: Tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}/deployments:
    get:
      tags:
        - Repo
      summary: List deployments of repository.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: query
          name: env
          description: Name for the target deployment environment.
          schema:
            type: string
            description: The target environment
        - in: query
          name: status
          description: The status of deployment.
          schema:
            type: string
            description: The deployment status
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: The page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
            description: The item count per page
      responses:
        '200':
          description: Deployment list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployments'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
    post:
      tags:
        - Repo
      summary: Create a new deployment.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  default: commit
                ref:
                  type: string
                env:
                  type: string
              required:
                - type
                - ref
                - env
      responses:
        '201':
          description: Created
        '400': 
          $ref: '#/components/responses/400BadRequest'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '409':
          $ref: '#/components/responses/409Conflict'
          description: The deployment number is conflicted.
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
          description: The deployment payload or the configuration is invalid.
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}/deployments/{number}:
    get:
      tags:
        - Repo
      summary: Get the deployments by the number.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: number
          required: true
          schema:
            type: integer
            description: The deployment number.
      responses:
        '200':
          description: Deployment 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
          description: The deployment payload or the configuration is invalid.
        '500':
          $ref: '#/components/responses/500InternalError'
    patch: 
      tags:
        - Repo
      summary: Deploy to SCM if a status of the deployment is waiting.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: number
          required: true
          schema:
            type: integer
            description: The deployment number.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status: 
                  type: string
                  default: created
              required:
                - status
      responses:
        '200':
          description: Deployment 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
          description: The configuration is invalid or it is not approved.
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}/deployments/{number}/changes:
    get:
      tags:
        - Repo
      summary: List commits from the environment state.
      description: > 
        List commits from the environment state, internally, 
        it compares with the previous succeed deployment.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: number
          required: true
          schema:
            type: integer
            description: The deployment number.
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
      responses:
        '200':
          description: Commits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commits'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}/deployments/{number}/rollback:
    post:
      tags:
        - Repo
      summary: Rollback by the deployment.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: number
          required: true
          schema:
            type: integer
            description: The deployment number.
      responses:
        '201':
          description: Rollbacked Deployment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '422':
          description: The deployment number or the configuration is invalid.
          $ref: '#/components/responses/422UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}/deployments/{number}/reviews:
    get:
      tags:
        - Repo
      summary: List reviews of the deployment.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: number
          required: true
          schema:
            type: integer
            description: The deployment number.
      responses:
        '200':
          description: List of reviews.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reviews'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}/deployments/{number}/review:
    get:
      tags:
        - Repo
      summary: Get the review of the user.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: number
          required: true
          schema:
            type: integer
            description: The deployment number.
      responses:
        '200':
          description: Return the review.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
    patch:
      tags:
        - Repo
      summary: Update the review of the user if it exist.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: number
          required: true
          schema:
            type: integer
            description: The deployment number.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - approved
                    - rejected
                comment:
                  type: string
                  description: Leave the comment with the review.
              required:
                - status
      responses:
        '200':
          description: Return the review.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}/locks:
    get:
      tags:
        - Repo
      summary: List locked environments.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Locks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Locks'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
    post:
      tags:
        - Repo
      summary: Lock the environment.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                env:
                  type: string
                  description: The name of env in deploy.yml
                expired_at:
                  type: string
              required:
                - env
      responses:
        '201':
          description: Lock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lock'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}/locks/{lockId}:
    patch:
      tags:
        - Repo
      summary: Patch the lock.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: lockId
          required: true
          schema:
            type: integer
            description: The lock ID.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                expired_at:
                  type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      tags:
        - Repo
      summary: Unlock the environment.
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: lockId
          required: true
          schema:
            type: integer
            description: The lock ID.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}/perms:
    get:
      tags:
        - Repo
      summary: Get permissions for the repository
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: query
          name: q
          schema:
            type: string
            description: Search perms by login.
        - in: query
          name: page
          schema:
            type: number
        - in: query
          name: per_page
          schema:
            type: number
      responses:
        '200':
          description: Perms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Perms'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{namespace}/{name}/config:
    get:
      tags:
        - Repo
      summary: Get the config file
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Config 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '422': 
          $ref: '#/components/responses/422UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500InternalError'
  /users:
    get:
      tags:
        - User
      summary: Get user list.
      parameters:
        - in: query
          name: q
          schema:
            type: string
            description: Search users by login.
        - in: query
          name: page
          schema:
            type: number
            default: 1
        - in: query
          name: per_page
          schema:
            type: number
            default: 30
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/User'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
  /users/{id}:
    patch:
      tags:
        - User
      summary: Update the user.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: User id.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                admin: 
                  type: boolean
                  default: false
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/User'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      tags:
        - User
      summary: Delete the user.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: User id.
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/User'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
  /user:
    get:
      tags:
        - User
      summary: Get my information.
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/User'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '500':
          $ref: '#/components/responses/500InternalError'
  /user/rate-limit:
    get:
      tags:
        - User
      summary: Get rate-limit of SCM.
      responses:
        '200':
          description: Rate Limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimit'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
  /search/deployments:
    get:
      tags:
        - Search
      summary: Search deployments.
      parameters:
        - in: query
          name: statuses
          required: false
          schema:
            type: string
            description: > 
              Status list comma separated.
        - in: query
          name: owned
          required: false
          schema:
            type: boolean
            description: Own deployments.
        - in: query
          name: from
          required: false
          schema:
            type: string
            format: date-time
            description: Begin of created_at.
        - in: query
          name: to
          required: false
          schema:
            type: string
            format: date-time
            description: End of created_at.
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: The page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
            description: The number per page
      responses:
        '200':
          description: Returns deployments which matches to conditions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployments'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalError'
  /search/reviews:
    get:
      tags:
        - Search
      summary: Search assigned reviews.
      responses:
        '200':
          description: Returns deployments which matches to conditions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployments'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '500':
          $ref: '#/components/responses/500InternalError'
  /stream/events:
    get:
      tags:
        - Event
      summary: Subscribes streaming event
      responses:
        '200':
          description: Returns events for deployments and reviews
          content:
            text/event-stream:
              schema:
                type: array
                format: chunked
                items:
                  type: object
                  format: text 
                  required:
                    - id 
                    - event 
                    - data
                  properties: 
                    id:
                      type: integer
                    event:
                      type: string
                    data:
                      type: object 
                      format: json 
                      required:
                        - id
                        - kind
                        - type
                        - created_at
                        - edges
                      properties: 
                        id:
                          type: integer
                        kind:
                          type: string
                          enum:
                            - deployment
                            - review
                        type:
                          type: string
                          enum:
                            - created
                            - updated
                            - deleted
                        created_at:
                          type: string
                        deleted_id:
                          type: integer
                          description: The ID of deleted resource.
                        edges:
                          type: object
                          properties:
                            deployment:
                              $ref: '#/components/schemas/Deployment'
                            review:
                              $ref: '#/components/schemas/Review'
  /sync:
    post:
      tags:
        - Sync
      summary: Synchronize with SCM.
      responses:
        '200':
          description: OK
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '402':
          $ref: '#/components/responses/402PaymentRequired'
        '500':
          $ref: '#/components/responses/500InternalError'
security:
  - BearerAuth: []
  - OAuth2:
    - read

components:
  schemas:
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: number
        login:
          type: string
        avatar:
          type: string
        admin:
          type: boolean
        created_at:
          type: string
        updated_at:
          type: string
        edges:
          type: object
          properties:
            chat_user:
              $ref: '#/components/schemas/ChatUser'
      required:
        - id
        - login
        - admin
        - avatar
        - created_at
        - updated_at
        - edges
    ChatUser:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
      required:
        - id
        - created_at
        - updated_at
    Repositories:
      type: array
      items:
        $ref: '#/components/schemas/Repository'
    Repository:
      type: object
      properties:
        id:
          type: number
        namespace:
          type: string
          description: Repository owner
        name:
          type: string
        description:
          type: string
        config_path:
          type: string
        active:
          type: boolean
        webhook_id:
          type: integer
        synced_at:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        latest_deployed_at:
          type: string
        edges:
          type: object
          properties:
            deployments:
              $ref: '#/components/schemas/Deployments'
      required:
        - id
        - namespace
        - name
        - description
        - config_path
        - active
        - created_at
        - updated_at
    Perms:
      type: array
      items:
        $ref: '#/components/schemas/Perm'
    Perm:
      type: object
      properties:
        id:
          type: number
        repo_perm:
          type: string
        synced_at:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        edges:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            repo:
              $ref: '#/components/schemas/Repository'
      required:
        - id
        - repo_perm
        - created_at
        - updated_at
    Commits:
      type: array
      items:
        $ref: '#/components/schemas/Commit'
    Commit:
      type: object
      properties:
        sha:
          type: string
        message:
          type: string
        is_pull_request:
          type: boolean
        html_url:
          type: string  
        author:
          type: object
          properties:
            login:
              type: string
            avatar_url:
              type: string
            date:
              type: string
      required:
        - sha
        - message
        - is_pull_request
        - html_url
    Statuses:
      type: array
      items:
        $ref: '#/components/schemas/Status'
    Status:
      type: object
      properties:
        context:
          type: string
        avatar_url: 
          type: string
        target_url:
          type: string
        state:
          type: string
          description: The state is one of failure, pending, and success.
          enum:
            - pending
            - failure
            - success
      required:
        - context
        - avatar_url
        - target_url
        - state
    Branches:
      type: array
      items:
        $ref: '#/components/schemas/Branch'
    Branch:
      type: object
      properties:
        name:
          type: string
        commit_sha:
          type: string
      required:
        - name
        - commit_sha
    Tags:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    Tag:
      type: object
      properties:
        name:
          type: string
        commit_sha:
          type: string
      required:
        - name
        - commit_sha
    Deployments:
      type: array
      items:
        $ref: '#/components/schemas/Deployment'
    Deployment:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
          enum:
            - commit
            - branch
            - tag
        ref:
          type: string
        env:
          type: string
        status:
          type: string
          enum:
            - waiting
            - created
            - running
            - success
            - failure
            - canceled
        uid:
          type: integer
        sha:
          type: string
        html_url:
          type: string
        production_environment:
          type: boolean
        is_rollback:
          type: boolean
        created_at:
          type: string
        updated_at:
          type: string
        edges:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            repo:
              $ref: '#/components/schemas/Repository'
            deployment_statuses:
              type: array
              items:
                $ref: '#/components/schemas/DeploymentStatus'
      required:
        - id
        - type
        - ref
        - env
        - status
        - production_environment
        - is_rollback
        - created_at
        - updated_at
    DeploymentStatus:
      type: object
      properties:
        id:
          type: number
        status:
          type: string
        description:
          type: string
        log_url:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
      required:
        - id
        - status
        - created_at
        - updated_at
    Locks:
      type: array
      items:
        $ref: '#/components/schemas/Lock'
    Lock:
      type: object
      properties:
        id:
          type: number
        env:
          type: string
        expired_at:
          type: string
        created_at:
          type: string
        edges:
          type: object
          properties:
            repo:
              $ref: '#/components/schemas/Repository'
            user:
              $ref: '#/components/schemas/User'
      required:
        - id
        - env
        - created_at
    Config:
      type: object
      properties:
        envs:
          type: array
          items:
            $ref: '#/components/schemas/Env'
    Env:
      type: object
      properties:
        name:
          type: string
        task:
          type: string
        description:
          type: string
        auto_merge:
          type: boolean
        required_contexts:
          type: array
          items:
            type: string
        payload:
          type: string
        production_environment:
          type: boolean
        review:
          type: object
          properties:
            enabled: 
              type: boolean
            reviewers:
              type: array
              items:
                type: string
          required:
            - enabled
            - reviewers
      required:
        - name
        - task
        - description
        - auto_merge
        - payload
        - production_environment
    Reviews:
      type: array
      items:
        $ref: '#/components/schemas/Review'
    Review:
      type: object
      properties:
        id:
          type: integer
        status:
          type: string
          enum:
            - pending
            - rejected
            - approved
        comment:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        edges:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            deployment:
              $ref: '#/components/schemas/Deployment'
      required:
        - id
        - status
        - comment
        - created_at
        - updated_at
    RateLimit:
      type: object
      properties:
        limit:
          type: number
        remaining:
          type: number
        reset:
          type: string
      required:
        - limit
        - remaining
        - reset
    License:
      type: object
      properties:
        kind: 
          type: string
        member_count:
          type: number
        member_limit:
          type: number
        expired_at:
          type: string
      required:
        - kind
        - member_count
    Error:
      type: object
      properties:
        code:
          type: string
        message: 
          type: string
      required:
        - message

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: Hash key of user
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://github.com/oauth/authorize
          tokenUrl: https://github.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations
    
  responses:
    400BadRequest:
      description: |
        The request could not be understood by the server due to malformed syntax.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    401Unauthorized:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    402PaymentRequired:
      description: License is expired
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    403Forbidden:
      description: Permisson denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    404NotFound:
      description: The resource is not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    409Conflict:
      description: The conflict occurs
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    422UnprocessableEntity:
      description: |
        the syntax of the request entity is correct but was unable to process the contained instructions. 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        
    500InternalError:
      description: Server internal error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
