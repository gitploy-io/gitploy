// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	ent "github.com/hanjunlee/gitploy/ent"
	vo "github.com/hanjunlee/gitploy/vo"
)

// MockInteractor is a mock of Interactor interface.
type MockInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockInteractorMockRecorder
}

// MockInteractorMockRecorder is the mock recorder for MockInteractor.
type MockInteractorMockRecorder struct {
	mock *MockInteractor
}

// NewMockInteractor creates a new mock instance.
func NewMockInteractor(ctrl *gomock.Controller) *MockInteractor {
	mock := &MockInteractor{ctrl: ctrl}
	mock.recorder = &MockInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractor) EXPECT() *MockInteractorMockRecorder {
	return m.recorder
}

// DeletePermsOfUserLessThanUpdatedAt mocks base method.
func (m *MockInteractor) DeletePermsOfUserLessThanUpdatedAt(ctx context.Context, u *ent.User, t time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermsOfUserLessThanUpdatedAt", ctx, u, t)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermsOfUserLessThanUpdatedAt indicates an expected call of DeletePermsOfUserLessThanUpdatedAt.
func (mr *MockInteractorMockRecorder) DeletePermsOfUserLessThanUpdatedAt(ctx, u, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermsOfUserLessThanUpdatedAt", reflect.TypeOf((*MockInteractor)(nil).DeletePermsOfUserLessThanUpdatedAt), ctx, u, t)
}

// IsEntryRepo mocks base method.
func (m *MockInteractor) IsEntryRepo(ctx context.Context, namespace string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEntryRepo", ctx, namespace)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEntryRepo indicates an expected call of IsEntryRepo.
func (mr *MockInteractorMockRecorder) IsEntryRepo(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEntryRepo", reflect.TypeOf((*MockInteractor)(nil).IsEntryRepo), ctx, namespace)
}

// ListRemoteRepos mocks base method.
func (m *MockInteractor) ListRemoteRepos(ctx context.Context, u *ent.User) ([]*vo.RemoteRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemoteRepos", ctx, u)
	ret0, _ := ret[0].([]*vo.RemoteRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemoteRepos indicates an expected call of ListRemoteRepos.
func (mr *MockInteractorMockRecorder) ListRemoteRepos(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemoteRepos", reflect.TypeOf((*MockInteractor)(nil).ListRemoteRepos), ctx, u)
}

// SyncRemoteRepo mocks base method.
func (m *MockInteractor) SyncRemoteRepo(ctx context.Context, u *ent.User, re *vo.RemoteRepo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncRemoteRepo", ctx, u, re)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncRemoteRepo indicates an expected call of SyncRemoteRepo.
func (mr *MockInteractorMockRecorder) SyncRemoteRepo(ctx, u, re interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncRemoteRepo", reflect.TypeOf((*MockInteractor)(nil).SyncRemoteRepo), ctx, u, re)
}
