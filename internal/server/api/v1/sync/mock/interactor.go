// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	ent "github.com/gitploy-io/gitploy/ent"
	vo "github.com/gitploy-io/gitploy/extent"
	gomock "github.com/golang/mock/gomock"
)

// MockInteractor is a mock of Interactor interface.
type MockInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockInteractorMockRecorder
}

// MockInteractorMockRecorder is the mock recorder for MockInteractor.
type MockInteractorMockRecorder struct {
	mock *MockInteractor
}

// NewMockInteractor creates a new mock instance.
func NewMockInteractor(ctrl *gomock.Controller) *MockInteractor {
	mock := &MockInteractor{ctrl: ctrl}
	mock.recorder = &MockInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractor) EXPECT() *MockInteractorMockRecorder {
	return m.recorder
}

// DeletePermsOfUserLessThanSyncedAt mocks base method.
func (m *MockInteractor) DeletePermsOfUserLessThanSyncedAt(ctx context.Context, u *ent.User, t time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermsOfUserLessThanSyncedAt", ctx, u, t)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermsOfUserLessThanSyncedAt indicates an expected call of DeletePermsOfUserLessThanSyncedAt.
func (mr *MockInteractorMockRecorder) DeletePermsOfUserLessThanSyncedAt(ctx, u, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermsOfUserLessThanSyncedAt", reflect.TypeOf((*MockInteractor)(nil).DeletePermsOfUserLessThanSyncedAt), ctx, u, t)
}

// IsEntryOrg mocks base method.
func (m *MockInteractor) IsEntryOrg(ctx context.Context, namespace string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEntryOrg", ctx, namespace)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEntryOrg indicates an expected call of IsEntryOrg.
func (mr *MockInteractorMockRecorder) IsEntryOrg(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEntryOrg", reflect.TypeOf((*MockInteractor)(nil).IsEntryOrg), ctx, namespace)
}

// ListRemoteRepos mocks base method.
func (m *MockInteractor) ListRemoteRepos(ctx context.Context, u *ent.User) ([]*extent.RemoteRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemoteRepos", ctx, u)
	ret0, _ := ret[0].([]*extent.RemoteRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemoteRepos indicates an expected call of ListRemoteRepos.
func (mr *MockInteractorMockRecorder) ListRemoteRepos(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemoteRepos", reflect.TypeOf((*MockInteractor)(nil).ListRemoteRepos), ctx, u)
}

// SyncRemoteRepo mocks base method.
func (m *MockInteractor) SyncRemoteRepo(ctx context.Context, u *ent.User, re *extent.RemoteRepo, t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncRemoteRepo", ctx, u, re, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncRemoteRepo indicates an expected call of SyncRemoteRepo.
func (mr *MockInteractorMockRecorder) SyncRemoteRepo(ctx, u, re, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncRemoteRepo", reflect.TypeOf((*MockInteractor)(nil).SyncRemoteRepo), ctx, u, re, t)
}
