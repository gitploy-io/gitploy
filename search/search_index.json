{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gitploy What is Gitploy? GitHub provides the deployment API to deploy a specific ref(branch, SHA, tag). It enables your organization to build the deployment system loosely coupled tooling without worrying about the implementation details of delivering different types of applications (e.g., web, native). But it takes a lot of resources to build the deployment system from scratch. Gitploy enables your organization to build the deployment system around deployment API in minutes , and it provides the place to manage all deployment and deploying in the same manner. Features Manage all deployments in one place. Provides the intuitive UI to deploy a specific ref (branch, SHA, tag). Build an event-driven deployment system for loosely coupled tooling. Provides both continuous delivery and continuous deployment. Provides advanced deployment features: Rollback, Review, Lock, Freeze Window. Provides DevOps metrics.","title":"Home"},{"location":"#gitploy","text":"","title":"Gitploy"},{"location":"#what-is-gitploy","text":"GitHub provides the deployment API to deploy a specific ref(branch, SHA, tag). It enables your organization to build the deployment system loosely coupled tooling without worrying about the implementation details of delivering different types of applications (e.g., web, native). But it takes a lot of resources to build the deployment system from scratch. Gitploy enables your organization to build the deployment system around deployment API in minutes , and it provides the place to manage all deployment and deploying in the same manner.","title":"What is Gitploy?"},{"location":"#features","text":"Manage all deployments in one place. Provides the intuitive UI to deploy a specific ref (branch, SHA, tag). Build an event-driven deployment system for loosely coupled tooling. Provides both continuous delivery and continuous deployment. Provides advanced deployment features: Rollback, Review, Lock, Freeze Window. Provides DevOps metrics.","title":"Features"},{"location":"contributing/","text":"Contributing Please take a moment to review this document in order to make the contribution process easy and effective Support Requests The discussions page is the preferred channel for support requests. Please do not use the issues for personal support requests. Feature Requests Feature requests are always welcome. It is up to you to make a case to convince the developers of the merits of this feature. Please provide as much detail and context as possible. Pull Requests Please discuss the feature on the issue before working on any significant pull requests. And pull requests should avoid containing unrelated commits. Please check the checklist to increase the likelihood of your pull request being accepted on time: Run the unit tests. Include unit tests when you contribute a new feature. Include unit tests when you contribute a bug fix to prevent regressions. Development Server 1. Install prerequsites: golang +1.17 mockgen @v1.6.0 2. Set up the .env file at the root directory: GITPLOY_SERVER_HOST=localhost GITPLOY_GITHUB_CLIENT_ID=XXXXXXXXXXXXXXX GITPLOY_GITHUB_CLIENT_SECRET=XXXXXXXXXXXXX GITPLOY_STORE_SOURCE=file:./sqlite3.db?cache=shared&_fk=1 Note that if you want to interact with GitHub in the local environment, you should install tunneling tools such as ngork and expose your local server. 3. Run the server: go run ./cmd/server UI 1. Install prerequisites: node +14.17.0 2. Install dependencies cd ./ui npm install 3. Set up the .env file at the ui directory: REACT_APP_GITPLOY_TOKEN=YOUR_TOKEN REACT_APP_GITPLOY_SERVER=http://localhost 4. Run: npm start","title":"Contributing"},{"location":"contributing/#contributing","text":"Please take a moment to review this document in order to make the contribution process easy and effective","title":"Contributing"},{"location":"contributing/#support-requests","text":"The discussions page is the preferred channel for support requests. Please do not use the issues for personal support requests.","title":"Support Requests"},{"location":"contributing/#feature-requests","text":"Feature requests are always welcome. It is up to you to make a case to convince the developers of the merits of this feature. Please provide as much detail and context as possible.","title":"Feature Requests"},{"location":"contributing/#pull-requests","text":"Please discuss the feature on the issue before working on any significant pull requests. And pull requests should avoid containing unrelated commits. Please check the checklist to increase the likelihood of your pull request being accepted on time: Run the unit tests. Include unit tests when you contribute a new feature. Include unit tests when you contribute a bug fix to prevent regressions.","title":"Pull Requests"},{"location":"contributing/#development","text":"","title":"Development"},{"location":"contributing/#server","text":"1. Install prerequsites: golang +1.17 mockgen @v1.6.0 2. Set up the .env file at the root directory: GITPLOY_SERVER_HOST=localhost GITPLOY_GITHUB_CLIENT_ID=XXXXXXXXXXXXXXX GITPLOY_GITHUB_CLIENT_SECRET=XXXXXXXXXXXXX GITPLOY_STORE_SOURCE=file:./sqlite3.db?cache=shared&_fk=1 Note that if you want to interact with GitHub in the local environment, you should install tunneling tools such as ngork and expose your local server. 3. Run the server: go run ./cmd/server","title":"Server"},{"location":"contributing/#ui","text":"1. Install prerequisites: node +14.17.0 2. Install dependencies cd ./ui npm install 3. Set up the .env file at the ui directory: REACT_APP_GITPLOY_TOKEN=YOUR_TOKEN REACT_APP_GITPLOY_SERVER=http://localhost 4. Run: npm start","title":"UI"},{"location":"faq/","text":"FAQ Q. I tried to deploy, and the deployment status has been pending as created for a while. How could I update it? Don't worry. Gitploy transit the deployment status into canceled if pending (i.e. created or waiting ) for thirty minutes. Questions? We are always happy to help with questions you might have. Search our documentation or check out answers to common questions. You can also post questions or comments to our community or Slack .","title":"FAQ"},{"location":"faq/#faq","text":"Q. I tried to deploy, and the deployment status has been pending as created for a while. How could I update it? Don't worry. Gitploy transit the deployment status into canceled if pending (i.e. created or waiting ) for thirty minutes.","title":"FAQ"},{"location":"faq/#questions","text":"We are always happy to help with questions you might have. Search our documentation or check out answers to common questions. You can also post questions or comments to our community or Slack .","title":"Questions?"},{"location":"concepts/deploy.yml/","text":"deploy.yml Gitploy configures a pipeline with a simple, easy\u2011to\u2011read file that you commit to your git repository. The default path is deploy.yml at the root directory, but you can replace the file path in the settings tab of Gitploy. You can check the documentation for the specification of the configuration file and also references Use Cases . \u26a0\ufe0f Note that the configuration file must be at the head of the default branch. Quick Start If you want to get started quickly, you should click the New Configuration link, copy the deploy.yml file, and push it into your git repository. Then you can find the production environment in Gitploy. # deploy.yml envs : - name : production auto_merge : false # To avoid the context verification. # required_context: [] Figure) New Configuration Link Features Multi Environment For multi-environment, Gitploy provides you can make different pipelines for each environment, respectively. The configuration has to be defined under the envs field. The following example shows each environment has a different configuration. envs : # Development environment - name : development auto_merge : false required_contexts : [] # Production environment - name : production auto_merge : true required_contexts : - test - docker-image Parameters of GitHub deployment API Internally, Gitploy posts a deployment to GitHub deployments API with parameters from the configuration file. These parameters help you can verify the artifact before you start to deploy. The configuration provides fields to set all parameters of GitHub deployment API. You can check the document for the detail. envs : - name : production task : deploy:lambda description : Start deploying to the production. auto_merge : false required_contexts : - test - integration-test production_environment : true Auto Deploy Gitploy provides not only manual deployment but also auto-deployment. Gitploy is listening for the push event dispatched from GitHub and triggers to deploy automatically when the ref is matched with the auto_deploy_on of the configuration file. envs : - name : production auto_deploy_on : refs/heads/main production_environment : true Deploy Freeze Window Gitploy support to add a window to prevent unintended deployment for the environment. You can freeze a window periodically by a cron expression. envs : - name : production frozen_windows : # Freeze every midnights - start : \"50 23 * * *\" duration : 20m location : America/New_York # Freeze every weekends - start : \"0 * * * SAT,SUN\" duration : 1h location : Asia/Seoul Review Gitploy provides the review process. You can list up to users on the configuration file. You can check the document for the detail. envs : - name : production review : enabled : true reviewers : [ \"ocotocat\" , \"noah\" ]","title":"deploy.yml"},{"location":"concepts/deploy.yml/#deployyml","text":"Gitploy configures a pipeline with a simple, easy\u2011to\u2011read file that you commit to your git repository. The default path is deploy.yml at the root directory, but you can replace the file path in the settings tab of Gitploy. You can check the documentation for the specification of the configuration file and also references Use Cases . \u26a0\ufe0f Note that the configuration file must be at the head of the default branch.","title":"deploy.yml"},{"location":"concepts/deploy.yml/#quick-start","text":"If you want to get started quickly, you should click the New Configuration link, copy the deploy.yml file, and push it into your git repository. Then you can find the production environment in Gitploy. # deploy.yml envs : - name : production auto_merge : false # To avoid the context verification. # required_context: [] Figure) New Configuration Link","title":"Quick Start"},{"location":"concepts/deploy.yml/#features","text":"","title":"Features"},{"location":"concepts/deploy.yml/#multi-environment","text":"For multi-environment, Gitploy provides you can make different pipelines for each environment, respectively. The configuration has to be defined under the envs field. The following example shows each environment has a different configuration. envs : # Development environment - name : development auto_merge : false required_contexts : [] # Production environment - name : production auto_merge : true required_contexts : - test - docker-image","title":"Multi Environment"},{"location":"concepts/deploy.yml/#parameters-of-github-deployment-api","text":"Internally, Gitploy posts a deployment to GitHub deployments API with parameters from the configuration file. These parameters help you can verify the artifact before you start to deploy. The configuration provides fields to set all parameters of GitHub deployment API. You can check the document for the detail. envs : - name : production task : deploy:lambda description : Start deploying to the production. auto_merge : false required_contexts : - test - integration-test production_environment : true","title":"Parameters of GitHub deployment API"},{"location":"concepts/deploy.yml/#auto-deploy","text":"Gitploy provides not only manual deployment but also auto-deployment. Gitploy is listening for the push event dispatched from GitHub and triggers to deploy automatically when the ref is matched with the auto_deploy_on of the configuration file. envs : - name : production auto_deploy_on : refs/heads/main production_environment : true","title":"Auto Deploy"},{"location":"concepts/deploy.yml/#deploy-freeze-window","text":"Gitploy support to add a window to prevent unintended deployment for the environment. You can freeze a window periodically by a cron expression. envs : - name : production frozen_windows : # Freeze every midnights - start : \"50 23 * * *\" duration : 20m location : America/New_York # Freeze every weekends - start : \"0 * * * SAT,SUN\" duration : 1h location : Asia/Seoul","title":"Deploy Freeze Window"},{"location":"concepts/deploy.yml/#review","text":"Gitploy provides the review process. You can list up to users on the configuration file. You can check the document for the detail. envs : - name : production review : enabled : true reviewers : [ \"ocotocat\" , \"noah\" ]","title":"Review"},{"location":"concepts/deployment/","text":"Deployment Gitploy provides two types of deployment: Deploy and Rollback. Deploy Deploying is the primary feature of Gitploy. When you deploy, you have to select the environment and the reference. You can choose one of the environments defined in the configuration file (i.e. deploy.yml ). You can select a commit, branch, or tag for reference. When you deploy the ref, Gitploy post the deployment to GitHub, and Github dispatch the event to external services. Figure) Deploy Rollback Rollback is the best way to recover while you fix the problems, and Gitploy supports the rollback. You can choose one of the deployed references for the environment to roll back. When you roll back to the specific reference, Gitploy posts a new deployment with the reference from the rollbacked deployment. Note that if the reference of the rollbacked deployment is a branch, Gitploy automatically references the commit SHA to avoid deploying the head of the branch. For best practice, you should lock the environment to block deploying by others until finishing to fix the problems. Gitploy provide the 'lock' feature in UI and Chatops. Figure) Rollback","title":"Deployment"},{"location":"concepts/deployment/#deployment","text":"Gitploy provides two types of deployment: Deploy and Rollback.","title":"Deployment"},{"location":"concepts/deployment/#deploy","text":"Deploying is the primary feature of Gitploy. When you deploy, you have to select the environment and the reference. You can choose one of the environments defined in the configuration file (i.e. deploy.yml ). You can select a commit, branch, or tag for reference. When you deploy the ref, Gitploy post the deployment to GitHub, and Github dispatch the event to external services. Figure) Deploy","title":"Deploy"},{"location":"concepts/deployment/#rollback","text":"Rollback is the best way to recover while you fix the problems, and Gitploy supports the rollback. You can choose one of the deployed references for the environment to roll back. When you roll back to the specific reference, Gitploy posts a new deployment with the reference from the rollbacked deployment. Note that if the reference of the rollbacked deployment is a branch, Gitploy automatically references the commit SHA to avoid deploying the head of the branch. For best practice, you should lock the environment to block deploying by others until finishing to fix the problems. Gitploy provide the 'lock' feature in UI and Chatops. Figure) Rollback","title":"Rollback"},{"location":"concepts/how-it-work/","text":"How it works Gitploy builds the system around GitHub deployment API . It's an event-driven decoupled way to deploy your code. Internally, Gitploy creates a new Github deployment resource, and Github dispatches a deployment event that external services can listen for and act. It enables developers and organizations to build loosely coupled tooling. This approach has several pros: Replace deployment tools easily without changing your deployment pipeline. Easy to implement details of deploying different types of applications (e.g., web, native). Below is a simple diagram for how these interactions would work: +---------+ +--------+ +---------+ +-------------+ | Gitploy | | GitHub | | Tools | | Your Server | +---------+ +--------+ +---------+ +-------------+ | | | | | Create Deployment | | | |--------------------->| | | | | | | | Deployment Created | | | |<---------------------| | | | | | | | | Deployment Event | | | |---------------------->| | | | | SSH+Deploys | | | |-------------------->| | | | | | | Deployment Status | | | |<----------------------| | | Deployment Status | | | |<---------------------| | | | | | | | | | Deploy Completed | | | |<--------------------| | | Deployment Status | | | |<----------------------| | | Deployment Status | | | |<---------------------| | | | | | | Gitploy lets you can build the advanced deployment system so your team and organization enable to deploy the application with lower risk and faster. Keep in mind that Gitploy is never actually accessing your servers. It's up to your tools to interact with deployment events.","title":"How it works"},{"location":"concepts/how-it-work/#how-it-works","text":"Gitploy builds the system around GitHub deployment API . It's an event-driven decoupled way to deploy your code. Internally, Gitploy creates a new Github deployment resource, and Github dispatches a deployment event that external services can listen for and act. It enables developers and organizations to build loosely coupled tooling. This approach has several pros: Replace deployment tools easily without changing your deployment pipeline. Easy to implement details of deploying different types of applications (e.g., web, native). Below is a simple diagram for how these interactions would work: +---------+ +--------+ +---------+ +-------------+ | Gitploy | | GitHub | | Tools | | Your Server | +---------+ +--------+ +---------+ +-------------+ | | | | | Create Deployment | | | |--------------------->| | | | | | | | Deployment Created | | | |<---------------------| | | | | | | | | Deployment Event | | | |---------------------->| | | | | SSH+Deploys | | | |-------------------->| | | | | | | Deployment Status | | | |<----------------------| | | Deployment Status | | | |<---------------------| | | | | | | | | | Deploy Completed | | | |<--------------------| | | Deployment Status | | | |<----------------------| | | Deployment Status | | | |<---------------------| | | | | | | Gitploy lets you can build the advanced deployment system so your team and organization enable to deploy the application with lower risk and faster. Keep in mind that Gitploy is never actually accessing your servers. It's up to your tools to interact with deployment events.","title":"How it works"},{"location":"concepts/license/","text":"License Community Edition Gitploy is an open source-based project so that anyone uses software under the OSS license free. You can check the LICENSE for the detail. Enterprise Edition Gitploy provides a non-commercial license. It is free for up to five members. But if the count of members is over five, you have to consider purchasing the license to unlock the Gtiploy Enterprise edition. To purchase, you can connect on the enterprise page . After purchase, you can unlock the Gtiploy Enterprise edition by setting the configuration .","title":"License"},{"location":"concepts/license/#license","text":"","title":"License"},{"location":"concepts/license/#community-edition","text":"Gitploy is an open source-based project so that anyone uses software under the OSS license free. You can check the LICENSE for the detail.","title":"Community Edition"},{"location":"concepts/license/#enterprise-edition","text":"Gitploy provides a non-commercial license. It is free for up to five members. But if the count of members is over five, you have to consider purchasing the license to unlock the Gtiploy Enterprise edition. To purchase, you can connect on the enterprise page . After purchase, you can unlock the Gtiploy Enterprise edition by setting the configuration .","title":"Enterprise Edition"},{"location":"concepts/lock/","text":"Lock The worst thing that can happen is someone deploys to the same repository during an incident. The lock helps with this. We provide the locking system to block deployments going out to the environment. You can lock the environment simply by clicking the LOCK button in the UI. And if you want to reserve unlock, you can configure the auto-unlock timer.","title":"Lock"},{"location":"concepts/lock/#lock","text":"The worst thing that can happen is someone deploys to the same repository during an incident. The lock helps with this. We provide the locking system to block deployments going out to the environment. You can lock the environment simply by clicking the LOCK button in the UI. And if you want to reserve unlock, you can configure the auto-unlock timer.","title":"Lock"},{"location":"concepts/metrics/","text":"Metrics Gtiploy publishes and exposes metrics that Prometheus can consume at the standard /metrics endpoint. Configuration 1. Configure the server: GITPLOY_PROMETHEUS_ENABLED=true GITPLOY_PROMETHEUS_AUTH_SECRET=YOUR_SECRET 2. Configure the prometheus scraper: global : scrape_interval : 60s scrape_configs : - job_name : gitploy authorization : credentials : YOUR_SECRET static_configs : - targets : [ 'domain.com' ] Gitploy Metrics Gitploy provides the following Gitploy metrics. Note that Some metrics are provided only for the production environment (i.e. production_environment: true in the configuration file). gitploy_requests_total How many HTTP requests processed, partitioned by status code and HTTP method. gitploy_request_duration_seconds The HTTP request latencies in seconds gitploy_total_deployment_count The total deployment count of the production deployments. gitploy_total_rollback_count The total rollback count of the production deployments. gitploy_total_line_additions The total added lines of the production deployments. gitploy_total_line_deletions The total deleted lines of the production deployments. gitploy_total_line_changes The total changed lines of the production deployments. gitploy_total_lead_time_seconds The total amount of time it takes a commit to get into the production environments. gitploy_total_commit_count The total commit count of production deployments. gitploy_member_count The total count of members. gitploy_member_limit The limit count of members. gitploy_total_active_repo_count The count of active repositories. gitploy_total_repo_count The count of repositories.","title":"Metrics"},{"location":"concepts/metrics/#metrics","text":"Gtiploy publishes and exposes metrics that Prometheus can consume at the standard /metrics endpoint.","title":"Metrics"},{"location":"concepts/metrics/#configuration","text":"1. Configure the server: GITPLOY_PROMETHEUS_ENABLED=true GITPLOY_PROMETHEUS_AUTH_SECRET=YOUR_SECRET 2. Configure the prometheus scraper: global : scrape_interval : 60s scrape_configs : - job_name : gitploy authorization : credentials : YOUR_SECRET static_configs : - targets : [ 'domain.com' ]","title":"Configuration"},{"location":"concepts/metrics/#gitploy-metrics","text":"Gitploy provides the following Gitploy metrics. Note that Some metrics are provided only for the production environment (i.e. production_environment: true in the configuration file). gitploy_requests_total How many HTTP requests processed, partitioned by status code and HTTP method. gitploy_request_duration_seconds The HTTP request latencies in seconds gitploy_total_deployment_count The total deployment count of the production deployments. gitploy_total_rollback_count The total rollback count of the production deployments. gitploy_total_line_additions The total added lines of the production deployments. gitploy_total_line_deletions The total deleted lines of the production deployments. gitploy_total_line_changes The total changed lines of the production deployments. gitploy_total_lead_time_seconds The total amount of time it takes a commit to get into the production environments. gitploy_total_commit_count The total commit count of production deployments. gitploy_member_count The total count of members. gitploy_member_limit The limit count of members. gitploy_total_active_repo_count The count of active repositories. gitploy_total_repo_count The count of repositories.","title":"Gitploy Metrics"},{"location":"concepts/notification/","text":"Notification Gitploy notifies users when deployments and reviews are created or updated. Now, Gitploy supports browser notification and Slack. Browser Gitploy provides the browser notification to alert events as default. Almost modern browsers provide notification API , but unfortunately, some browsers are not supported. To avoid browser compatibility, you can replace it with Slack. Note that if the notification doesn't work even though your browser provides it, you should check the setting that it is enabled or not. Slack Slack is a popular messaging app for businesses globally. Gitploy supports Slack to notify events of deployments and reviews. You can figure out the Connect button on the settings page after integrating with Slack. Check the documentation for details. Figure) Slack notification","title":"Notification"},{"location":"concepts/notification/#notification","text":"Gitploy notifies users when deployments and reviews are created or updated. Now, Gitploy supports browser notification and Slack.","title":"Notification"},{"location":"concepts/notification/#browser","text":"Gitploy provides the browser notification to alert events as default. Almost modern browsers provide notification API , but unfortunately, some browsers are not supported. To avoid browser compatibility, you can replace it with Slack. Note that if the notification doesn't work even though your browser provides it, you should check the setting that it is enabled or not.","title":"Browser"},{"location":"concepts/notification/#slack","text":"Slack is a popular messaging app for businesses globally. Gitploy supports Slack to notify events of deployments and reviews. You can figure out the Connect button on the settings page after integrating with Slack. Check the documentation for details. Figure) Slack notification","title":"Slack"},{"location":"concepts/permission/","text":"Permission Gitploy supports fine-grained access control for the repository. The user has explicit permissions(read, write, and admin) to the repository. Synchronization The permission of the repository is determined while Gitploy synchronizes with Github. If the access permission has changed, you should re-synchronize it in Gitploy again. Capabilities Here are capabilities for each permission: Read - Users can read all activities that happened in the repository, such as deployments, reviews. And users are also capable of responding to the review. Write - Users can lock, deploy, and rollback. Admin - Users can configures the repository, such as activating. Of course, write and admin permission cover the ability of read permission. System admin The permission of the system admin can manage members of Gitploy. You can identify admin members by GITPLOY_ADMIN_USERS .","title":"Permission"},{"location":"concepts/permission/#permission","text":"Gitploy supports fine-grained access control for the repository. The user has explicit permissions(read, write, and admin) to the repository.","title":"Permission"},{"location":"concepts/permission/#synchronization","text":"The permission of the repository is determined while Gitploy synchronizes with Github. If the access permission has changed, you should re-synchronize it in Gitploy again.","title":"Synchronization"},{"location":"concepts/permission/#capabilities","text":"Here are capabilities for each permission: Read - Users can read all activities that happened in the repository, such as deployments, reviews. And users are also capable of responding to the review. Write - Users can lock, deploy, and rollback. Admin - Users can configures the repository, such as activating. Of course, write and admin permission cover the ability of read permission.","title":"Capabilities"},{"location":"concepts/permission/#system-admin","text":"The permission of the system admin can manage members of Gitploy. You can identify admin members by GITPLOY_ADMIN_USERS .","title":"System admin"},{"location":"concepts/review/","text":"Review Gitploy has the review to require at least one approval for the deployment. You can list up to reviewers on the configuration file. The reviewers must be logged in and have read permission for the repository. Review process 1. To enable review, you must configure the review field first. envs : - name : production review : enabled : true reviewers : [ \"USER_LOGIN1\" , \"USER_LOGIN2\" ] 2. When a user deploys in the 'deploy' tab, Gitploy automatically requests a review to reviewers. A reviewer should check what is changed from the latest one. 3. Finally, a reviewer confirms to approve or reject the deployment, and the deploy button will be enabled if a reviewer approves. I recommend that a reviewer use the Approve and Deploy to let a reviewer acknowledges that the deployment is started. Notification Gitploy notifies users when a review is requested or responded to. You can check the documentation for the detail.","title":"Review"},{"location":"concepts/review/#review","text":"Gitploy has the review to require at least one approval for the deployment. You can list up to reviewers on the configuration file. The reviewers must be logged in and have read permission for the repository.","title":"Review"},{"location":"concepts/review/#review-process","text":"1. To enable review, you must configure the review field first. envs : - name : production review : enabled : true reviewers : [ \"USER_LOGIN1\" , \"USER_LOGIN2\" ] 2. When a user deploys in the 'deploy' tab, Gitploy automatically requests a review to reviewers. A reviewer should check what is changed from the latest one. 3. Finally, a reviewer confirms to approve or reject the deployment, and the deploy button will be enabled if a reviewer approves. I recommend that a reviewer use the Approve and Deploy to let a reviewer acknowledges that the deployment is started.","title":"Review process"},{"location":"concepts/review/#notification","text":"Gitploy notifies users when a review is requested or responded to. You can check the documentation for the detail.","title":"Notification"},{"location":"concepts/self-hosted-server/","text":"Self-hosted Server Gitploy provides a self-hosted server, which is locally installed and hosted by the user, to provide complete control over your data at a lower cost. We're providing the installation guide for each environment. And if you meet across an issue please post questions or comments to our community .","title":"Self-hosted Server"},{"location":"concepts/self-hosted-server/#self-hosted-server","text":"Gitploy provides a self-hosted server, which is locally installed and hosted by the user, to provide complete control over your data at a lower cost. We're providing the installation guide for each environment. And if you meet across an issue please post questions or comments to our community .","title":"Self-hosted Server"},{"location":"references/GITPLOY_ADMIN_USERS/","text":"GITPLOY_ADMIN_USERS Optional comma-separated list of accounts, used to identify which accounts are admin. GITPLOY_ADMIN_USERS=noah,liam","title":"GITPLOY_ADMIN_USERS"},{"location":"references/GITPLOY_ADMIN_USERS/#gitploy_admin_users","text":"Optional comma-separated list of accounts, used to identify which accounts are admin. GITPLOY_ADMIN_USERS=noah,liam","title":"GITPLOY_ADMIN_USERS"},{"location":"references/GITPLOY_GITHUB_BASE_URL/","text":"GITPLOY_GITHUB_BASE_URL Optional string value configures the base URL for the GitHub enterprise. GITPLOY_GITHUB_BASE_URL=https://github.gitploy.io/","title":"GITPLOY_GITHUB_BASE_URL"},{"location":"references/GITPLOY_GITHUB_BASE_URL/#gitploy_github_base_url","text":"Optional string value configures the base URL for the GitHub enterprise. GITPLOY_GITHUB_BASE_URL=https://github.gitploy.io/","title":"GITPLOY_GITHUB_BASE_URL"},{"location":"references/GITPLOY_GITHUB_CLIENT_ID/","text":"GITPLOY_GITHUB_CLIENT_ID Required string value configures the GitHub OAuth client id. This is used to authorize access to GitHub on behalf of a Gitploy user. GITPLOY_GITHUB_CLIENT_ID=05136f462e57d80189be","title":"GITPLOY_GITHUB_CLIENT_ID"},{"location":"references/GITPLOY_GITHUB_CLIENT_ID/#gitploy_github_client_id","text":"Required string value configures the GitHub OAuth client id. This is used to authorize access to GitHub on behalf of a Gitploy user. GITPLOY_GITHUB_CLIENT_ID=05136f462e57d80189be","title":"GITPLOY_GITHUB_CLIENT_ID"},{"location":"references/GITPLOY_GITHUB_CLIENT_SECRET/","text":"GITPLOY_GITHUB_CLIENT_SECRET Required string value configures the GitHub OAuth client secret. This is used to authorize access to GitHub on behalf of a Gitploy user. GITPLOY_GITHUB_CLIENT_SECRET=7c2245e9228a77d2cbddaa61ddc78d","title":"GITPLOY_GITHUB_CLIENT_SECRET"},{"location":"references/GITPLOY_GITHUB_CLIENT_SECRET/#gitploy_github_client_secret","text":"Required string value configures the GitHub OAuth client secret. This is used to authorize access to GitHub on behalf of a Gitploy user. GITPLOY_GITHUB_CLIENT_SECRET=7c2245e9228a77d2cbddaa61ddc78d","title":"GITPLOY_GITHUB_CLIENT_SECRET"},{"location":"references/GITPLOY_GITHUB_SCOPES/","text":"GITPLOY_GITHUB_SCOPES Optional String value provides a comma-separated scopes of GitHub OAuth. The default values should not be modified. GITPLOY_GITHUB_SCOPES=repo,read:user,read:org","title":"GITPLOY_GITHUB_SCOPES"},{"location":"references/GITPLOY_GITHUB_SCOPES/#gitploy_github_scopes","text":"Optional String value provides a comma-separated scopes of GitHub OAuth. The default values should not be modified. GITPLOY_GITHUB_SCOPES=repo,read:user,read:org","title":"GITPLOY_GITHUB_SCOPES"},{"location":"references/GITPLOY_LICENSE/","text":"GITPLOY_LICENSE Optional string value provides the license key. This is used to unlock the Gtiploy Enterprise edition. GITPLOY_LICENSE=eyJtZW1lYmVyX2xpbWl0Ijo1LCJleHBpcmVkX2F0IjoiMjAyMi0wOC0yMlQxNjo0OToxNC42MDUxMjQrMDk6MDAifQ","title":"GITPLOY_LICENSE"},{"location":"references/GITPLOY_LICENSE/#gitploy_license","text":"Optional string value provides the license key. This is used to unlock the Gtiploy Enterprise edition. GITPLOY_LICENSE=eyJtZW1lYmVyX2xpbWl0Ijo1LCJleHBpcmVkX2F0IjoiMjAyMi0wOC0yMlQxNjo0OToxNC42MDUxMjQrMDk6MDAifQ","title":"GITPLOY_LICENSE"},{"location":"references/GITPLOY_MEMBER_ENTRIES/","text":"GITPLOY_MEMBER_ENTRIES Optional comma-separated list of accounts, used to limit to users in this list, or users that are members of organizations included in this list. GITPLOY_MEMBER_ENTRIES=octocat,gitploy-io","title":"GITPLOY_MEMBER_ENTRIES"},{"location":"references/GITPLOY_MEMBER_ENTRIES/#gitploy_member_entries","text":"Optional comma-separated list of accounts, used to limit to users in this list, or users that are members of organizations included in this list. GITPLOY_MEMBER_ENTRIES=octocat,gitploy-io","title":"GITPLOY_MEMBER_ENTRIES"},{"location":"references/GITPLOY_ORGANIZATION_ENTRIES/","text":"GITPLOY_ORGANIZATION_ENTRIES Optional comma-separated list of organizations, used to limit which organization(or owner) are syncronized between your source control management system and Gitploy. *Note that this variable must be set before your first login. If you don't set this environment it synchronize with all repositories the user owns. GITPLOY_ORGANIZATION_ENTRIES=gitploy-io,octocat,facebook","title":"GITPLOY_ORGANIZATION_ENTRIES"},{"location":"references/GITPLOY_ORGANIZATION_ENTRIES/#gitploy_organization_entries","text":"Optional comma-separated list of organizations, used to limit which organization(or owner) are syncronized between your source control management system and Gitploy. *Note that this variable must be set before your first login. If you don't set this environment it synchronize with all repositories the user owns. GITPLOY_ORGANIZATION_ENTRIES=gitploy-io,octocat,facebook","title":"GITPLOY_ORGANIZATION_ENTRIES"},{"location":"references/GITPLOY_PROMETHEUS_AUTH_SECRET/","text":"GITPLOY_PROMETHEUS_AUTH_SECRET Optional string value to authorize the scrape request from the Prometheus. It authorizes with the Authorization header on request. GITPLOY_PROMETHEUS_AUTH_SECRET=92e6c41f002e71bf84e6c6b02e4c1e1b","title":"GITPLOY_PROMETHEUS_AUTH_SECRET"},{"location":"references/GITPLOY_PROMETHEUS_AUTH_SECRET/#gitploy_prometheus_auth_secret","text":"Optional string value to authorize the scrape request from the Prometheus. It authorizes with the Authorization header on request. GITPLOY_PROMETHEUS_AUTH_SECRET=92e6c41f002e71bf84e6c6b02e4c1e1b","title":"GITPLOY_PROMETHEUS_AUTH_SECRET"},{"location":"references/GITPLOY_PROMETHEUS_ENABLED/","text":"GITPLOY_PROMETHEUS_ENABLED Optional string value to enable exposing metrics that Prometheus can consume. The default value is false . GITPLOY_PROMETHEUS_ENABLED=true","title":"GITPLOY_PROMETHEUS_ENABLED"},{"location":"references/GITPLOY_PROMETHEUS_ENABLED/#gitploy_prometheus_enabled","text":"Optional string value to enable exposing metrics that Prometheus can consume. The default value is false . GITPLOY_PROMETHEUS_ENABLED=true","title":"GITPLOY_PROMETHEUS_ENABLED"},{"location":"references/GITPLOY_PROXY_SERVER_HOST/","text":"GITPLOY_PROXY_SERVER_HOST Optional string value used to create webhooks that are routed through an alternate proxy server. The use case of this setting is that you need GitHub webhooks to route through a public proxy. GITPLOY_PROXY_SERVER_HOST=external.cloud.gitploy.io","title":"GITPLOY_PROXY_SERVER_HOST"},{"location":"references/GITPLOY_PROXY_SERVER_HOST/#gitploy_proxy_server_host","text":"Optional string value used to create webhooks that are routed through an alternate proxy server. The use case of this setting is that you need GitHub webhooks to route through a public proxy. GITPLOY_PROXY_SERVER_HOST=external.cloud.gitploy.io","title":"GITPLOY_PROXY_SERVER_HOST"},{"location":"references/GITPLOY_PROXY_SERVER_PROTO/","text":"GITPLOY_PROXY_SERVER_PROTO Optional string value used to create webhooks that are routed through an alternate proxy server. The use case of this setting is that you need GitHub webhooks to route through a public proxy. It can be one of them: http or https . GITPLOY_PROXY_SERVER_PROTO=https","title":"GITPLOY_PROXY_SERVER_PROTO"},{"location":"references/GITPLOY_PROXY_SERVER_PROTO/#gitploy_proxy_server_proto","text":"Optional string value used to create webhooks that are routed through an alternate proxy server. The use case of this setting is that you need GitHub webhooks to route through a public proxy. It can be one of them: http or https . GITPLOY_PROXY_SERVER_PROTO=https","title":"GITPLOY_PROXY_SERVER_PROTO"},{"location":"references/GITPLOY_SERVER_HOST/","text":"GITPLOY_SERVER_HOST Required string value configures the user-facing hostname. This value is used to create webhooks and redirect urls. It has no actual impact on serving traffic. GITPLOY_SERVER_HOST=cloud.gitploy.io","title":"GITPLOY_SERVER_HOST"},{"location":"references/GITPLOY_SERVER_HOST/#gitploy_server_host","text":"Required string value configures the user-facing hostname. This value is used to create webhooks and redirect urls. It has no actual impact on serving traffic. GITPLOY_SERVER_HOST=cloud.gitploy.io","title":"GITPLOY_SERVER_HOST"},{"location":"references/GITPLOY_SERVER_PROTO/","text":"GITPLOY_SERVER_PROTO Optional string value configures the user-facing protocol. This value is used to create webhooks and redirect urls. It can be one of them: http or https , and the default value is https . GITPLOY_SERVER_PROTO=https","title":"GITPLOY_SERVER_PROTO"},{"location":"references/GITPLOY_SERVER_PROTO/#gitploy_server_proto","text":"Optional string value configures the user-facing protocol. This value is used to create webhooks and redirect urls. It can be one of them: http or https , and the default value is https . GITPLOY_SERVER_PROTO=https","title":"GITPLOY_SERVER_PROTO"},{"location":"references/GITPLOY_SLACK_CLIENT_ID/","text":"GITPLOY_SLACK_CLIENT_ID Optional string value configures the Slack OAuth client id. This is used to retrieve the bot token. GITPLOY_SLACK_CLIENT_ID=21501117479.21586613311226","title":"GITPLOY_SLACK_CLIENT_ID"},{"location":"references/GITPLOY_SLACK_CLIENT_ID/#gitploy_slack_client_id","text":"Optional string value configures the Slack OAuth client id. This is used to retrieve the bot token. GITPLOY_SLACK_CLIENT_ID=21501117479.21586613311226","title":"GITPLOY_SLACK_CLIENT_ID"},{"location":"references/GITPLOY_SLACK_CLIENT_SECRET/","text":"GITPLOY_SLACK_CLIENT_SECRET Optional string value configures the Slack OAuth client secret. This is used to retrieve the bot token. GITPLOY_SLACK_CLIENT_SECRET=6589c9644df4e12a7f88d3e7ce0ae6","title":"GITPLOY_SLACK_CLIENT_SECRET"},{"location":"references/GITPLOY_SLACK_CLIENT_SECRET/#gitploy_slack_client_secret","text":"Optional string value configures the Slack OAuth client secret. This is used to retrieve the bot token. GITPLOY_SLACK_CLIENT_SECRET=6589c9644df4e12a7f88d3e7ce0ae6","title":"GITPLOY_SLACK_CLIENT_SECRET"},{"location":"references/GITPLOY_STORE_DRIVER/","text":"GITPLOY_STORE_DRIVER String value provides the driver of store. It supports sqlite3 , mysql , and postgres . The default value is sqlite3 . GITPLOY_STORE_DRIVER=mysql","title":"GITPLOY_STORE_DRIVER"},{"location":"references/GITPLOY_STORE_DRIVER/#gitploy_store_driver","text":"String value provides the driver of store. It supports sqlite3 , mysql , and postgres . The default value is sqlite3 . GITPLOY_STORE_DRIVER=mysql","title":"GITPLOY_STORE_DRIVER"},{"location":"references/GITPLOY_STORE_SOURCE/","text":"GITPLOY_STORE_SOURCE String value provides the source of store. Configures the database connection string. The default value is the path of the embedded sqlite3 database file. GITPLOY_STORE_SOURCE=file:/data/sqlite3.db?cache=shared&_fk=1 Example mysql connection string (below). See the official driver documentation for more connection string details. GITPLOY_STORE_SOURCE=root:password@tcp(1.2.3.4:3306)/gitploy?parseTime=true Example postgres connection string (below). See the official driver documentation for more connection string details. GITPLOY_STORE_SOURCE=postgres://root:password@1.2.3.4:5432/gitploy?sslmode=disable","title":"GITPLOY_STORE_SOURCE"},{"location":"references/GITPLOY_STORE_SOURCE/#gitploy_store_source","text":"String value provides the source of store. Configures the database connection string. The default value is the path of the embedded sqlite3 database file. GITPLOY_STORE_SOURCE=file:/data/sqlite3.db?cache=shared&_fk=1 Example mysql connection string (below). See the official driver documentation for more connection string details. GITPLOY_STORE_SOURCE=root:password@tcp(1.2.3.4:3306)/gitploy?parseTime=true Example postgres connection string (below). See the official driver documentation for more connection string details. GITPLOY_STORE_SOURCE=postgres://root:password@1.2.3.4:5432/gitploy?sslmode=disable","title":"GITPLOY_STORE_SOURCE"},{"location":"references/GITPLOY_TLS_CERT/","text":"GITPLOY_TLS_CERT Path to an SSL certificate used by the server to accept HTTPS requests. This parameter is of type string and is optional. Please note that the cert file should be the concatenation of the server\u2019s certificate, any intermediates, and the certificate authority\u2019s certificate. GITPLOY_TLS_CERT=/path/to/cert.pem","title":"GITPLOY_TLS_CERT"},{"location":"references/GITPLOY_TLS_CERT/#gitploy_tls_cert","text":"Path to an SSL certificate used by the server to accept HTTPS requests. This parameter is of type string and is optional. Please note that the cert file should be the concatenation of the server\u2019s certificate, any intermediates, and the certificate authority\u2019s certificate. GITPLOY_TLS_CERT=/path/to/cert.pem","title":"GITPLOY_TLS_CERT"},{"location":"references/GITPLOY_TLS_KEY/","text":"GITPLOY_TLS_KEY Path to an SSL certificate key used by the server to accept HTTPS requests. This configuration parameter is of type string and is optional. GITPLOY_TLS_KEY=/path/to/key.pem","title":"GITPLOY_TLS_KEY"},{"location":"references/GITPLOY_TLS_KEY/#gitploy_tls_key","text":"Path to an SSL certificate key used by the server to accept HTTPS requests. This configuration parameter is of type string and is optional. GITPLOY_TLS_KEY=/path/to/key.pem","title":"GITPLOY_TLS_KEY"},{"location":"references/GITPLOY_WEBHOOK_SECRET/","text":"GITPLOY_WEBHOOK_SECRET Optional string value to create an http-signature for the webhook. The webhook recipient use this secret to verify request authenticity. GITPLOY_WEBHOOK_SECRET=ae354839ad94078b9ea125eec4874370","title":"GITPLOY_WEBHOOK_SECRET"},{"location":"references/GITPLOY_WEBHOOK_SECRET/#gitploy_webhook_secret","text":"Optional string value to create an http-signature for the webhook. The webhook recipient use this secret to verify request authenticity. GITPLOY_WEBHOOK_SECRET=ae354839ad94078b9ea125eec4874370","title":"GITPLOY_WEBHOOK_SECRET"},{"location":"references/configurations/","text":"Configurations Index of server configuration settings: GITPLOY_ADMIN_USERS GITPLOY_GITHUB_BASE_URL GITPLOY_GITHUB_CLIENT_ID GITPLOY_GITHUB_CLIENT_SECRET GITPLOY_GITHUB_SCOPES GITPLOY_LICENSE GITPLOY_MEMBER_ENTRIES GITPLOY_PROMETHEUS_AUTH_SECRET GITPLOY_PROMETHEUS_ENABLED GITPLOY_ORGANIZATION_ENTRIES GITPLOY_PROXY_SERVER_HOST GITPLOY_PROXY_SERVER_PROTO GITPLOY_SERVER_HOST GITPLOY_SERVER_PROTO GITPLOY_SLACK_CLIENT_ID GITPLOY_SLACK_CLIENT_SECRET GITPLOY_STORE_DRIVER GITPLOY_STORE_SOURCE GITPLOY_TLS_CERT GITPLOY_TLS_KEY GITPLOY_WEBHOOK_SECRET","title":"Configurations"},{"location":"references/configurations/#configurations","text":"Index of server configuration settings: GITPLOY_ADMIN_USERS GITPLOY_GITHUB_BASE_URL GITPLOY_GITHUB_CLIENT_ID GITPLOY_GITHUB_CLIENT_SECRET GITPLOY_GITHUB_SCOPES GITPLOY_LICENSE GITPLOY_MEMBER_ENTRIES GITPLOY_PROMETHEUS_AUTH_SECRET GITPLOY_PROMETHEUS_ENABLED GITPLOY_ORGANIZATION_ENTRIES GITPLOY_PROXY_SERVER_HOST GITPLOY_PROXY_SERVER_PROTO GITPLOY_SERVER_HOST GITPLOY_SERVER_PROTO GITPLOY_SLACK_CLIENT_ID GITPLOY_SLACK_CLIENT_SECRET GITPLOY_STORE_DRIVER GITPLOY_STORE_SOURCE GITPLOY_TLS_CERT GITPLOY_TLS_KEY GITPLOY_WEBHOOK_SECRET","title":"Configurations"},{"location":"references/deploy.yml/","text":"deploy.yml Field Type Required Description envs [] Env true Thie field configures the pipeline for each environment, respectively. Env Field Type Required Description name string true This field is the runtime environment such as production , staging , and qa . task string false This field is used by the deployment system to distinguish the kind of deployment. ( Only for GitHub ) description string false This field is the short description of the deployment. ( Only for GitHub ) auto_merge boolean false This field is used to ensure that the requested ref is not behind the repository's default branch. If you deploy with the commit or the tag you need to set false . For rollback, Gitploy set the field false . ( Only for GitHub ) required_contexts []string false This field allows you to specify a subset of contexts that must be success. ( Only for GitHub ) payload object or string false This field is JSON payload with extra information about the deployment. ( Only for GitHub ) production_environment boolean false This field specifies whether this runtime environment is production or not. deployable_ref string false This field specifies which the ref(branch, SHA, tag) is deployable or not. It supports the regular expression ( re2 ). auto_deploy_on string false This field controls auto-deployment behaviour given a ref(branch, SHA, tag). If any new push events are detected on this event, the deployment will be triggered. It supports the regular expression ( re2 ). E.g. refs/heads/main or refs/tags/v.* review Review false This field configures reviewers. frozen_windows [] Frozen Window false This field configures to add a frozen window to prevent unintended deployment for the environment. Review Field Type Required Description enabled boolean false This field makes to enables the review feature. The default value is false . reviewers []string false This field list up reviewers. The default value is [] . You should specify the maintainers of the project. Frozen Window Field Type Required Description start string true This field is a cron expression to indicate when the window starts. For example, 55 23 * * * means it starts to freeze a window before 5 minutes of midnight. You can check the documentation for details. duration string true This field configures how long the window is frozen from the starting. The duration string is a possibly signed sequence of decimal numbers and a unit suffix such as 5m , or 1h30m . Valid time units are ns , us , ms , s , m , h . location string false This field configures the location of the start time. The value is taken to be a location name corresponding to a file in the IANA Time Zone database, such as America/New_York . The default value is UTC . You can check the document for the Time Zone database name. Variables The following variables are available in ${ } syntax when evaluating deploy.yml before deploy or rollback: GITPLOY_DEPLOY_TASK : Returns deploy for deploy, but rollback, it returns the empty string. GITPLOY_ROLLBACK_TASK : Returns rollback for rollback, but deploy, it returns the empty string. GITPLOY_IS_ROLLBACK : Returns true for rollback, but deploy, it returns false . Example usage of this: envs : - name : prod task : \"${GITPLOY_DEPLOY_TASK}${GITPLOY_ROLLBACK_TASK}:kubernetes\" # It returns \"deploy:kubernetes\" or \"rollback:kubernetes\" And Gitploy provides the string operation to facilitate customized values. You can check supported functions at here . envs : - name : prod task : \"${GITPLOY_DEPLOY_TASK=rollback}:kubernetes\" # It returns \"deploy:kubernetes\" or \"rollback:kubernetes\"","title":"deploy.yml"},{"location":"references/deploy.yml/#deployyml","text":"Field Type Required Description envs [] Env true Thie field configures the pipeline for each environment, respectively.","title":"deploy.yml"},{"location":"references/deploy.yml/#env","text":"Field Type Required Description name string true This field is the runtime environment such as production , staging , and qa . task string false This field is used by the deployment system to distinguish the kind of deployment. ( Only for GitHub ) description string false This field is the short description of the deployment. ( Only for GitHub ) auto_merge boolean false This field is used to ensure that the requested ref is not behind the repository's default branch. If you deploy with the commit or the tag you need to set false . For rollback, Gitploy set the field false . ( Only for GitHub ) required_contexts []string false This field allows you to specify a subset of contexts that must be success. ( Only for GitHub ) payload object or string false This field is JSON payload with extra information about the deployment. ( Only for GitHub ) production_environment boolean false This field specifies whether this runtime environment is production or not. deployable_ref string false This field specifies which the ref(branch, SHA, tag) is deployable or not. It supports the regular expression ( re2 ). auto_deploy_on string false This field controls auto-deployment behaviour given a ref(branch, SHA, tag). If any new push events are detected on this event, the deployment will be triggered. It supports the regular expression ( re2 ). E.g. refs/heads/main or refs/tags/v.* review Review false This field configures reviewers. frozen_windows [] Frozen Window false This field configures to add a frozen window to prevent unintended deployment for the environment.","title":"Env"},{"location":"references/deploy.yml/#review","text":"Field Type Required Description enabled boolean false This field makes to enables the review feature. The default value is false . reviewers []string false This field list up reviewers. The default value is [] . You should specify the maintainers of the project.","title":"Review"},{"location":"references/deploy.yml/#frozen-window","text":"Field Type Required Description start string true This field is a cron expression to indicate when the window starts. For example, 55 23 * * * means it starts to freeze a window before 5 minutes of midnight. You can check the documentation for details. duration string true This field configures how long the window is frozen from the starting. The duration string is a possibly signed sequence of decimal numbers and a unit suffix such as 5m , or 1h30m . Valid time units are ns , us , ms , s , m , h . location string false This field configures the location of the start time. The value is taken to be a location name corresponding to a file in the IANA Time Zone database, such as America/New_York . The default value is UTC . You can check the document for the Time Zone database name.","title":"Frozen Window"},{"location":"references/deploy.yml/#variables","text":"The following variables are available in ${ } syntax when evaluating deploy.yml before deploy or rollback: GITPLOY_DEPLOY_TASK : Returns deploy for deploy, but rollback, it returns the empty string. GITPLOY_ROLLBACK_TASK : Returns rollback for rollback, but deploy, it returns the empty string. GITPLOY_IS_ROLLBACK : Returns true for rollback, but deploy, it returns false . Example usage of this: envs : - name : prod task : \"${GITPLOY_DEPLOY_TASK}${GITPLOY_ROLLBACK_TASK}:kubernetes\" # It returns \"deploy:kubernetes\" or \"rollback:kubernetes\" And Gitploy provides the string operation to facilitate customized values. You can check supported functions at here . envs : - name : prod task : \"${GITPLOY_DEPLOY_TASK=rollback}:kubernetes\" # It returns \"deploy:kubernetes\" or \"rollback:kubernetes\"","title":"Variables"},{"location":"tasks/database/","text":"Database Gitploy requires the use of a database backend for persistence. Gitploy uses an embedded SQLite database by default. This article provides alternate databases: MySQL and Postgres. MySQL Gitploy supports mysql 5.6 and higher as the database engine. The below example demonstrates mysql database configuration. See the official driver documentation for more connection string details. GITPLOY_STORE_DRIVER=mysql GITPLOY_STORE_SOURCE=root:password@tcp(1.2.3.4:3306)/gitploy?parseTime=true \u26a0\ufe0f WARNING You have to setting the SQL mode by removing NO_ZERO_DATE from the default setting to enable the zero value for the timestamp type. sql-mode='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' To set the SQL mode, you can check the official document . Postgres Gitploy supports postgres on the following 4 versions: 10 , 11 , 12 and 13 . The below example demonstrates postgres database configuration. See the official driver documentation for more connection string details. GITPLOY_STORE_DRIVER=postgres GITPLOY_STORE_SOURCE=root:password@1.2.3.4:5432/gitploy?sslmode=disable","title":"Database"},{"location":"tasks/database/#database","text":"Gitploy requires the use of a database backend for persistence. Gitploy uses an embedded SQLite database by default. This article provides alternate databases: MySQL and Postgres.","title":"Database"},{"location":"tasks/database/#mysql","text":"Gitploy supports mysql 5.6 and higher as the database engine. The below example demonstrates mysql database configuration. See the official driver documentation for more connection string details. GITPLOY_STORE_DRIVER=mysql GITPLOY_STORE_SOURCE=root:password@tcp(1.2.3.4:3306)/gitploy?parseTime=true","title":"MySQL"},{"location":"tasks/database/#warning","text":"You have to setting the SQL mode by removing NO_ZERO_DATE from the default setting to enable the zero value for the timestamp type. sql-mode='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' To set the SQL mode, you can check the official document .","title":"\u26a0\ufe0f WARNING"},{"location":"tasks/database/#postgres","text":"Gitploy supports postgres on the following 4 versions: 10 , 11 , 12 and 13 . The below example demonstrates postgres database configuration. See the official driver documentation for more connection string details. GITPLOY_STORE_DRIVER=postgres GITPLOY_STORE_SOURCE=root:password@1.2.3.4:5432/gitploy?sslmode=disable","title":"Postgres"},{"location":"tasks/installation/","text":"Installation This article explains how to install the Gitploy server for GitHub. Step 1: Preparation Provision an instance The server should be installed on a server or virtual machine with standard http and https ports open. Create an OAuth Application Create a GitHub OAuth application. The Client Key and Client Secret are used to authorize access to GitHub resources. The authorization callback URL must match with the format: GITPLOY_SERVER_PROTO://GITPLOY_SERVER_HOST/signin . Figure) Github OAuth Step 2: Configuration The server is configured using environment variables. This article only configures with least environment. See Configurations for a complete list of configuration options. GITPLOY_SERVER_HOST : Required string value configures the user-facing hostname. This value is used to create webhooks and redirect urls. GITPLOY_SERVER_PROTO : Optional string value configures the user-facing protocol. This value is used to create webhooks and redirect urls. It can be one of them: http or https , and the default value is https . GITPLOY_GITHUB_CLIENT_ID : Required string value configures the GitHub OAuth client id. This is used to authorize access to GitHub on behalf of a Gitploy user. GITPLOY_GITHUB_CLIENT_SECRET : Required string value configures the GitHub OAuth client secret. This is used to authorize access to GitHub on behalf of a Gitploy user. Step 3: Start server Docker The server is distributed as a Docker image. The image is self-contained and does not have any external dependencies. We recommend to use the last version. docker pull gitployio/gitploy:0.5 The server container can be started with the below command. The container is configured through environment variables. docker run \\ --volume = /var/lib/gitploy:/data \\ --env = GITPLOY_SERVER_HOST ={{ GITPLOY_SERVER_HOST }} \\ --env = GITPLOY_SERVER_PROTO ={{ GITPLOY_SERVER_PROTO }} \\ --env = GITPLOY_GITHUB_CLIENT_ID ={{ GITPLOY_GITHUB_CLIENT_ID }} \\ --env = GITPLOY_GITHUB_CLIENT_SECRET ={{ GITPLOY_GITHUB_CLIENT_SECRET }} \\ --publish = 80 :80 \\ --publish = 443 :443 \\ --restart = always \\ --detach = true \\ --name = gitploy \\ gitployio/gitploy:0.5 Kubernetes The server can be started in Kubernetes with the below artifacts. The container is configured through environment variables. And we\u2019re also support the official Helm chart to install the server, check here for details. Kubernetes YAML apiVersion : v1 kind : Service metadata : name : gitploy labels : app.kubernetes.io/name : gitploy spec : type : ClusterIP ports : - port : 80 targetPort : http protocol : TCP name : http selector : app.kubernetes.io/name : gitploy --- apiVersion : apps/v1 kind : Deployment metadata : name : gitploy labels : app.kubernetes.io/name : gitploy spec : replicas : 1 selector : matchLabels : app.kubernetes.io/name : gitploy template : metadata : labels : app.kubernetes.io/name : gitploy spec : containers : - name : gitploy-server image : \"gitployio/gitploy:0.5\" imagePullPolicy : IfNotPresent ports : - name : http containerPort : 80 protocol : TCP # Fill out values of environments env : - name : GITPLOY_SERVER_HOST value : \"\" - name : GITPLOY_SERVER_PROTO value : \"\" - name : GITPLOY_GITHUB_CLIENT_ID value : \"\" - name : GITPLOY_GITHUB_CLIENT_SECRET value : \"\" Pro tips Persistence Gitploy uses an embedded SQLite database by default, and it stores all of the data in a single file. For persistence, you have to attach the volume to the path of the database (i.e., GITPLOY_STORE_SOURCE ) in the container. You can check the example on how to mount the volume in Docker. And if you need alternative database, MySQL and Postgres, you should check the database documentation. Security The server receives the webhook through the internet, and it could be a security issue. So you probably want to limit requests to those coming from GitHub. To ensure your server is only receiving the expected GitHub request, you must configure the secret token. You can configure it by GITPLOY_WEBHOOK_SECRET .","title":"Installation"},{"location":"tasks/installation/#installation","text":"This article explains how to install the Gitploy server for GitHub.","title":"Installation"},{"location":"tasks/installation/#step-1-preparation","text":"","title":"Step 1: Preparation"},{"location":"tasks/installation/#provision-an-instance","text":"The server should be installed on a server or virtual machine with standard http and https ports open.","title":"Provision an instance"},{"location":"tasks/installation/#create-an-oauth-application","text":"Create a GitHub OAuth application. The Client Key and Client Secret are used to authorize access to GitHub resources. The authorization callback URL must match with the format: GITPLOY_SERVER_PROTO://GITPLOY_SERVER_HOST/signin . Figure) Github OAuth","title":"Create an OAuth Application"},{"location":"tasks/installation/#step-2-configuration","text":"The server is configured using environment variables. This article only configures with least environment. See Configurations for a complete list of configuration options. GITPLOY_SERVER_HOST : Required string value configures the user-facing hostname. This value is used to create webhooks and redirect urls. GITPLOY_SERVER_PROTO : Optional string value configures the user-facing protocol. This value is used to create webhooks and redirect urls. It can be one of them: http or https , and the default value is https . GITPLOY_GITHUB_CLIENT_ID : Required string value configures the GitHub OAuth client id. This is used to authorize access to GitHub on behalf of a Gitploy user. GITPLOY_GITHUB_CLIENT_SECRET : Required string value configures the GitHub OAuth client secret. This is used to authorize access to GitHub on behalf of a Gitploy user.","title":"Step 2: Configuration"},{"location":"tasks/installation/#step-3-start-server","text":"","title":"Step 3: Start server"},{"location":"tasks/installation/#docker","text":"The server is distributed as a Docker image. The image is self-contained and does not have any external dependencies. We recommend to use the last version. docker pull gitployio/gitploy:0.5 The server container can be started with the below command. The container is configured through environment variables. docker run \\ --volume = /var/lib/gitploy:/data \\ --env = GITPLOY_SERVER_HOST ={{ GITPLOY_SERVER_HOST }} \\ --env = GITPLOY_SERVER_PROTO ={{ GITPLOY_SERVER_PROTO }} \\ --env = GITPLOY_GITHUB_CLIENT_ID ={{ GITPLOY_GITHUB_CLIENT_ID }} \\ --env = GITPLOY_GITHUB_CLIENT_SECRET ={{ GITPLOY_GITHUB_CLIENT_SECRET }} \\ --publish = 80 :80 \\ --publish = 443 :443 \\ --restart = always \\ --detach = true \\ --name = gitploy \\ gitployio/gitploy:0.5","title":"Docker"},{"location":"tasks/installation/#kubernetes","text":"The server can be started in Kubernetes with the below artifacts. The container is configured through environment variables. And we\u2019re also support the official Helm chart to install the server, check here for details. Kubernetes YAML apiVersion : v1 kind : Service metadata : name : gitploy labels : app.kubernetes.io/name : gitploy spec : type : ClusterIP ports : - port : 80 targetPort : http protocol : TCP name : http selector : app.kubernetes.io/name : gitploy --- apiVersion : apps/v1 kind : Deployment metadata : name : gitploy labels : app.kubernetes.io/name : gitploy spec : replicas : 1 selector : matchLabels : app.kubernetes.io/name : gitploy template : metadata : labels : app.kubernetes.io/name : gitploy spec : containers : - name : gitploy-server image : \"gitployio/gitploy:0.5\" imagePullPolicy : IfNotPresent ports : - name : http containerPort : 80 protocol : TCP # Fill out values of environments env : - name : GITPLOY_SERVER_HOST value : \"\" - name : GITPLOY_SERVER_PROTO value : \"\" - name : GITPLOY_GITHUB_CLIENT_ID value : \"\" - name : GITPLOY_GITHUB_CLIENT_SECRET value : \"\"","title":"Kubernetes"},{"location":"tasks/installation/#pro-tips","text":"","title":"Pro tips"},{"location":"tasks/installation/#persistence","text":"Gitploy uses an embedded SQLite database by default, and it stores all of the data in a single file. For persistence, you have to attach the volume to the path of the database (i.e., GITPLOY_STORE_SOURCE ) in the container. You can check the example on how to mount the volume in Docker. And if you need alternative database, MySQL and Postgres, you should check the database documentation.","title":"Persistence"},{"location":"tasks/installation/#security","text":"The server receives the webhook through the internet, and it could be a security issue. So you probably want to limit requests to those coming from GitHub. To ensure your server is only receiving the expected GitHub request, you must configure the secret token. You can configure it by GITPLOY_WEBHOOK_SECRET .","title":"Security"},{"location":"tasks/integration/","text":"Integration GitHub Action GitHub Actions help you automate tasks to run an actual deployment. GitHub Actions are event-driven, meaning that you can run a series of commands after a deployment event has occurred. You must specify deployment for the on field to listen for the deployment event. And you can use the if conditional to run a job for a specific environment. Here is the example below. # Listening the deployment event on : deployment jobs : deploy-dev : runs-on : ubuntu-latest # Run a job when the environment is 'production. if : ${{ github.event.deployment.environment == 'production' }} steps : - name : Checkout uses : actions/checkout@v2 - name : Start to deploy uses : chrnorm/deployment-status@releases/v1 with : deployment_id : ${{ github.event.deployment.id }} description : Start to deploy ... state : \"in_progress\" token : \"${{ github.token }}\" # Run your deployment commands. Slack Slack integration provides notifications for events. Step 1: Create App Firstly, we have to create Slack App . You should click the Create App button and fill out inputs. Step 2: Configure Permissions After creating App, we move to the OAuth & Permissions page and set up the redirect URLs and Bot Token scopes on this page. Firstly, you should add a new redirect URL with the GITPLOY_SERVER_PROTO://GITPLOY_SERVER_HOST/slack/signin format; secondly, add chat:write scope into the Bot Token scopes. Figure) Slack Bot Token Scopes Step 3: Run Server With App Credentials To enable Slack integration, you have to set up these environments when you run the server: GITPLOY_SLACK_CLIENT_ID and GITPLOY_SLACK_CLIENT_SECRET . You can get these credentials from App Credentials section of Basic Information page.","title":"Integration"},{"location":"tasks/integration/#integration","text":"","title":"Integration"},{"location":"tasks/integration/#github-action","text":"GitHub Actions help you automate tasks to run an actual deployment. GitHub Actions are event-driven, meaning that you can run a series of commands after a deployment event has occurred. You must specify deployment for the on field to listen for the deployment event. And you can use the if conditional to run a job for a specific environment. Here is the example below. # Listening the deployment event on : deployment jobs : deploy-dev : runs-on : ubuntu-latest # Run a job when the environment is 'production. if : ${{ github.event.deployment.environment == 'production' }} steps : - name : Checkout uses : actions/checkout@v2 - name : Start to deploy uses : chrnorm/deployment-status@releases/v1 with : deployment_id : ${{ github.event.deployment.id }} description : Start to deploy ... state : \"in_progress\" token : \"${{ github.token }}\" # Run your deployment commands.","title":"GitHub Action"},{"location":"tasks/integration/#slack","text":"Slack integration provides notifications for events.","title":"Slack"},{"location":"tasks/integration/#step-1-create-app","text":"Firstly, we have to create Slack App . You should click the Create App button and fill out inputs.","title":"Step 1: Create App"},{"location":"tasks/integration/#step-2-configure-permissions","text":"After creating App, we move to the OAuth & Permissions page and set up the redirect URLs and Bot Token scopes on this page. Firstly, you should add a new redirect URL with the GITPLOY_SERVER_PROTO://GITPLOY_SERVER_HOST/slack/signin format; secondly, add chat:write scope into the Bot Token scopes. Figure) Slack Bot Token Scopes","title":"Step 2: Configure Permissions"},{"location":"tasks/integration/#step-3-run-server-with-app-credentials","text":"To enable Slack integration, you have to set up these environments when you run the server: GITPLOY_SLACK_CLIENT_ID and GITPLOY_SLACK_CLIENT_SECRET . You can get these credentials from App Credentials section of Basic Information page.","title":"Step 3: Run Server With App Credentials"},{"location":"tasks/usecases/","text":"Use Cases Deploying the head of the main branch The general way of deployment is deploying the head of the main branch that has only verified commits. To constrain deploying only the head of the main branch, we can use the auto_merge parameter of GitHub deployment API to ensure that the deployment is the head of the branch, and set deployable_ref field with the main . envs : - name : production auto_merge : true deployable_ref : main production_environment : true Deploying with the version The versioning is the general way to specify the artifact or the commit, and GitHub provides the release page for versioning. If your team (or organization) wants to constrain deploying with the version, you can use the deployable_ref field like below. envs : - name : production auto_merge : false deployable_ref : 'v.*\\..*\\..*' # Semantic versioning production_environment : true Deploying the artifact The artifact could be a binary file from compiling source codes or a docker image, which means we have to build the artifact before we deploy. The commit status is the best way to verify if the artifact exists or not. The builder, such as GitHub Action or Circle CI, posts the commit status after building the artifact, and we can verify it by the required_contexts parameter when we deploy. You can reference the deploy.yml of Gitploy. envs : - name : production auto_merge : false required_contexts : - \"publish-image\" # The commit status of building the artifact. production_environment : true Auto deployment If you want to enable the auto-deployment when the pull request is merged into the main branch, you should configure the auto_deploy_on field like the below. envs : - name : production auto_merge : true required_contexts : [] auto_deploy_on : refs/heads/main deployable_ref : main production_environment : true","title":"Use Cases"},{"location":"tasks/usecases/#use-cases","text":"","title":"Use Cases"},{"location":"tasks/usecases/#deploying-the-head-of-the-main-branch","text":"The general way of deployment is deploying the head of the main branch that has only verified commits. To constrain deploying only the head of the main branch, we can use the auto_merge parameter of GitHub deployment API to ensure that the deployment is the head of the branch, and set deployable_ref field with the main . envs : - name : production auto_merge : true deployable_ref : main production_environment : true","title":"Deploying the head of the main branch"},{"location":"tasks/usecases/#deploying-with-the-version","text":"The versioning is the general way to specify the artifact or the commit, and GitHub provides the release page for versioning. If your team (or organization) wants to constrain deploying with the version, you can use the deployable_ref field like below. envs : - name : production auto_merge : false deployable_ref : 'v.*\\..*\\..*' # Semantic versioning production_environment : true","title":"Deploying with the version"},{"location":"tasks/usecases/#deploying-the-artifact","text":"The artifact could be a binary file from compiling source codes or a docker image, which means we have to build the artifact before we deploy. The commit status is the best way to verify if the artifact exists or not. The builder, such as GitHub Action or Circle CI, posts the commit status after building the artifact, and we can verify it by the required_contexts parameter when we deploy. You can reference the deploy.yml of Gitploy. envs : - name : production auto_merge : false required_contexts : - \"publish-image\" # The commit status of building the artifact. production_environment : true","title":"Deploying the artifact"},{"location":"tasks/usecases/#auto-deployment","text":"If you want to enable the auto-deployment when the pull request is merged into the main branch, you should configure the auto_deploy_on field like the below. envs : - name : production auto_merge : true required_contexts : [] auto_deploy_on : refs/heads/main deployable_ref : main production_environment : true","title":"Auto deployment"}]}