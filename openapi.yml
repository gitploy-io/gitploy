openapi: '3.0.2'
info:
  title: gitploy.
  version: '1.0'
servers:
  - url: http://localhost:8080/api/v1
  - url: https://gitploy.jp.ngrok.io/api/v1
paths:
  /sync:
    post:
      tags:
        - common
      summary: Synchronize with SCM.
      responses:
        '200':
          description: OK
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos:
    get:
      tags:
        - Repo
      summary: List repositories the user can access.
      parameters:
        - in: query
          name: sort 
          schema:
            type: boolean
            default: false
        - in: query
          name: q
          schema:
            type: string
            default: ""
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: The page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
            description: The number per page
      responses:
        '200':
          description: Repositories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repositories'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/search:
    get:
      tags:
        - Repo
      summary: Search repository with namespace and name
      parameters:
        - in: query
          name: namespace
          required: true
          schema:
            type: string
        - in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{id}:
    get:
      tags:
        - Repo
      summary: Get the repository.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
      responses:
        '200':
          description: Repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
    patch:
      tags:
        - Repo
      summary: Update the repository.
      description: Basically patch the respository field. And it creates a new webhook when it activates.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                config_path:
                  type: string
                  default: deploy.yml
                active:
                  type: boolean
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
      responses:
        '200':
          description: Ok
  /repos/{id}/commits:
    get:
      tags:
        - Repo
      summary: List commits of repository.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
        - in: query
          name: branch
          schema:
            type: string
            default: 
            description: > 
              The branch to start listing commits from. 
              Default - the repositoryâ€™s default branch.
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: The page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
            description: The page number
      responses:
        '200':
          description: Commits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commits'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{id}/commits/{sha}:
    get:
      tags:
        - Repo
      summary: Get the commit of repository.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
        - in: path
          name: sha
          required: true
          schema:
            type: string
            description: The commit sha
      responses:
        '200':
          description: Commit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commit'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{id}/commits/{sha}/statuses:
    get:
      tags:
        - Repo
      summary: List statuses of the commit.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
        - in: path
          name: sha
          required: true
          schema:
            type: string
            description: The commit sha
      responses:
        '200':
          description: Statuses for ref
          content:
            application/json:
              schema:
                type: object
                properties:
                  state:
                    type: string
                  statuses:
                    $ref: '#/components/schemas/Statuses'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{id}/branches:
    get:
      tags:
        - Repo
      summary: List branches of the repository.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: The page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
            description: The item count per page
      responses:
        '200':
          description: Branches
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branches'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{id}/branches/{branch}:
    get:
      tags:
        - Repo
      summary: Get the branch of repository.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
        - in: path
          name: branch
          required: true
          schema:
            type: string
            description: The branch name
      responses:
        '200':
          description: Branch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{id}/tags:
    get:
      tags:
        - Repo
      summary: List tags of the repository.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: The page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
            description: The item count per page
      responses:
        '200':
          description: Tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tags'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{id}/tags/{tag}:
    get:
      tags:
        - Repo
      summary: Get the tag of the repository.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
        - in: path
          name: tag
          required: true
          schema:
            type: string
            description: The tag name
      responses:
        '200':
          description: Tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{id}/deployments:
    get:
      tags:
        - Repo
      summary: List deployments of repository.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
        - in: query
          name: env
          description: Name for the target deployment environment.
          schema:
            type: string
            description: The target environment
        - in: query
          name: status
          description: The status of deployment.
          schema:
            type: string
            description: The deployment status
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: The page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
            description: The item count per page
      responses:
        '200':
          description: Deployment list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployments'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
    post:
      tags:
        - Repo
      summary: Create a new deployment.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  default: commit
                ref:
                  type: string
                env:
                  type: string
      responses:
        '201':
          description: Created
        '400': 
          $ref: '#/components/responses/400BadRequest'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '409':
          $ref: '#/components/responses/409Conflict'
          description: The deployment number is conflicted.
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
          description: The deployment payload or the configuration are invalid.
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{id}/deployments/{number}:
    get:
      tags:
        - Repo
      summary: Get the deployments by the number.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
        - in: path
          name: number
          required: true
          schema:
            type: integer
            description: The deployment number.
      responses:
        '200':
          description: Deployment 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
    patch: 
      tags:
        - Repo
      summary: Deploy to SCM if a status of the deployment is waiting.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
        - in: path
          name: number
          required: true
          schema:
            type: integer
            description: The deployment number.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status: 
                  type: string
                  default: created
      responses:
        '200':
          description: Deployment 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
          description: The configuration is invalid or it is not approved.
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{id}/deployments/{number}/rollback:
    post:
      tags:
        - Repo
      summary: Rollback by the deployment.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
        - in: path
          name: number
          required: true
          schema:
            type: integer
            description: The deployment number.
      responses:
        '201':
          description: Rollbacked Deployment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '422':
          description: The deployment number or the configuration is invalid.
          $ref: '#/components/responses/422UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{id}/deployments/{number}/approvals:
    get:
      tags:
        - Repo
      summary: List approvals for the deployment.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
        - in: path
          name: number
          required: true
          schema:
            type: integer
            description: The deployment number.
      responses:
        '200':
          description: List of approval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Approvals'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
    post:
      tags:
        - Repo
      summary: Create a new approval.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
        - in: path
          name: number
          required: true
          schema:
            type: integer
            description: The deployment number.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
      responses:
        '201':
          description: Approval created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Approval'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{id}/deployments/{number}/approval:
    get:
      tags:
        - Repo
      summary: Get the approval of user for the deployment.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
        - in: path
          name: number
          required: true
          schema:
            type: integer
            description: The deployment number.
      responses:
        '200':
          description: Approval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Approval'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
    patch:
      tags:
        - Repo
      summary: Approve (or Decline) for the approval.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
        - in: path
          name: number
          required: true
          schema:
            type: integer
            description: The deployment number.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - pending
                    - declined
                    - approved
      responses:
        '200':
          description: Approval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Approval'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  # Only permitted users can access to Approval API.
  # To be under repository protects to access without permissions.
  /repos/{id}/approvals/{aid}:
    get:
      tags:
        - Repo
      summary: Get the approval.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id.
        - in: path
          name: aid
          required: true
          schema:
            type: number
            description: The apporval id.
      responses:
        '200':
          description: Approval 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Approval'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      tags:
        - Repo
      summary: Delete the approval.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id.
        - in: path
          name: number
          required: true
          schema:
            type: integer
            description: The deployment number.
        - in: path
          name: aid
          required: true
          schema:
            type: number
            description: The apporval id.
      responses:
        '200':
          description: Approval deleted
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{id}/perms:
    get:
      tags:
        - Repo
      summary: Get permissions for the repository
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id.
        - in: query
          name: q
          schema:
            type: string
            description: Search perms by login.
        - in: query
          name: page
          schema:
            type: number
        - in: query
          name: per_page
          schema:
            type: number
      responses:
        '200':
          description: Perms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Perms'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{id}/config:
    get:
      tags:
        - Repo
      summary: Get the config file
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The repository id
      responses:
        '200':
          description: Config 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '422': 
          $ref: '#/components/responses/422UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500InternalError'
  /user:
    get:
      tags:
        - User
      summary: Get my information.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/User'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalError'
  /notifications:
    get:
      tags:
        - Notification
      summary: List my notifications.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: The page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
            description: The item count per page
      responses:
        '200':
          description: Notifications items
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Notifications'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalError'
  /notifications/{id}:
    patch:
      tags:
        - Notification
      summary: Set the notification checked.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The notification id.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                checked:
                  type: boolean
      responses:
        '200':
          description: Notifications items
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Notifications'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  
security:
  - BearerAuth: []
  - OAuth2:
    - read

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
        avatar:
          type: string
        admin:
          type: boolean
        created_at:
          type: string
        updated_at:
          type: string
        edges:
          type: object
          properties:
            chat_user:
              $ref: '#/components/schemas/ChatUser'
    ChatUser:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    Repositories:
      type: array
      items:
        $ref: '#/components/schemas/Repository'
    Repository:
      type: object
      properties:
        id:
          type: string
        namespace:
          type: string
          description: Repository owner
        name:
          type: string
        description:
          type: string
        active:
          type: boolean
        webhook_id:
          type: integer
        synced_at:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        latest_deployed_at:
          type: string
    Perms:
      type: array
      items:
        $ref: '#/components/schemas/Perm'
    Perm:
      type: object
      properties:
        id:
          type: number
        repo_perm:
          type: string
        synced_at:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        edges:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            repo:
              $ref: '#/components/schemas/Repository'
    Commits:
      type: array
      items:
        $ref: '#/components/schemas/Commit'
    Commit:
      type: object
      properties:
        sha:
          type: string
        message:
          type: string
        is_pull_request:
          type: boolean
    Statuses:
      type: array
      items:
        $ref: '#/components/schemas/Status'
    Status:
      type: object
      properties:
        context:
          type: string
        avatar_url: 
          type: string
        target_url:
          type: string
        state:
          type: string
          description: The state is one of failure, pending, and success.
          enum:
            - pending
            - failure
            - success
    Branches:
      type: array
      items:
        $ref: '#/components/schemas/Branch'
    Branch:
      type: object
      properties:
        name:
          type: string
        commit_sha:
          type: string
    Tags:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    Tag:
      type: object
      properties:
        name:
          type: string
        commit_sha:
          type: string
    Deployments:
      type: array
      items:
        $ref: '#/components/schemas/Deployment'
    Deployment:
      type: object
      properties:
        id:
          type: integer
        uid:
          type: integer
        type:
          type: string
        ref:
          type: string
        sha:
          type: string
        env:
          type: string
        status:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        edges:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            repo:
              $ref: '#/components/schemas/Repository'
            deployment_statuses:
              type: array
              items:
                $ref: '#/components/schemas/DeploymentStatus'
    DeploymentStatus:
      type: object
      properties:
        id:
          type: number
        status:
          type: string
        description:
          type: string
        log_url:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    Config:
      type: object
      properties:
        envs:
          type: array
          items:
            $ref: '#/components/schemas/Env'
    Env:
      type: object
      properties:
        name:
          type: string
        required_contexts:
          type: array
          items:
            type: integer
        approval:
          type: object
          properties:
            approvers:
              type: array
              items:
                type: string
            wait_minute:
              type: integer
    Approvals:
      type: array
      items:
        $ref: '#/components/schemas/Approval'
    Approval:
      type: object
      properties:
        id:
          type: integer
        # TODO: remove after migrate status field.
        is_approved:
          type: boolean
        status:
          type: string
          enum:
            - pending
            - declined
            - approved
        created_at:
          type: string
        updated_at:
          type: string
        edges:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            deployment:
              $ref: '#/components/schemas/Deployment'
    Notifications:
      type: array
      items:
        $ref: '#/components/schemas/Notification'
    Notification:
      type: object
      properties:
        type:
          type: string
          enum:
            - deployment
            - approval_requested
            - approval_responded
        repo_namespace:
          type: string
        repo_name:
          type: string
        deployment_number:
          type: number
        deployment_type:
          type: string
        deployment_ref:
          type: string
        deployment_env:
          type: string
        deployment_status:
          type: string
        deployment_login:
          type: string
        approval_status:
          type: string
        approval_login:
          type: string
        notified:
          type: boolean
          description: notified means it is notified by Chat or browser
        checked:
          type: boolean
        created_at:
          type: string
        updated_at:
          type: string
    Error:
      type: object
      properties:
        message: 
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: Hash key of user
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://github.com/oauth/authorize
          tokenUrl: https://github.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations
    
  responses:
    400BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    401Unauthorized:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    403Forbidden:
      description: Permisson denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    404NotFound:
      description: The resource is not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    409Conflict:
      description: The conflict occurs
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    422UnprocessableEntity:
      description: Validation Failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        
    500InternalError:
      description: Server internal error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
