openapi: '3.0.2'
info:
  title: gitploy.
  version: '1.0'
servers:
  - url: http://localhost:8080/api/v1
  - url: https://gitploy.jp.ngrok.io/api/v1
paths:
  /sync:
    post:
      tags:
        - common
      summary: Synchronize with SCM
      responses:
        '200':
          description: OK
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos:
    get:
      tags:
        - Repo
      summary: List repositories the user can access
      parameters:
        - in: query
          name: sort 
          schema:
            type: boolean
            default: false
        - in: query
          name: q
          schema:
            type: string
            default: ""
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: The page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
            description: The number per page
      responses:
        '200':
          description: Repositories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repositories'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/search:
    get:
      tags:
        - Repo
      summary: Search repository with namespace and name
      parameters:
        - in: query
          name: namespace
          required: true
          schema:
            type: string
        - in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{repoId}:
    get:
      tags:
        - Repo
      summary: Get repository
      parameters:
        - in: path
          name: repoId
          required: true
          schema:
            type: integer
            description: The repository id
      responses:
        '200':
          description: Repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
    patch:
      tags:
        - Repo
      summary: Update config path.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                config_path:
                  type: string
      parameters:
        - in: path
          name: repoId
          required: true
          schema:
            type: integer
            description: The repository id
      responses:
        '200':
          description: Ok
  /repos/{repoId}/activate:
    patch:
      tags:
        - Repo
      summary: It create the webhook of the repo
      parameters:
        - in: path
          name: repoId
          required: true
          schema:
            type: integer
            description: The repository id
      responses:
        '200':
          description: Repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'

  /repos/{repoId}/deactivate:
    patch:
      tags:
        - Repo
      summary: It removes the webhook of the repo
      parameters:
        - in: path
          name: repoId
          required: true
          schema:
            type: integer
            description: The repository id
      responses:
        '200':
          description: Repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'

  /repos/{repoId}/commits:
    get:
      tags:
        - Repo
      summary: List commits
      parameters:
        - in: path
          name: repoId
          required: true
          schema:
            type: integer
            description: The repository id
        - in: query
          name: branch
          schema:
            type: string
            default: 
            description: > 
              The branch to start listing commits from. 
              Default - the repositoryâ€™s default branch.
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: The page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
            description: The page number
      responses:
        '200':
          description: Commits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commits'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{repoId}/commits/{sha}:
    get:
      tags:
        - Repo
      summary: List commits
      parameters:
        - in: path
          name: repoId
          required: true
          schema:
            type: integer
            description: The repository id
        - in: path
          name: sha
          required: true
          schema:
            type: string
            description: The commit sha
      responses:
        '200':
          description: Commit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commit'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{repoId}/commits/{sha}/statuses:
    get:
      tags:
        - Repo
      summary: List commits
      parameters:
        - in: path
          name: repoId
          required: true
          schema:
            type: integer
            description: The repository id
        - in: path
          name: sha
          required: true
          schema:
            type: string
            description: The commit sha
      responses:
        '200':
          description: Statuses for ref
          content:
            application/json:
              schema:
                type: object
                properties:
                  state:
                    type: string
                  statuses:
                    $ref: '#/components/schemas/Statuses'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{repoId}/branches:
    get:
      tags:
        - Repo
      summary: List branches
      parameters:
        - in: path
          name: repoId
          required: true
          schema:
            type: integer
            description: The repository id
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: The page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
            description: The item count per page
      responses:
        '200':
          description: Branches
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branches'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{repoId}/branches/{branch}:
    get:
      tags:
        - Repo
      summary: Return the branch
      parameters:
        - in: path
          name: repoId
          required: true
          schema:
            type: integer
            description: The repository id
        - in: path
          name: branch
          required: true
          schema:
            type: string
            description: The branch name
      responses:
        '200':
          description: Branch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{repoId}/tags:
    get:
      tags:
        - Repo
      summary: List tags
      parameters:
        - in: path
          name: repoId
          required: true
          schema:
            type: integer
            description: The repository id
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: The page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
            description: The item count per page
      responses:
        '200':
          description: Tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tags'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{repoId}/tags/{tag}:
    get:
      tags:
        - Repo
      summary: Return the tag
      parameters:
        - in: path
          name: repoId
          required: true
          schema:
            type: integer
            description: The repository id
        - in: path
          name: tag
          required: true
          schema:
            type: string
            description: The tag name
      responses:
        '200':
          description: Tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'
  /repos/{repoId}/deployments:
    get:
      tags:
        - Repo
      summary: List deployments
      parameters:
        - in: path
          name: repoId
          required: true
          schema:
            type: integer
            description: The repository id
        - in: query
          name: env
          schema:
            type: string
            description: The target environment
        - in: query
          name: status
          schema:
            type: string
            description: The deployment status
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: The page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 30
            description: The item count per page
      responses:
        '200':
          description: Deployment list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployments'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalError'
    post:
      tags:
        - Repo
      summary: Create a new deployment
      parameters:
        - in: path
          name: repoId
          required: true
          schema:
            type: integer
            description: The repository id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  default: commit
                ref:
                  type: string
                env:
                  type: string
      responses:
        '201':
          description: Created
        '400': 
          $ref: '#/components/responses/400BadRequest'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '422':
          description: The configuration file is not valid.
          $ref: '#/components/responses/422UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500InternalError'

  /repos/{repoId}/deployments/latest:
    get:
      tags:
        - Repo
      summary: Get latest deployments
      parameters:
        - in: path
          name: repoId
          required: true
          schema:
            type: integer
            description: The repository id
        - in: query
          name: env
          schema:
            type: string
            description: The target environment
      responses:
        '200':
          description: Deployment 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalError'

  /repos/{repoId}/config:
    get:
      tags:
        - Repo
      summary: Get the config file
      parameters:
        - in: path
          name: repoId
          required: true
          schema:
            type: integer
            description: The repository id
      responses:
        '200':
          description: Config 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '403': 
          $ref: '#/components/responses/403Forbidden'
        '404': 
          $ref: '#/components/responses/404NotFound'
        '422': 
          $ref: '#/components/responses/422UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500InternalError'
  /users/me:
    get:
      tags:
        - User
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/User'
        '401': 
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalError'
  
security:
  - BearerAuth: []
  - OAuth2:
    - read

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
        avatar:
          type: string
        admin:
          type: boolean
        created_at:
          type: string
        updated_at:
          type: string
        edges:
          type: object
          properties:
            chat_user:
              $ref: '#/components/schemas/ChatUser'
    ChatUser:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    Repositories:
      type: array
      items:
        $ref: '#/components/schemas/Repository'
    Repository:
      type: object
      properties:
        id:
          type: string
        namespace:
          type: string
          description: Repository owner
        name:
          type: string
        description:
          type: string
        active:
          type: boolean
        webhook_id:
          type: integer
        synced_at:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        latest_deployed_at:
          type: string
    Commits:
      type: array
      items:
        $ref: '#/components/schemas/Commit'
    Commit:
      type: object
      properties:
        sha:
          type: string
        message:
          type: string
        is_pull_request:
          type: boolean
    Statuses:
      type: array
      items:
        $ref: '#/components/schemas/Status'
    Status:
      type: object
      properties:
        context:
          type: string
        avatar_url: 
          type: string
        target_url:
          type: string
        state:
          type: string
          description: The state is one of failure, pending, and success.
    Branches:
      type: array
      items:
        $ref: '#/components/schemas/Branch'
    Branch:
      type: object
      properties:
        name:
          type: string
        commit_sha:
          type: string
    Tags:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    Tag:
      type: object
      properties:
        name:
          type: string
        commit_sha:
          type: string
    Deployments:
      type: array
      items:
        $ref: '#/components/schemas/Deployment'
    Deployment:
      type: object
      properties:
        id:
          type: integer
        uid:
          type: integer
        type:
          type: string
        ref:
          type: string
        sha:
          type: string
        env:
          type: string
        status:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    Config:
      type: object
      properties:
        envs:
          type: array
          items:
            $ref: '#/components/schemas/Env'
    Env:
      type: object
      properties:
        name:
          type: string
        required_contexts:
          type: array
          items:
            type: integer
        approval:
          type: object
          properties:
            approvers:
              type: array
              items:
                type: string
            wait_minute:
              type: integer
    Error:
      type: object
      properties:
        message: 
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: Hash key of user
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://github.com/oauth/authorize
          tokenUrl: https://github.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations
    
  responses:
    400BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    401Unauthorized:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    403Forbidden:
      description: Permisson denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    404NotFound:
      description: The resource is not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    422UnprocessableEntity:
      description: Validation Failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        
    500InternalError:
      description: Server internal error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
