// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitploy-io/gitploy/model/ent/deployment"
	"github.com/gitploy-io/gitploy/model/ent/deploymentstatus"
	"github.com/gitploy-io/gitploy/model/ent/event"
	"github.com/gitploy-io/gitploy/model/ent/notificationrecord"
	"github.com/gitploy-io/gitploy/model/ent/predicate"
	"github.com/gitploy-io/gitploy/model/ent/review"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetKind sets the "kind" field.
func (eu *EventUpdate) SetKind(e event.Kind) *EventUpdate {
	eu.mutation.SetKind(e)
	return eu
}

// SetType sets the "type" field.
func (eu *EventUpdate) SetType(e event.Type) *EventUpdate {
	eu.mutation.SetType(e)
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *EventUpdate) SetCreatedAt(t time.Time) *EventUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *EventUpdate) SetNillableCreatedAt(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// SetDeploymentID sets the "deployment_id" field.
func (eu *EventUpdate) SetDeploymentID(i int) *EventUpdate {
	eu.mutation.SetDeploymentID(i)
	return eu
}

// SetNillableDeploymentID sets the "deployment_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDeploymentID(i *int) *EventUpdate {
	if i != nil {
		eu.SetDeploymentID(*i)
	}
	return eu
}

// ClearDeploymentID clears the value of the "deployment_id" field.
func (eu *EventUpdate) ClearDeploymentID() *EventUpdate {
	eu.mutation.ClearDeploymentID()
	return eu
}

// SetDeploymentStatusID sets the "deployment_status_id" field.
func (eu *EventUpdate) SetDeploymentStatusID(i int) *EventUpdate {
	eu.mutation.SetDeploymentStatusID(i)
	return eu
}

// SetNillableDeploymentStatusID sets the "deployment_status_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDeploymentStatusID(i *int) *EventUpdate {
	if i != nil {
		eu.SetDeploymentStatusID(*i)
	}
	return eu
}

// ClearDeploymentStatusID clears the value of the "deployment_status_id" field.
func (eu *EventUpdate) ClearDeploymentStatusID() *EventUpdate {
	eu.mutation.ClearDeploymentStatusID()
	return eu
}

// SetReviewID sets the "review_id" field.
func (eu *EventUpdate) SetReviewID(i int) *EventUpdate {
	eu.mutation.SetReviewID(i)
	return eu
}

// SetNillableReviewID sets the "review_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillableReviewID(i *int) *EventUpdate {
	if i != nil {
		eu.SetReviewID(*i)
	}
	return eu
}

// ClearReviewID clears the value of the "review_id" field.
func (eu *EventUpdate) ClearReviewID() *EventUpdate {
	eu.mutation.ClearReviewID()
	return eu
}

// SetDeletedID sets the "deleted_id" field.
func (eu *EventUpdate) SetDeletedID(i int) *EventUpdate {
	eu.mutation.ResetDeletedID()
	eu.mutation.SetDeletedID(i)
	return eu
}

// SetNillableDeletedID sets the "deleted_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDeletedID(i *int) *EventUpdate {
	if i != nil {
		eu.SetDeletedID(*i)
	}
	return eu
}

// AddDeletedID adds i to the "deleted_id" field.
func (eu *EventUpdate) AddDeletedID(i int) *EventUpdate {
	eu.mutation.AddDeletedID(i)
	return eu
}

// ClearDeletedID clears the value of the "deleted_id" field.
func (eu *EventUpdate) ClearDeletedID() *EventUpdate {
	eu.mutation.ClearDeletedID()
	return eu
}

// SetDeployment sets the "deployment" edge to the Deployment entity.
func (eu *EventUpdate) SetDeployment(d *Deployment) *EventUpdate {
	return eu.SetDeploymentID(d.ID)
}

// SetDeploymentStatus sets the "deployment_status" edge to the DeploymentStatus entity.
func (eu *EventUpdate) SetDeploymentStatus(d *DeploymentStatus) *EventUpdate {
	return eu.SetDeploymentStatusID(d.ID)
}

// SetReview sets the "review" edge to the Review entity.
func (eu *EventUpdate) SetReview(r *Review) *EventUpdate {
	return eu.SetReviewID(r.ID)
}

// SetNotificationRecordID sets the "notification_record" edge to the NotificationRecord entity by ID.
func (eu *EventUpdate) SetNotificationRecordID(id int) *EventUpdate {
	eu.mutation.SetNotificationRecordID(id)
	return eu
}

// SetNillableNotificationRecordID sets the "notification_record" edge to the NotificationRecord entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableNotificationRecordID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetNotificationRecordID(*id)
	}
	return eu
}

// SetNotificationRecord sets the "notification_record" edge to the NotificationRecord entity.
func (eu *EventUpdate) SetNotificationRecord(n *NotificationRecord) *EventUpdate {
	return eu.SetNotificationRecordID(n.ID)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearDeployment clears the "deployment" edge to the Deployment entity.
func (eu *EventUpdate) ClearDeployment() *EventUpdate {
	eu.mutation.ClearDeployment()
	return eu
}

// ClearDeploymentStatus clears the "deployment_status" edge to the DeploymentStatus entity.
func (eu *EventUpdate) ClearDeploymentStatus() *EventUpdate {
	eu.mutation.ClearDeploymentStatus()
	return eu
}

// ClearReview clears the "review" edge to the Review entity.
func (eu *EventUpdate) ClearReview() *EventUpdate {
	eu.mutation.ClearReview()
	return eu
}

// ClearNotificationRecord clears the "notification_record" edge to the NotificationRecord entity.
func (eu *EventUpdate) ClearNotificationRecord() *EventUpdate {
	eu.mutation.ClearNotificationRecord()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if v, ok := eu.mutation.Kind(); ok {
		if err := event.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Event.kind": %w`, err)}
		}
	}
	if v, ok := eu.mutation.GetType(); ok {
		if err := event.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Event.type": %w`, err)}
		}
	}
	return nil
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: event.FieldKind,
		})
	}
	if value, ok := eu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: event.FieldType,
		})
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldCreatedAt,
		})
	}
	if value, ok := eu.mutation.DeletedID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: event.FieldDeletedID,
		})
	}
	if value, ok := eu.mutation.AddedDeletedID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: event.FieldDeletedID,
		})
	}
	if eu.mutation.DeletedIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: event.FieldDeletedID,
		})
	}
	if eu.mutation.DeploymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.DeploymentTable,
			Columns: []string{event.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.DeploymentTable,
			Columns: []string{event.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.DeploymentStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.DeploymentStatusTable,
			Columns: []string{event.DeploymentStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deploymentstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DeploymentStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.DeploymentStatusTable,
			Columns: []string{event.DeploymentStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deploymentstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ReviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ReviewTable,
			Columns: []string{event.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: review.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ReviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ReviewTable,
			Columns: []string{event.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: review.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.NotificationRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.NotificationRecordTable,
			Columns: []string{event.NotificationRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: notificationrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.NotificationRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.NotificationRecordTable,
			Columns: []string{event.NotificationRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: notificationrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetKind sets the "kind" field.
func (euo *EventUpdateOne) SetKind(e event.Kind) *EventUpdateOne {
	euo.mutation.SetKind(e)
	return euo
}

// SetType sets the "type" field.
func (euo *EventUpdateOne) SetType(e event.Type) *EventUpdateOne {
	euo.mutation.SetType(e)
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *EventUpdateOne) SetCreatedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableCreatedAt(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// SetDeploymentID sets the "deployment_id" field.
func (euo *EventUpdateOne) SetDeploymentID(i int) *EventUpdateOne {
	euo.mutation.SetDeploymentID(i)
	return euo
}

// SetNillableDeploymentID sets the "deployment_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDeploymentID(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetDeploymentID(*i)
	}
	return euo
}

// ClearDeploymentID clears the value of the "deployment_id" field.
func (euo *EventUpdateOne) ClearDeploymentID() *EventUpdateOne {
	euo.mutation.ClearDeploymentID()
	return euo
}

// SetDeploymentStatusID sets the "deployment_status_id" field.
func (euo *EventUpdateOne) SetDeploymentStatusID(i int) *EventUpdateOne {
	euo.mutation.SetDeploymentStatusID(i)
	return euo
}

// SetNillableDeploymentStatusID sets the "deployment_status_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDeploymentStatusID(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetDeploymentStatusID(*i)
	}
	return euo
}

// ClearDeploymentStatusID clears the value of the "deployment_status_id" field.
func (euo *EventUpdateOne) ClearDeploymentStatusID() *EventUpdateOne {
	euo.mutation.ClearDeploymentStatusID()
	return euo
}

// SetReviewID sets the "review_id" field.
func (euo *EventUpdateOne) SetReviewID(i int) *EventUpdateOne {
	euo.mutation.SetReviewID(i)
	return euo
}

// SetNillableReviewID sets the "review_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableReviewID(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetReviewID(*i)
	}
	return euo
}

// ClearReviewID clears the value of the "review_id" field.
func (euo *EventUpdateOne) ClearReviewID() *EventUpdateOne {
	euo.mutation.ClearReviewID()
	return euo
}

// SetDeletedID sets the "deleted_id" field.
func (euo *EventUpdateOne) SetDeletedID(i int) *EventUpdateOne {
	euo.mutation.ResetDeletedID()
	euo.mutation.SetDeletedID(i)
	return euo
}

// SetNillableDeletedID sets the "deleted_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDeletedID(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetDeletedID(*i)
	}
	return euo
}

// AddDeletedID adds i to the "deleted_id" field.
func (euo *EventUpdateOne) AddDeletedID(i int) *EventUpdateOne {
	euo.mutation.AddDeletedID(i)
	return euo
}

// ClearDeletedID clears the value of the "deleted_id" field.
func (euo *EventUpdateOne) ClearDeletedID() *EventUpdateOne {
	euo.mutation.ClearDeletedID()
	return euo
}

// SetDeployment sets the "deployment" edge to the Deployment entity.
func (euo *EventUpdateOne) SetDeployment(d *Deployment) *EventUpdateOne {
	return euo.SetDeploymentID(d.ID)
}

// SetDeploymentStatus sets the "deployment_status" edge to the DeploymentStatus entity.
func (euo *EventUpdateOne) SetDeploymentStatus(d *DeploymentStatus) *EventUpdateOne {
	return euo.SetDeploymentStatusID(d.ID)
}

// SetReview sets the "review" edge to the Review entity.
func (euo *EventUpdateOne) SetReview(r *Review) *EventUpdateOne {
	return euo.SetReviewID(r.ID)
}

// SetNotificationRecordID sets the "notification_record" edge to the NotificationRecord entity by ID.
func (euo *EventUpdateOne) SetNotificationRecordID(id int) *EventUpdateOne {
	euo.mutation.SetNotificationRecordID(id)
	return euo
}

// SetNillableNotificationRecordID sets the "notification_record" edge to the NotificationRecord entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableNotificationRecordID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetNotificationRecordID(*id)
	}
	return euo
}

// SetNotificationRecord sets the "notification_record" edge to the NotificationRecord entity.
func (euo *EventUpdateOne) SetNotificationRecord(n *NotificationRecord) *EventUpdateOne {
	return euo.SetNotificationRecordID(n.ID)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearDeployment clears the "deployment" edge to the Deployment entity.
func (euo *EventUpdateOne) ClearDeployment() *EventUpdateOne {
	euo.mutation.ClearDeployment()
	return euo
}

// ClearDeploymentStatus clears the "deployment_status" edge to the DeploymentStatus entity.
func (euo *EventUpdateOne) ClearDeploymentStatus() *EventUpdateOne {
	euo.mutation.ClearDeploymentStatus()
	return euo
}

// ClearReview clears the "review" edge to the Review entity.
func (euo *EventUpdateOne) ClearReview() *EventUpdateOne {
	euo.mutation.ClearReview()
	return euo
}

// ClearNotificationRecord clears the "notification_record" edge to the NotificationRecord entity.
func (euo *EventUpdateOne) ClearNotificationRecord() *EventUpdateOne {
	euo.mutation.ClearNotificationRecord()
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	var (
		err  error
		node *Event
	)
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if v, ok := euo.mutation.Kind(); ok {
		if err := event.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Event.kind": %w`, err)}
		}
	}
	if v, ok := euo.mutation.GetType(); ok {
		if err := event.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Event.type": %w`, err)}
		}
	}
	return nil
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: event.FieldKind,
		})
	}
	if value, ok := euo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: event.FieldType,
		})
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldCreatedAt,
		})
	}
	if value, ok := euo.mutation.DeletedID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: event.FieldDeletedID,
		})
	}
	if value, ok := euo.mutation.AddedDeletedID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: event.FieldDeletedID,
		})
	}
	if euo.mutation.DeletedIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: event.FieldDeletedID,
		})
	}
	if euo.mutation.DeploymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.DeploymentTable,
			Columns: []string{event.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.DeploymentTable,
			Columns: []string{event.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.DeploymentStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.DeploymentStatusTable,
			Columns: []string{event.DeploymentStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deploymentstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DeploymentStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.DeploymentStatusTable,
			Columns: []string{event.DeploymentStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deploymentstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ReviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ReviewTable,
			Columns: []string{event.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: review.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ReviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ReviewTable,
			Columns: []string{event.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: review.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.NotificationRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.NotificationRecordTable,
			Columns: []string{event.NotificationRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: notificationrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.NotificationRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.NotificationRecordTable,
			Columns: []string{event.NotificationRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: notificationrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
