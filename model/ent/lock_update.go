// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitploy-io/gitploy/model/ent/lock"
	"github.com/gitploy-io/gitploy/model/ent/predicate"
	"github.com/gitploy-io/gitploy/model/ent/repo"
	"github.com/gitploy-io/gitploy/model/ent/user"
)

// LockUpdate is the builder for updating Lock entities.
type LockUpdate struct {
	config
	hooks    []Hook
	mutation *LockMutation
}

// Where appends a list predicates to the LockUpdate builder.
func (lu *LockUpdate) Where(ps ...predicate.Lock) *LockUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetEnv sets the "env" field.
func (lu *LockUpdate) SetEnv(s string) *LockUpdate {
	lu.mutation.SetEnv(s)
	return lu
}

// SetExpiredAt sets the "expired_at" field.
func (lu *LockUpdate) SetExpiredAt(t time.Time) *LockUpdate {
	lu.mutation.SetExpiredAt(t)
	return lu
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (lu *LockUpdate) SetNillableExpiredAt(t *time.Time) *LockUpdate {
	if t != nil {
		lu.SetExpiredAt(*t)
	}
	return lu
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (lu *LockUpdate) ClearExpiredAt() *LockUpdate {
	lu.mutation.ClearExpiredAt()
	return lu
}

// SetCreatedAt sets the "created_at" field.
func (lu *LockUpdate) SetCreatedAt(t time.Time) *LockUpdate {
	lu.mutation.SetCreatedAt(t)
	return lu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lu *LockUpdate) SetNillableCreatedAt(t *time.Time) *LockUpdate {
	if t != nil {
		lu.SetCreatedAt(*t)
	}
	return lu
}

// SetUserID sets the "user_id" field.
func (lu *LockUpdate) SetUserID(i int64) *LockUpdate {
	lu.mutation.SetUserID(i)
	return lu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lu *LockUpdate) SetNillableUserID(i *int64) *LockUpdate {
	if i != nil {
		lu.SetUserID(*i)
	}
	return lu
}

// ClearUserID clears the value of the "user_id" field.
func (lu *LockUpdate) ClearUserID() *LockUpdate {
	lu.mutation.ClearUserID()
	return lu
}

// SetRepoID sets the "repo_id" field.
func (lu *LockUpdate) SetRepoID(i int64) *LockUpdate {
	lu.mutation.SetRepoID(i)
	return lu
}

// SetUser sets the "user" edge to the User entity.
func (lu *LockUpdate) SetUser(u *User) *LockUpdate {
	return lu.SetUserID(u.ID)
}

// SetRepo sets the "repo" edge to the Repo entity.
func (lu *LockUpdate) SetRepo(r *Repo) *LockUpdate {
	return lu.SetRepoID(r.ID)
}

// Mutation returns the LockMutation object of the builder.
func (lu *LockUpdate) Mutation() *LockMutation {
	return lu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lu *LockUpdate) ClearUser() *LockUpdate {
	lu.mutation.ClearUser()
	return lu
}

// ClearRepo clears the "repo" edge to the Repo entity.
func (lu *LockUpdate) ClearRepo() *LockUpdate {
	lu.mutation.ClearRepo()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LockUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lu.hooks) == 0 {
		if err = lu.check(); err != nil {
			return 0, err
		}
		affected, err = lu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lu.check(); err != nil {
				return 0, err
			}
			lu.mutation = mutation
			affected, err = lu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lu.hooks) - 1; i >= 0; i-- {
			if lu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LockUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LockUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LockUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LockUpdate) check() error {
	if _, ok := lu.mutation.RepoID(); lu.mutation.RepoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Lock.repo"`)
	}
	return nil
}

func (lu *LockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lock.Table,
			Columns: lock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lock.FieldID,
			},
		},
	}
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Env(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lock.FieldEnv,
		})
	}
	if value, ok := lu.mutation.ExpiredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: lock.FieldExpiredAt,
		})
	}
	if lu.mutation.ExpiredAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: lock.FieldExpiredAt,
		})
	}
	if value, ok := lu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: lock.FieldCreatedAt,
		})
	}
	if lu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lock.UserTable,
			Columns: []string{lock.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lock.UserTable,
			Columns: []string{lock.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lock.RepoTable,
			Columns: []string{lock.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: repo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lock.RepoTable,
			Columns: []string{lock.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LockUpdateOne is the builder for updating a single Lock entity.
type LockUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LockMutation
}

// SetEnv sets the "env" field.
func (luo *LockUpdateOne) SetEnv(s string) *LockUpdateOne {
	luo.mutation.SetEnv(s)
	return luo
}

// SetExpiredAt sets the "expired_at" field.
func (luo *LockUpdateOne) SetExpiredAt(t time.Time) *LockUpdateOne {
	luo.mutation.SetExpiredAt(t)
	return luo
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (luo *LockUpdateOne) SetNillableExpiredAt(t *time.Time) *LockUpdateOne {
	if t != nil {
		luo.SetExpiredAt(*t)
	}
	return luo
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (luo *LockUpdateOne) ClearExpiredAt() *LockUpdateOne {
	luo.mutation.ClearExpiredAt()
	return luo
}

// SetCreatedAt sets the "created_at" field.
func (luo *LockUpdateOne) SetCreatedAt(t time.Time) *LockUpdateOne {
	luo.mutation.SetCreatedAt(t)
	return luo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (luo *LockUpdateOne) SetNillableCreatedAt(t *time.Time) *LockUpdateOne {
	if t != nil {
		luo.SetCreatedAt(*t)
	}
	return luo
}

// SetUserID sets the "user_id" field.
func (luo *LockUpdateOne) SetUserID(i int64) *LockUpdateOne {
	luo.mutation.SetUserID(i)
	return luo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (luo *LockUpdateOne) SetNillableUserID(i *int64) *LockUpdateOne {
	if i != nil {
		luo.SetUserID(*i)
	}
	return luo
}

// ClearUserID clears the value of the "user_id" field.
func (luo *LockUpdateOne) ClearUserID() *LockUpdateOne {
	luo.mutation.ClearUserID()
	return luo
}

// SetRepoID sets the "repo_id" field.
func (luo *LockUpdateOne) SetRepoID(i int64) *LockUpdateOne {
	luo.mutation.SetRepoID(i)
	return luo
}

// SetUser sets the "user" edge to the User entity.
func (luo *LockUpdateOne) SetUser(u *User) *LockUpdateOne {
	return luo.SetUserID(u.ID)
}

// SetRepo sets the "repo" edge to the Repo entity.
func (luo *LockUpdateOne) SetRepo(r *Repo) *LockUpdateOne {
	return luo.SetRepoID(r.ID)
}

// Mutation returns the LockMutation object of the builder.
func (luo *LockUpdateOne) Mutation() *LockMutation {
	return luo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (luo *LockUpdateOne) ClearUser() *LockUpdateOne {
	luo.mutation.ClearUser()
	return luo
}

// ClearRepo clears the "repo" edge to the Repo entity.
func (luo *LockUpdateOne) ClearRepo() *LockUpdateOne {
	luo.mutation.ClearRepo()
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LockUpdateOne) Select(field string, fields ...string) *LockUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Lock entity.
func (luo *LockUpdateOne) Save(ctx context.Context) (*Lock, error) {
	var (
		err  error
		node *Lock
	)
	if len(luo.hooks) == 0 {
		if err = luo.check(); err != nil {
			return nil, err
		}
		node, err = luo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = luo.check(); err != nil {
				return nil, err
			}
			luo.mutation = mutation
			node, err = luo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luo.hooks) - 1; i >= 0; i-- {
			if luo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = luo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LockUpdateOne) SaveX(ctx context.Context) *Lock {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LockUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LockUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LockUpdateOne) check() error {
	if _, ok := luo.mutation.RepoID(); luo.mutation.RepoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Lock.repo"`)
	}
	return nil
}

func (luo *LockUpdateOne) sqlSave(ctx context.Context) (_node *Lock, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lock.Table,
			Columns: lock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lock.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Lock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lock.FieldID)
		for _, f := range fields {
			if !lock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Env(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lock.FieldEnv,
		})
	}
	if value, ok := luo.mutation.ExpiredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: lock.FieldExpiredAt,
		})
	}
	if luo.mutation.ExpiredAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: lock.FieldExpiredAt,
		})
	}
	if value, ok := luo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: lock.FieldCreatedAt,
		})
	}
	if luo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lock.UserTable,
			Columns: []string{lock.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lock.UserTable,
			Columns: []string{lock.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lock.RepoTable,
			Columns: []string{lock.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: repo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lock.RepoTable,
			Columns: []string{lock.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Lock{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
