// Code generated by entc, DO NOT EDIT.

package perm

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the perm type in the database.
	Label = "perm"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRepoPerm holds the string denoting the repo_perm field in the database.
	FieldRepoPerm = "repo_perm"
	// FieldSyncedAt holds the string denoting the synced_at field in the database.
	FieldSyncedAt = "synced_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldRepoID holds the string denoting the repo_id field in the database.
	FieldRepoID = "repo_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeRepo holds the string denoting the repo edge name in mutations.
	EdgeRepo = "repo"
	// Table holds the table name of the perm in the database.
	Table = "perms"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "perms"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// RepoTable is the table that holds the repo relation/edge.
	RepoTable = "perms"
	// RepoInverseTable is the table name for the Repo entity.
	// It exists in this package in order to avoid circular dependency with the "repo" package.
	RepoInverseTable = "repos"
	// RepoColumn is the table column denoting the repo relation/edge.
	RepoColumn = "repo_id"
)

// Columns holds all SQL columns for perm fields.
var Columns = []string{
	FieldID,
	FieldRepoPerm,
	FieldSyncedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUserID,
	FieldRepoID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// RepoPerm defines the type for the "repo_perm" enum field.
type RepoPerm string

// RepoPermRead is the default value of the RepoPerm enum.
const DefaultRepoPerm = RepoPermRead

// RepoPerm values.
const (
	RepoPermRead  RepoPerm = "read"
	RepoPermWrite RepoPerm = "write"
	RepoPermAdmin RepoPerm = "admin"
)

func (rp RepoPerm) String() string {
	return string(rp)
}

// RepoPermValidator is a validator for the "repo_perm" field enum values. It is called by the builders before save.
func RepoPermValidator(rp RepoPerm) error {
	switch rp {
	case RepoPermRead, RepoPermWrite, RepoPermAdmin:
		return nil
	default:
		return fmt.Errorf("perm: invalid enum value for repo_perm field: %q", rp)
	}
}
