// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitploy-io/gitploy/model/ent/deployment"
	"github.com/gitploy-io/gitploy/model/ent/deploymentstatus"
	"github.com/gitploy-io/gitploy/model/ent/event"
)

// DeploymentStatusCreate is the builder for creating a DeploymentStatus entity.
type DeploymentStatusCreate struct {
	config
	mutation *DeploymentStatusMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (dsc *DeploymentStatusCreate) SetStatus(s string) *DeploymentStatusCreate {
	dsc.mutation.SetStatus(s)
	return dsc
}

// SetDescription sets the "description" field.
func (dsc *DeploymentStatusCreate) SetDescription(s string) *DeploymentStatusCreate {
	dsc.mutation.SetDescription(s)
	return dsc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dsc *DeploymentStatusCreate) SetNillableDescription(s *string) *DeploymentStatusCreate {
	if s != nil {
		dsc.SetDescription(*s)
	}
	return dsc
}

// SetLogURL sets the "log_url" field.
func (dsc *DeploymentStatusCreate) SetLogURL(s string) *DeploymentStatusCreate {
	dsc.mutation.SetLogURL(s)
	return dsc
}

// SetNillableLogURL sets the "log_url" field if the given value is not nil.
func (dsc *DeploymentStatusCreate) SetNillableLogURL(s *string) *DeploymentStatusCreate {
	if s != nil {
		dsc.SetLogURL(*s)
	}
	return dsc
}

// SetCreatedAt sets the "created_at" field.
func (dsc *DeploymentStatusCreate) SetCreatedAt(t time.Time) *DeploymentStatusCreate {
	dsc.mutation.SetCreatedAt(t)
	return dsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dsc *DeploymentStatusCreate) SetNillableCreatedAt(t *time.Time) *DeploymentStatusCreate {
	if t != nil {
		dsc.SetCreatedAt(*t)
	}
	return dsc
}

// SetUpdatedAt sets the "updated_at" field.
func (dsc *DeploymentStatusCreate) SetUpdatedAt(t time.Time) *DeploymentStatusCreate {
	dsc.mutation.SetUpdatedAt(t)
	return dsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dsc *DeploymentStatusCreate) SetNillableUpdatedAt(t *time.Time) *DeploymentStatusCreate {
	if t != nil {
		dsc.SetUpdatedAt(*t)
	}
	return dsc
}

// SetDeploymentID sets the "deployment_id" field.
func (dsc *DeploymentStatusCreate) SetDeploymentID(i int) *DeploymentStatusCreate {
	dsc.mutation.SetDeploymentID(i)
	return dsc
}

// SetDeployment sets the "deployment" edge to the Deployment entity.
func (dsc *DeploymentStatusCreate) SetDeployment(d *Deployment) *DeploymentStatusCreate {
	return dsc.SetDeploymentID(d.ID)
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (dsc *DeploymentStatusCreate) AddEventIDs(ids ...int) *DeploymentStatusCreate {
	dsc.mutation.AddEventIDs(ids...)
	return dsc
}

// AddEvent adds the "event" edges to the Event entity.
func (dsc *DeploymentStatusCreate) AddEvent(e ...*Event) *DeploymentStatusCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return dsc.AddEventIDs(ids...)
}

// Mutation returns the DeploymentStatusMutation object of the builder.
func (dsc *DeploymentStatusCreate) Mutation() *DeploymentStatusMutation {
	return dsc.mutation
}

// Save creates the DeploymentStatus in the database.
func (dsc *DeploymentStatusCreate) Save(ctx context.Context) (*DeploymentStatus, error) {
	var (
		err  error
		node *DeploymentStatus
	)
	dsc.defaults()
	if len(dsc.hooks) == 0 {
		if err = dsc.check(); err != nil {
			return nil, err
		}
		node, err = dsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeploymentStatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dsc.check(); err != nil {
				return nil, err
			}
			dsc.mutation = mutation
			if node, err = dsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dsc.hooks) - 1; i >= 0; i-- {
			if dsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dsc *DeploymentStatusCreate) SaveX(ctx context.Context) *DeploymentStatus {
	v, err := dsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dsc *DeploymentStatusCreate) Exec(ctx context.Context) error {
	_, err := dsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsc *DeploymentStatusCreate) ExecX(ctx context.Context) {
	if err := dsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsc *DeploymentStatusCreate) defaults() {
	if _, ok := dsc.mutation.CreatedAt(); !ok {
		v := deploymentstatus.DefaultCreatedAt()
		dsc.mutation.SetCreatedAt(v)
	}
	if _, ok := dsc.mutation.UpdatedAt(); !ok {
		v := deploymentstatus.DefaultUpdatedAt()
		dsc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsc *DeploymentStatusCreate) check() error {
	if _, ok := dsc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "DeploymentStatus.status"`)}
	}
	if _, ok := dsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DeploymentStatus.created_at"`)}
	}
	if _, ok := dsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DeploymentStatus.updated_at"`)}
	}
	if _, ok := dsc.mutation.DeploymentID(); !ok {
		return &ValidationError{Name: "deployment_id", err: errors.New(`ent: missing required field "DeploymentStatus.deployment_id"`)}
	}
	if _, ok := dsc.mutation.DeploymentID(); !ok {
		return &ValidationError{Name: "deployment", err: errors.New(`ent: missing required edge "DeploymentStatus.deployment"`)}
	}
	return nil
}

func (dsc *DeploymentStatusCreate) sqlSave(ctx context.Context) (*DeploymentStatus, error) {
	_node, _spec := dsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dsc *DeploymentStatusCreate) createSpec() (*DeploymentStatus, *sqlgraph.CreateSpec) {
	var (
		_node = &DeploymentStatus{config: dsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: deploymentstatus.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deploymentstatus.FieldID,
			},
		}
	)
	if value, ok := dsc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deploymentstatus.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := dsc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deploymentstatus.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := dsc.mutation.LogURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deploymentstatus.FieldLogURL,
		})
		_node.LogURL = value
	}
	if value, ok := dsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deploymentstatus.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deploymentstatus.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := dsc.mutation.DeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deploymentstatus.DeploymentTable,
			Columns: []string{deploymentstatus.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeploymentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dsc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentstatus.EventTable,
			Columns: []string{deploymentstatus.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeploymentStatusCreateBulk is the builder for creating many DeploymentStatus entities in bulk.
type DeploymentStatusCreateBulk struct {
	config
	builders []*DeploymentStatusCreate
}

// Save creates the DeploymentStatus entities in the database.
func (dscb *DeploymentStatusCreateBulk) Save(ctx context.Context) ([]*DeploymentStatus, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dscb.builders))
	nodes := make([]*DeploymentStatus, len(dscb.builders))
	mutators := make([]Mutator, len(dscb.builders))
	for i := range dscb.builders {
		func(i int, root context.Context) {
			builder := dscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeploymentStatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dscb *DeploymentStatusCreateBulk) SaveX(ctx context.Context) []*DeploymentStatus {
	v, err := dscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dscb *DeploymentStatusCreateBulk) Exec(ctx context.Context) error {
	_, err := dscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dscb *DeploymentStatusCreateBulk) ExecX(ctx context.Context) {
	if err := dscb.Exec(ctx); err != nil {
		panic(err)
	}
}
