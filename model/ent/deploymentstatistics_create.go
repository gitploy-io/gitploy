// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitploy-io/gitploy/model/ent/deploymentstatistics"
	"github.com/gitploy-io/gitploy/model/ent/repo"
)

// DeploymentStatisticsCreate is the builder for creating a DeploymentStatistics entity.
type DeploymentStatisticsCreate struct {
	config
	mutation *DeploymentStatisticsMutation
	hooks    []Hook
}

// SetEnv sets the "env" field.
func (dsc *DeploymentStatisticsCreate) SetEnv(s string) *DeploymentStatisticsCreate {
	dsc.mutation.SetEnv(s)
	return dsc
}

// SetCount sets the "count" field.
func (dsc *DeploymentStatisticsCreate) SetCount(i int) *DeploymentStatisticsCreate {
	dsc.mutation.SetCount(i)
	return dsc
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (dsc *DeploymentStatisticsCreate) SetNillableCount(i *int) *DeploymentStatisticsCreate {
	if i != nil {
		dsc.SetCount(*i)
	}
	return dsc
}

// SetRollbackCount sets the "rollback_count" field.
func (dsc *DeploymentStatisticsCreate) SetRollbackCount(i int) *DeploymentStatisticsCreate {
	dsc.mutation.SetRollbackCount(i)
	return dsc
}

// SetNillableRollbackCount sets the "rollback_count" field if the given value is not nil.
func (dsc *DeploymentStatisticsCreate) SetNillableRollbackCount(i *int) *DeploymentStatisticsCreate {
	if i != nil {
		dsc.SetRollbackCount(*i)
	}
	return dsc
}

// SetAdditions sets the "additions" field.
func (dsc *DeploymentStatisticsCreate) SetAdditions(i int) *DeploymentStatisticsCreate {
	dsc.mutation.SetAdditions(i)
	return dsc
}

// SetNillableAdditions sets the "additions" field if the given value is not nil.
func (dsc *DeploymentStatisticsCreate) SetNillableAdditions(i *int) *DeploymentStatisticsCreate {
	if i != nil {
		dsc.SetAdditions(*i)
	}
	return dsc
}

// SetDeletions sets the "deletions" field.
func (dsc *DeploymentStatisticsCreate) SetDeletions(i int) *DeploymentStatisticsCreate {
	dsc.mutation.SetDeletions(i)
	return dsc
}

// SetNillableDeletions sets the "deletions" field if the given value is not nil.
func (dsc *DeploymentStatisticsCreate) SetNillableDeletions(i *int) *DeploymentStatisticsCreate {
	if i != nil {
		dsc.SetDeletions(*i)
	}
	return dsc
}

// SetChanges sets the "changes" field.
func (dsc *DeploymentStatisticsCreate) SetChanges(i int) *DeploymentStatisticsCreate {
	dsc.mutation.SetChanges(i)
	return dsc
}

// SetNillableChanges sets the "changes" field if the given value is not nil.
func (dsc *DeploymentStatisticsCreate) SetNillableChanges(i *int) *DeploymentStatisticsCreate {
	if i != nil {
		dsc.SetChanges(*i)
	}
	return dsc
}

// SetLeadTimeSeconds sets the "lead_time_seconds" field.
func (dsc *DeploymentStatisticsCreate) SetLeadTimeSeconds(i int) *DeploymentStatisticsCreate {
	dsc.mutation.SetLeadTimeSeconds(i)
	return dsc
}

// SetNillableLeadTimeSeconds sets the "lead_time_seconds" field if the given value is not nil.
func (dsc *DeploymentStatisticsCreate) SetNillableLeadTimeSeconds(i *int) *DeploymentStatisticsCreate {
	if i != nil {
		dsc.SetLeadTimeSeconds(*i)
	}
	return dsc
}

// SetCommitCount sets the "commit_count" field.
func (dsc *DeploymentStatisticsCreate) SetCommitCount(i int) *DeploymentStatisticsCreate {
	dsc.mutation.SetCommitCount(i)
	return dsc
}

// SetNillableCommitCount sets the "commit_count" field if the given value is not nil.
func (dsc *DeploymentStatisticsCreate) SetNillableCommitCount(i *int) *DeploymentStatisticsCreate {
	if i != nil {
		dsc.SetCommitCount(*i)
	}
	return dsc
}

// SetCreatedAt sets the "created_at" field.
func (dsc *DeploymentStatisticsCreate) SetCreatedAt(t time.Time) *DeploymentStatisticsCreate {
	dsc.mutation.SetCreatedAt(t)
	return dsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dsc *DeploymentStatisticsCreate) SetNillableCreatedAt(t *time.Time) *DeploymentStatisticsCreate {
	if t != nil {
		dsc.SetCreatedAt(*t)
	}
	return dsc
}

// SetUpdatedAt sets the "updated_at" field.
func (dsc *DeploymentStatisticsCreate) SetUpdatedAt(t time.Time) *DeploymentStatisticsCreate {
	dsc.mutation.SetUpdatedAt(t)
	return dsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dsc *DeploymentStatisticsCreate) SetNillableUpdatedAt(t *time.Time) *DeploymentStatisticsCreate {
	if t != nil {
		dsc.SetUpdatedAt(*t)
	}
	return dsc
}

// SetRepoID sets the "repo_id" field.
func (dsc *DeploymentStatisticsCreate) SetRepoID(i int64) *DeploymentStatisticsCreate {
	dsc.mutation.SetRepoID(i)
	return dsc
}

// SetRepo sets the "repo" edge to the Repo entity.
func (dsc *DeploymentStatisticsCreate) SetRepo(r *Repo) *DeploymentStatisticsCreate {
	return dsc.SetRepoID(r.ID)
}

// Mutation returns the DeploymentStatisticsMutation object of the builder.
func (dsc *DeploymentStatisticsCreate) Mutation() *DeploymentStatisticsMutation {
	return dsc.mutation
}

// Save creates the DeploymentStatistics in the database.
func (dsc *DeploymentStatisticsCreate) Save(ctx context.Context) (*DeploymentStatistics, error) {
	var (
		err  error
		node *DeploymentStatistics
	)
	dsc.defaults()
	if len(dsc.hooks) == 0 {
		if err = dsc.check(); err != nil {
			return nil, err
		}
		node, err = dsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeploymentStatisticsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dsc.check(); err != nil {
				return nil, err
			}
			dsc.mutation = mutation
			if node, err = dsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dsc.hooks) - 1; i >= 0; i-- {
			if dsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dsc *DeploymentStatisticsCreate) SaveX(ctx context.Context) *DeploymentStatistics {
	v, err := dsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dsc *DeploymentStatisticsCreate) Exec(ctx context.Context) error {
	_, err := dsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsc *DeploymentStatisticsCreate) ExecX(ctx context.Context) {
	if err := dsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsc *DeploymentStatisticsCreate) defaults() {
	if _, ok := dsc.mutation.Count(); !ok {
		v := deploymentstatistics.DefaultCount
		dsc.mutation.SetCount(v)
	}
	if _, ok := dsc.mutation.RollbackCount(); !ok {
		v := deploymentstatistics.DefaultRollbackCount
		dsc.mutation.SetRollbackCount(v)
	}
	if _, ok := dsc.mutation.Additions(); !ok {
		v := deploymentstatistics.DefaultAdditions
		dsc.mutation.SetAdditions(v)
	}
	if _, ok := dsc.mutation.Deletions(); !ok {
		v := deploymentstatistics.DefaultDeletions
		dsc.mutation.SetDeletions(v)
	}
	if _, ok := dsc.mutation.Changes(); !ok {
		v := deploymentstatistics.DefaultChanges
		dsc.mutation.SetChanges(v)
	}
	if _, ok := dsc.mutation.LeadTimeSeconds(); !ok {
		v := deploymentstatistics.DefaultLeadTimeSeconds
		dsc.mutation.SetLeadTimeSeconds(v)
	}
	if _, ok := dsc.mutation.CommitCount(); !ok {
		v := deploymentstatistics.DefaultCommitCount
		dsc.mutation.SetCommitCount(v)
	}
	if _, ok := dsc.mutation.CreatedAt(); !ok {
		v := deploymentstatistics.DefaultCreatedAt()
		dsc.mutation.SetCreatedAt(v)
	}
	if _, ok := dsc.mutation.UpdatedAt(); !ok {
		v := deploymentstatistics.DefaultUpdatedAt()
		dsc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsc *DeploymentStatisticsCreate) check() error {
	if _, ok := dsc.mutation.Env(); !ok {
		return &ValidationError{Name: "env", err: errors.New(`ent: missing required field "DeploymentStatistics.env"`)}
	}
	if _, ok := dsc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`ent: missing required field "DeploymentStatistics.count"`)}
	}
	if _, ok := dsc.mutation.RollbackCount(); !ok {
		return &ValidationError{Name: "rollback_count", err: errors.New(`ent: missing required field "DeploymentStatistics.rollback_count"`)}
	}
	if _, ok := dsc.mutation.Additions(); !ok {
		return &ValidationError{Name: "additions", err: errors.New(`ent: missing required field "DeploymentStatistics.additions"`)}
	}
	if _, ok := dsc.mutation.Deletions(); !ok {
		return &ValidationError{Name: "deletions", err: errors.New(`ent: missing required field "DeploymentStatistics.deletions"`)}
	}
	if _, ok := dsc.mutation.Changes(); !ok {
		return &ValidationError{Name: "changes", err: errors.New(`ent: missing required field "DeploymentStatistics.changes"`)}
	}
	if _, ok := dsc.mutation.LeadTimeSeconds(); !ok {
		return &ValidationError{Name: "lead_time_seconds", err: errors.New(`ent: missing required field "DeploymentStatistics.lead_time_seconds"`)}
	}
	if _, ok := dsc.mutation.CommitCount(); !ok {
		return &ValidationError{Name: "commit_count", err: errors.New(`ent: missing required field "DeploymentStatistics.commit_count"`)}
	}
	if _, ok := dsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DeploymentStatistics.created_at"`)}
	}
	if _, ok := dsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DeploymentStatistics.updated_at"`)}
	}
	if _, ok := dsc.mutation.RepoID(); !ok {
		return &ValidationError{Name: "repo_id", err: errors.New(`ent: missing required field "DeploymentStatistics.repo_id"`)}
	}
	if _, ok := dsc.mutation.RepoID(); !ok {
		return &ValidationError{Name: "repo", err: errors.New(`ent: missing required edge "DeploymentStatistics.repo"`)}
	}
	return nil
}

func (dsc *DeploymentStatisticsCreate) sqlSave(ctx context.Context) (*DeploymentStatistics, error) {
	_node, _spec := dsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dsc *DeploymentStatisticsCreate) createSpec() (*DeploymentStatistics, *sqlgraph.CreateSpec) {
	var (
		_node = &DeploymentStatistics{config: dsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: deploymentstatistics.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deploymentstatistics.FieldID,
			},
		}
	)
	if value, ok := dsc.mutation.Env(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deploymentstatistics.FieldEnv,
		})
		_node.Env = value
	}
	if value, ok := dsc.mutation.Count(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deploymentstatistics.FieldCount,
		})
		_node.Count = value
	}
	if value, ok := dsc.mutation.RollbackCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deploymentstatistics.FieldRollbackCount,
		})
		_node.RollbackCount = value
	}
	if value, ok := dsc.mutation.Additions(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deploymentstatistics.FieldAdditions,
		})
		_node.Additions = value
	}
	if value, ok := dsc.mutation.Deletions(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deploymentstatistics.FieldDeletions,
		})
		_node.Deletions = value
	}
	if value, ok := dsc.mutation.Changes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deploymentstatistics.FieldChanges,
		})
		_node.Changes = value
	}
	if value, ok := dsc.mutation.LeadTimeSeconds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deploymentstatistics.FieldLeadTimeSeconds,
		})
		_node.LeadTimeSeconds = value
	}
	if value, ok := dsc.mutation.CommitCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deploymentstatistics.FieldCommitCount,
		})
		_node.CommitCount = value
	}
	if value, ok := dsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deploymentstatistics.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deploymentstatistics.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := dsc.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deploymentstatistics.RepoTable,
			Columns: []string{deploymentstatistics.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RepoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeploymentStatisticsCreateBulk is the builder for creating many DeploymentStatistics entities in bulk.
type DeploymentStatisticsCreateBulk struct {
	config
	builders []*DeploymentStatisticsCreate
}

// Save creates the DeploymentStatistics entities in the database.
func (dscb *DeploymentStatisticsCreateBulk) Save(ctx context.Context) ([]*DeploymentStatistics, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dscb.builders))
	nodes := make([]*DeploymentStatistics, len(dscb.builders))
	mutators := make([]Mutator, len(dscb.builders))
	for i := range dscb.builders {
		func(i int, root context.Context) {
			builder := dscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeploymentStatisticsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dscb *DeploymentStatisticsCreateBulk) SaveX(ctx context.Context) []*DeploymentStatistics {
	v, err := dscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dscb *DeploymentStatisticsCreateBulk) Exec(ctx context.Context) error {
	_, err := dscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dscb *DeploymentStatisticsCreateBulk) ExecX(ctx context.Context) {
	if err := dscb.Exec(ctx); err != nil {
		panic(err)
	}
}
